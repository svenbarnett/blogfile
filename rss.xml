<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>人间日常</title>
        <link>https://www.pswen.cn</link>
        <description>所行皆过往，所愿皆成真</description>
        <language>zh-CN</language>
        <pubDate>Tue, 28 Mar 2023 14:07:43 +0000</pubDate>
        <lastBuildDate>Tue, 28 Mar 2023 14:07:43 +0000</lastBuildDate>
        <category>合照</category>
        <category>疫情</category>
        <category>春节</category>
        <category>烟花</category>
        <category>元宵节</category>
        <category>QQ</category>
        <category>那些年</category>
        <category>Apollo</category>
        <category>Spring</category>
        <category>动态配置</category>
        <category>聚会</category>
        <category>悼念</category>
        <category>linux</category>
        <category>acmesh</category>
        <category>域名证书</category>
        <category>leetcode</category>
        <category>算法</category>
        <category>贪心</category>
        <category>动态规划</category>
        <category>二分法</category>
        <category>快慢指针</category>
        <category>gulp</category>
        <category>压缩图片</category>
        <category>gulp-imagemin</category>
        <category>Java</category>
        <category>位运算</category>
        <category>正则</category>
        <category>js</category>
        <category>去除零</category>
        <category>jvm</category>
        <category>类加载</category>
        <category>jvm调优</category>
        <category>混合模式</category>
        <category>解释模式</category>
        <category>纯编译模式</category>
        <category>环形链表</category>
        <category>往昔时光</category>
        <category>大学</category>
        <category>往昔</category>
        <category>实习</category>
        <category>高中</category>
        <category>我们</category>
        <category>年轻</category>
        <category>年幼</category>
        <category>树</category>
        <category>dfs</category>
        <category>bfs</category>
        <category>武康大楼</category>
        <category>上海</category>
        <category>三叉戟</category>
        <category>陆家嘴</category>
        <category>上海外滩</category>
        <category>夜景</category>
        <category>晚霞</category>
        <category>云谷</category>
        <category>回溯</category>
        <category>矩阵</category>
        <category>深度遍历</category>
        <category>广度遍历</category>
        <category>图记</category>
        <category>天安云谷</category>
        <category>生活</category>
        <category>午餐</category>
        <category>单词接龙</category>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/15a97059/index.html</guid>
            <title>世界少了一个人，而我失去了爷爷</title>
            <link>https://www.pswen.cn/p/15a97059/index.html</link>
            <category>悼念</category>
            <pubDate>Tue, 28 Mar 2023 14:07:43 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;我的爷爷于 2023 年 03 月 27 日 10:36 分去世了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h4 id=&#34;简要生平&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简要生平&#34;&gt;#&lt;/a&gt; 简要生平&lt;/h4&gt;
&lt;p&gt;我的爷爷，彭明辉，出生于 1938 年，享年 85 岁。在我爸的悼念中写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;父亲大人出生于 1938 年 5 月 14 日贫农家庭，高小文化，1954 年起参加潭湾初级社，六联乡高级社，横烟大队的基层工作，&lt;/p&gt;
&lt;img src=&#34;/p/15a97059/index/IMG_0776.JPG&#34; alt=&#34;IMG_0776&#34;&gt;
&lt;p&gt;1956 年 7 月加入中国共产党，在党和政府的培养下，加强学习，得到了领导的推荐，进入人民公社，乡人民政府从事民政、企业会计 (助理会计师职称) 等职务工作，&lt;/p&gt;
&lt;img src=&#34;/p/15a97059/index/IMG_0775.JPG&#34; alt=&#34;IMG_0775&#34;&gt;
&lt;p&gt;在几十年的工作中，勤奋努力、兢兢业业、任劳任怨，奉献自己力量，教子有方，儿孙绕膝，一生精力全部奉献给后裔，&lt;/p&gt;
&lt;img src=&#34;/p/15a97059/index/IMG_0777.JPG&#34; alt=&#34;IMG_0777&#34;&gt;
&lt;p&gt;严父因年迈突发重病，经多方医治无效，不幸于本闰二月初六日，上午 10.36 时分寿终正寝，享寿 85 年，生前感谢亲友族的亲切关怀，在此我表示深深哀谢！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而我们在整理遗物时，找回了很多年前的回忆，也看到他的意气风发！&lt;/p&gt;
&lt;h4 id=&#34;我们的回忆&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#我们的回忆&#34;&gt;#&lt;/a&gt; 我们的回忆&lt;/h4&gt;
&lt;p&gt;小时候，我们一群孙辈环绕在他身旁，那时候他应该是很幸福&lt;/p&gt;
&lt;img src=&#34;/p/15a97059/index/IMG_0769.jpg&#34; alt=&#34;IMG_0769&#34;&gt;
&lt;p&gt;但是这些记忆直到我们找到照片也记不起，此时我们就像生活在两个平行空间，没有记忆的交集&lt;/p&gt;
&lt;p&gt;相信他也曾无数次翻开这些充满他回忆的照片，也会情不自禁的笑出来&lt;/p&gt;
&lt;img src=&#34;/p/15a97059/index/IMG_0768.jpg&#34; alt=&#34;IMG_0768&#34;&gt;
&lt;h4 id=&#34;他的意气风发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#他的意气风发&#34;&gt;#&lt;/a&gt; 他的意气风发&lt;/h4&gt;
&lt;p&gt;从他收藏学习生活材料记录来看，他年轻时也是一个爱学习、万事皆计划、喜爱记录、善于整理、非常细心的一个帅气年轻小伙&lt;/p&gt;
&lt;p&gt;记录的家庭成员的生辰八字&lt;/p&gt;
&lt;img src=&#34;/p/15a97059/index/IMG_0788.JPG&#34; alt=&#34;IMG_0788&#34;&gt;
&lt;p&gt;写的悼词&lt;/p&gt;
&lt;img src=&#34;/p/15a97059/index/IMG_0774.JPG&#34; alt=&#34;IMG_0774&#34;&gt;
&lt;p&gt;种种的点点滴滴，和我们看到的爷爷完全是两个类型的人，此时他如此细腻、如此多愁善感、如此耐心&lt;/p&gt;
&lt;p&gt;此时，不觉令人发醒：人终归黄土，而如何让人长久活在大家记忆之中？&lt;/p&gt;
&lt;p&gt;我觉无非就是他给这个世界留下了什么！&lt;/p&gt;
&lt;p&gt;&lt;video src=&#34;/p/15a97059/index.html1.mp4&#34; controls=&#34;&#34;&gt;&lt;source src=&#34;/p/15a97059/index.html1.mp4&#34; type=&#34;video/mp4&#34;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;从前&lt;br&gt;
您带我们扫墓烧钱，&lt;br&gt;
您教我们叩头作揖，&lt;br&gt;
您教我们写您的祖考&lt;br&gt;
您给我们讲述您的辉煌故事&lt;/p&gt;
&lt;p&gt;以后&lt;br&gt;
我们给您扫墓烧钱，&lt;br&gt;
我们给您叩头作揖，&lt;br&gt;
您变成了我们的祖考&lt;br&gt;
我们只能从仅存照片中回忆您的故事&lt;/p&gt;
&lt;p&gt;您长眠，我常念；爷爷，一路走好！&lt;/p&gt;
&lt;p&gt;视频制作 By 彭丽娜&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/3255df9f/index.html</guid>
            <title>希望传递温暖，让异乡变家乡</title>
            <link>https://www.pswen.cn/p/3255df9f/index.html</link>
            <category>聚会</category>
            <pubDate>Sat, 18 Mar 2023 11:16:54 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;希望 480 的同学在全国各地遇到来出差的同学都主动约一下，让大家都能感受四面八方同学的温暖！！！&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;在深圳合気屋下沙店聚一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/3255df9f/index/IMG_0743.jpg&#34; alt=&#34;地点：深圳下沙合気屋&#34;&gt;&lt;/p&gt;
&lt;p&gt;回去路上还挺远&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/3255df9f/index/IMG_0745.jpg&#34; alt=&#34;回去路线&#34;&gt;&lt;/p&gt;
&lt;p&gt;后面 K 了一下歌&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/3255df9f/index/IMG_0752.JPG&#34; alt=&#34;K歌&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/4c633c0c/index.html</guid>
            <title>从Apollo动态配置原理学Spring(二)</title>
            <link>https://www.pswen.cn/p/4c633c0c/index.html</link>
            <category>Apollo</category>
            <category>Spring</category>
            <pubDate>Sun, 26 Feb 2023 12:39:24 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;Apollo 动态配置其实本质就是利用 Spring Bean 的生命周期的扩展点，这个扩展点超级多，不可能全部列出来，只说核心的扩展点。这也就是为什么 Spring 的扩展性很好的原因，开了很多的口子，尽可能让某个功能高内聚松耦合，用户需要哪个功能就用哪个，而不是直接来一个大而全的东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们先通过学习核心的，然后后续对照 Apollo 用到了哪些再对照，就会发现很多地方就能理解的很好了&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;strong&gt;什么是 Spring Bean 的生命周期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于普通的 Java 对象，当 new 的时候创建对象，然后该对象就能够使用了。一旦该对象不再被使用，则由 Java 自动进行垃圾回收。&lt;/p&gt;
&lt;p&gt;而 Spring 中的对象是 bean，bean 和普通的 Java 对象没啥大的区别，只不过 Spring 不再自己去 new 对象了，而是由 IoC 容器去帮助我们实例化对象并且管理它，我们需要哪个对象，去问 IoC 容器要即可。IoC 其实就是解决对象之间的耦合问题，Spring Bean 的生命周期完全由容器控制。&lt;/p&gt;
&lt;h2 id=&#34;spring-bean-的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-bean-的生命周期&#34;&gt;#&lt;/a&gt; Spring Bean 的生命周期&lt;/h2&gt;
&lt;p&gt;这里要提一下，这里我们说的 Spring Bean 的生命周期主要指的是 singleton bean，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。&lt;/p&gt;
&lt;p&gt;我们也来复习下 Spring 中的 bean 的作用域有哪些？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;singleton&lt;/code&gt;  : 唯一 bean 实例，Spring 中的 bean 默认都是单例的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prototype&lt;/code&gt;  : 每次请求都会创建一个新的 bean 实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request&lt;/code&gt;  : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP request 内有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session&lt;/code&gt;  : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;global-session&lt;/code&gt; ： 全局 session 作用域，仅仅在基于 Portlet 的 web 应用中才有意义，Spring5 已经没有了。Portlet 是能够生成语义代码（例如：HTML）片段的小型 Java Web 插件。它们基于 portlet 容器，可以像 servlet 一样处理 HTTP 请求。但是，与 servlet 不同，每个 portlet 都有不同的会话。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们知道对于普通的 Java 对象来说，它们的生命周期就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实例化&lt;/li&gt;
&lt;li&gt;该对象不再被使用时通过垃圾回收机制进行回收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而对于 Spring Bean 的生命周期来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实例化 Instantiation&lt;/li&gt;
&lt;li&gt;属性赋值 Populate&lt;/li&gt;
&lt;li&gt;初始化 Initialization&lt;/li&gt;
&lt;li&gt;销毁 Destruction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实例化 -&amp;gt; 属性赋值 -&amp;gt; 初始化 -&amp;gt; 销毁&lt;/p&gt;
&lt;p&gt;只有四个步骤，这样拆解的话是不是感觉也不难？不像其他人写的那样直接一上来就各种 BeanPostProcessor、BeanFactoryPostProcessor 全部怼进流程里去，别说读者看着头大，自己写的可能短时间内还记得流程，隔个一段时间，你可能都不知道自己写了个啥。&lt;/p&gt;
&lt;p&gt;通过 Bean 创建流程入口 &lt;code&gt;AbstractApplicationContext#refresh()&lt;/code&gt;  方法的  &lt;code&gt;finishBeanFactoryInitialization(beanFactory)&lt;/code&gt;  处带大家跟一下源码，想了想还是不带入过多的代码进来，直接给到最终的主要逻辑。&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;doCreateBean&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String beanName, RootBeanDefinition mbd, &lt;span class=&#34;meta&#34;&gt;@Nullable&lt;/span&gt; Object[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; BeanCreationException {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;instanceWrapper&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mbd.isSingleton()) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        instanceWrapper = (BeanWrapper)&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.factoryBeanInstanceCache.remove(beanName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (instanceWrapper == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 实例化阶段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        instanceWrapper = &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.createBeanInstance(beanName, mbd, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;exposedObject&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; bean;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	&lt;span class=&#34;comment&#34;&gt;// 属性赋值阶段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.populateBean(beanName, mbd, instanceWrapper);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 初始化阶段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        exposedObject = &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.initializeBean(beanName, exposedObject, mbd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    } &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Throwable var18) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;至于销毁，是在容器关闭时调用的，详见  &lt;code&gt;ConfigurableApplicationContext#close()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;是不是很清爽了？至于 BeanPostProcessor、BeanFactoryPostProcessor 以及其他的类，只不过是对主流程四个步骤的一系列扩展点而已。&lt;/p&gt;
&lt;h2 id=&#34;spring-bean-的生命周期的扩展点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-bean-的生命周期的扩展点&#34;&gt;#&lt;/a&gt; Spring Bean 的生命周期的扩展点&lt;/h2&gt;
&lt;p&gt;Spring Bean 的生命周期的扩展点超级多，老周这里不可能全部列出来，只说核心的扩展点。这也就是为什么 Spring 的扩展性很好的原因，开了很多的口子，尽可能让某个功能高内聚松耦合，用户需要哪个功能就用哪个，而不是直接来一个大而全的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bean 自身的方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如构造函数、getter/setter 以及 init-method 和 destory-method 所指定的方法等，也就对应着上文说的实例化 -&amp;gt; 属性赋值 -&amp;gt; 初始化 -&amp;gt; 销毁四个阶段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210707002134280.png&#34; alt=&#34;阶段示意图&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器级的方法（BeanPostProcessor 一系列接口）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要是后处理器方法，比如下图的  &lt;code&gt;InstantiationAwareBeanPostProcessor&lt;/code&gt; 、 &lt;code&gt;BeanPostProcessor&lt;/code&gt;  接口方法。这些接口的实现类是独立于 Bean 的，并且会注册到 Spring 容器中。在 Spring 容器创建任何 Bean 的时候，这些后处理器都会发生作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210707225212729.png&#34; alt=&#34;扩展点&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;InstantiationAwareBeanPostProcessor 源码分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们翻一下源码发现 InstantiationAwareBeanPostProcessor 是继承了 BeanPostProcessor&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210707230505579.png&#34; alt=&#34;InstantiationAwareBeanPostProcessor &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210707230919307.png&#34; alt=&#34;BeanPostProcessor&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation&lt;/code&gt;  调用点&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Object postProcessBeforeInstantiation(Class&amp;lt;?&amp;gt; beanClass, String beanName)&lt;br&gt;
 返回值：如果返回的不为 null，那么后续的 Bean 的创建流程【实例化、初始化 afterProperties】都不会执行，而是直接使用返回的快捷 Bean，此时的正常执行顺序如下：&lt;br&gt;
InstantiationAwareBeanPostProcessor 接口中的 postProcessBeforeInstantiation，在实例化之前调用。&lt;br&gt;
BeanPostProcessor 接口中的 postProcessAfterInitialization，在实例化之后调用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210707233026943.png&#34; alt=&#34;createbean&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210707235533784.png&#34; alt=&#34;resolveBeforeInstantiation&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210708000228655.png&#34; alt=&#34;applyBean&#34;&gt;&lt;/p&gt;
&lt;p&gt;总之，postProcessBeforeInstantiation 在 doCreateBean 之前调用，也就是在 bean 实例化之前调用的，英文源码注释解释道该方法的返回值会替换原本的 Bean 作为代理，这也是 &lt;a href=&#34;https://so.csdn.net/so/search?q=AOP&amp;amp;spm=1001.2101.3001.7020&#34;&gt;AOP&lt;/a&gt; 等功能实现的关键点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation&lt;/code&gt;  调用点&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException&lt;br&gt;
 正常情况下在实例化之后在执行 populateBean 之前调用&lt;br&gt;
返回值：如果有指定的 bean 的时候返回 false，那么后续的属性填充和属性依赖注入【populateBean】将不会执行，同时后续的 postProcessPropertyValues 将不会执行，但是初始化和 BeanPostProcessor 的仍然会执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210708005050274.png&#34; alt=&#34;populateBean&#34;&gt;&lt;/p&gt;
&lt;p&gt;public PropertyValues postProcessPropertyValues(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)&lt;br&gt;
 实例化之后调用，在方法 applyPropertyValues【属性填充】之前&lt;br&gt;
返回值：如果返回 null，那么将不会进行后续的属性填充，比如依赖注入等，如果返回的 pvs 额外的添加了属性，那么后续会填充到该类对应的属性中。&lt;br&gt;
pvs：PropertyValues 对象，用于封装指定类的对象，简单来说就是 PropertyValue 的集合，里面相当于以 key-value 形式存放类的属性和值。&lt;br&gt;
pds：PropertyDescriptor 对象数组，PropertyDescriptor 相当于存储类的属性，不过可以调用 set，get 方法设置和获取对应属性的值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210708010057366.png&#34; alt=&#34;postProcessPropertyValues&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BeanPostProcessor 源码分析&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210708232740951.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;br&gt;
进入初始化接口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210708233139731.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;br&gt;
我们先来看&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInitialization&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210708233742525.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先获取到所有的后置处理器 getBeanPostProcessors ()&lt;/li&gt;
&lt;li&gt;在 for 循环中依次调用后置处理器的方法  &lt;code&gt;processor.postProcessBeforeInitialization(result, beanName);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入 postProcessBeforeInitialization 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;org.springframework.context.support.ApplicationContextAwareProcessor#postProcessBeforeInitialization&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210708234443215.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入  &lt;code&gt;invokeAwareInterfaces(bean);&lt;/code&gt;  方法，当前 bean 实现了 ApplicationContextAware 接口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210708234639952.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ApplicationContextAwareProcessor#postProcessBeforeInitialization&lt;/code&gt;  首先判断此 bean 是不是各种的 Aware，如果是它列举的那几个 Aware 就获取 Bean 工厂的权限，可以向容器中导入相关的上下文环境，目的是为了 Bean 实例能够获取到相关的上下文，如果不是它列举的几个 Aware，那就调用  &lt;code&gt;invokeAwareInterfaces(bean)&lt;/code&gt; ，向容器中添加相关接口的上下文环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3.3 工厂后处理器方法（BeanFactoryProcessor 一系列接口）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包括  &lt;code&gt;AspectJWeavingEnabler&lt;/code&gt; 、 &lt;code&gt;CustomAutowireConfigurer&lt;/code&gt; 、 &lt;code&gt;ConfigurationClassPostProcessor&lt;/code&gt;  等。这些都是 Spring 框架中已经实现好的 BeanFactoryPostProcessor，用来实现某些特定的功能。&lt;/p&gt;
&lt;p&gt;我们知道 Spring IoC 容器初始化的关键环节就在  &lt;code&gt;org.springframework.context.support.AbstractApplicationContext#refresh&lt;/code&gt;  方法中 ，容器创建的主体流程都在这个方法里面，这个方法是真的重要！！！&lt;/p&gt;
&lt;p&gt;对于工厂后处理器方法老周这里直接带你看  &lt;code&gt;invokeBeanFactoryPostProcessors(beanFactory);&lt;/code&gt;  方法，这个方法处理的是  &lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt;  接口的 Bean。调用方法如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210709231013239.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;br&gt;
跟到最重要的方法里去，代码虽长，但逻辑中规中矩。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt; ：一切处理 BeanFactory 的父接口&lt;br&gt;
 &lt;code&gt;BeanDefinitionRegistryPostProcessor&lt;/code&gt; ：实现了 BeanFactoryPostProcessor 接口的接口&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/4c633c0c/index/20210709233225102.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;br&gt;
流程说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用 BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry (registry) 方法。参数 beanFactoryPostProcessors 传入的优先处理掉。然后获取容器注册的，对于这些 Bean 按照 PriorityOrdered 接口、Ordered、没有排序接口的实例分别进行处理。&lt;/li&gt;
&lt;li&gt;调用 BeanFactoryPostProcessor#postProcessBeanFactory (beanFactory) 方法。备注：BeanDefinitionRegistryPostProcessor 属于 BeanFactoryPostProcessor 子接口。先处理属于 BeanDefinitionRegistryPostProcessor 接口实例的 postProcessBeanFactory (beanFactory) 方法，然后获取容器注册的。对于这些 Bean 按照 PriorityOrdered 接口、Ordered、没有排序接口的实例分别进行处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/e352a76e/index.html</guid>
            <title>从Apollo动态配置原理学Spring(一)</title>
            <link>https://www.pswen.cn/p/e352a76e/index.html</link>
            <category>Apollo</category>
            <category>Spring</category>
            <category>动态配置</category>
            <pubDate>Thu, 23 Feb 2023 14:29:54 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;最近工作碰到需要写一个类似携程 Apollo 的动态配置功能，以此系统学习该原理，熟练掌握下 Spring 的各种机制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Apollo 动态配置原理简述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Apollo 配置中心动态生效机制，是基于 Http 长轮询请求和 Spring 扩展机制实现的，在 Spring 容器启动过程中，Apollo 通过自定义的 &lt;code&gt;BeanPostProcessor&lt;/code&gt;  和 &lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt;  將参数中包含 &lt;code&gt;${…}&lt;/code&gt;  占位符和 &lt;code&gt;@Value&lt;/code&gt;  注解的 Bean 注册到 Apollo 框架中定义的注册表中。然后通过 Http 长轮询不断的去获取服务端的配置信息，一旦配置发生变化，Apollo 会根据变化的配置的 Key 找到对应的 Bean，然后修改 Bean 的属性，从而实现了配置动态生效的特性。&lt;/p&gt;
&lt;p&gt;需要注意的是，Apollo 在配置变化后，只能修改 Bean 的属性，例如我们数据源的属性发生变化，新创建的 Connection 对象是没问题的，但是连接池中已经创建的 Connection 对象相关信息是不能动态修改的，所以依然需要重启应用。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;其中涉及到的 Spring 的扩展机制有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BeanFactoryPostProcessor&lt;/li&gt;
&lt;li&gt;BeanPostProcessor&lt;/li&gt;
&lt;li&gt;BeanDefinitionRegistry&lt;/li&gt;
&lt;li&gt;PropertySource&lt;/li&gt;
&lt;li&gt;ImportBeanDefinitionRegistrar&lt;/li&gt;
&lt;li&gt;PropertySourcesPlaceholderConfigurer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;其中每一个都是非常关键的点，我们后续会一一进行学习。&lt;/p&gt;
&lt;h2 id=&#34;apollo启动过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#apollo启动过程&#34;&gt;#&lt;/a&gt; Apollo 启动过程&lt;/h2&gt;
&lt;p&gt;首先，我们先看一张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/e352a76e/index/image-20230223224050610.png&#34; alt=&#34;Apollo启动图&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Spring 启动，扫描 bean，将相关变量参数注册到 Apollo 属性注册表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 RemoteConfigRepository 获取配置，持久化本地，后续读取从本地读取，通过 &lt;code&gt;PropertySourcesProcessor&lt;/code&gt;  执行如下步骤&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（1）根据命名空间从配置中心获取配置信息，创建 RemoteConfigRepository 和 LocalFileConfigRepository 对象。RemoteConfigRepository 表示远程配置中心资源，LocalFileConfigRepository 表示本地缓存配置资源。&lt;/p&gt;
&lt;p&gt;（2）LocalFileConfigRepository 对象缓存配置信息到 C:\opt\data 或者 /opt/data 目录&lt;/p&gt;
&lt;p&gt;（3）RemoteConfigRepository 开启 HTTP 长轮询请求定时任务，默认 2s 请求一次。&lt;/p&gt;
&lt;p&gt;（4）將本地缓存配置信息转换为 PropertySource 对象（Apollo 自定义了 Spring 的 PropertySource），加载到 Spring 的 Environment 对象中。至此静态配置就已经加入到环境变量中&lt;/p&gt;
&lt;p&gt;（5）將自定义的 ConfigPropertySource 注册为观察者。一旦 RemoteConfigRepository 发现远程配置中心信息发生变化，ConfigPropertySource 对象会得到通知。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;通过一个自定义监听器，监听对应事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后续通过长轮询请求监听到配置变化，根据配置读取注册表里面的 key 和对应的 bean，通过反射修改 bean 对应属性值&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;apollo扩展点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#apollo扩展点&#34;&gt;#&lt;/a&gt; Apollo 扩展点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;PropertySourcesProcessor&lt;/code&gt;  初始化 Apollo 配置、接入 Spring environment，初始化 Apollo 监听器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApolloAnnotationProcessor&lt;/code&gt;  提供 Apollo 一些注解支持 &lt;code&gt;@ApolloConfig&lt;/code&gt; ， &lt;code&gt;@ApolloConfigChangeListener&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringValueProcessor&lt;/code&gt;  提供对 &lt;code&gt;@Value&lt;/code&gt;  动态生效能力 针对实例 bean&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringValueDefinitionProcessor&lt;/code&gt;  提供对 &lt;code&gt;@Value&lt;/code&gt;  动态生效能力 针对 bean 定义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApolloJsonValueProcessor&lt;/code&gt;  提供对 &lt;code&gt;@ApolloJsonValue&lt;/code&gt;  支持&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述分别对应使用 Spring 的扩展能力 &lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt; 、 &lt;code&gt;BeanPostProcessor&lt;/code&gt; 、 &lt;code&gt;BeanPostProcessor&lt;/code&gt;  和 &lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt; 、 &lt;code&gt;BeanDefinitionRegistryPostProcessor&lt;/code&gt; 、 &lt;code&gt;BeanPostProcessor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们这个系列也会对 apollo 基于 spring 提供的扩展点来嵌入自己的能力。主要为 BeanFactoryPostProcessor、BeanPostProcessor 这两个扩展点；先简单说一下：&lt;em&gt;&lt;strong&gt;只需要知道，BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor 在生成所有 beandefinition 之后调用，而 BeanPostProcessor 在通过 beandefinition 实例化 bean 的过程中调用即可。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;那这些实现我们就下篇见了！！！&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/75466bf9/index.html</guid>
            <title>QQ上线了24周年注册全球排名这个活动</title>
            <link>https://www.pswen.cn/p/75466bf9/index.html</link>
            <category>QQ</category>
            <category>那些年</category>
            <pubDate>Fri, 10 Feb 2023 12:58:50 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;2023 年 2 月 10 日是 QQ24 周年的日子，在这天 QQ 上线了 24 周年注册全球排名这个活动，玩家可以在这里看到自己是什么时候创建的账号，并且还可以看到自己的排名信息哦。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;/p/75466bf9/index/20230210161435_71813.jpg&#34; alt=&#34;QQ&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;qq24周年全球排名查看攻略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#qq24周年全球排名查看攻略&#34;&gt;#&lt;/a&gt; QQ24 周年全球排名查看攻略&lt;/h3&gt;
&lt;p&gt;这个活动的查看有着两种方式，分别如下：&lt;/p&gt;
&lt;p&gt;1、点击链接（&lt;strong&gt;24 周年全球排名网址 &amp;gt;&amp;gt;&lt;/strong&gt;&lt;a href=&#34;https://ti.qq.com/open_qq/newIndex.html?url=https%3A%2F%2Fti.qq.com%2Fact%2Fqq24th%2Findex.html%3F_wv%3D16777219%26_wwv%3D128%26source%3D2&#34;&gt; 点击查看&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;点击上方的 24 周年全球排名网址链接，这个会直接唤起 qq。&lt;/p&gt;
&lt;p&gt;点击立即查看我们就可以看到自己的排名，需要同意协议。&lt;/p&gt;
&lt;p&gt;下面是我的排名：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/75466bf9/index/IMG_0057.JPG&#34; alt=&#34;IMG_0057&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/277fd0ba/index.html</guid>
            <title>元宵节，放了烟花</title>
            <link>https://www.pswen.cn/p/277fd0ba/index.html</link>
            <category>烟花</category>
            <category>元宵节</category>
            <pubDate>Wed, 08 Feb 2023 14:29:06 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;烟花又称 [花炮]、烟火、焰火、[炮仗]，根据《中国 [烟花爆竹] 标准 — 安全与质量》对烟花爆竹的定义为：以烟火药为原料，用于产生声光色的娱乐用品。中国劳动人民较早发明，常用于盛大的典礼或表演中。&lt;/p&gt;
&lt;p&gt;烟花其实和爆竹的结构类似，其结构都包含黑 [火药] 和药引。为了达到好的表演效果，[焰火] 和 [礼花弹] 中填充了大量用于发射以及爆炸的火药，例如，一个直径为 20 厘米的礼花弹在发射后，要上升到大概 200 米的高空才会爆炸，而这些星星点点覆盖的 [半径] 大约可以有 80 米左右。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;/p/277fd0ba/index/IMG_0698_1.jpeg&#34; alt=&#34;小区放烟花&#34;&gt;&lt;/p&gt;
&lt;p&gt;醴陵花炮起源最早可上溯至唐代，已经有着上千年的历史，以产地醴陵而被概括命名。当地是烟花的发祥地，也是花炮祖师李畋的故乡，被誉为名副其实的 “花炮之乡”。&lt;/p&gt;
&lt;p&gt;浏阳花炮，湖南省浏阳市特产，中国国家地理标志产品。&lt;br&gt;
浏阳市是世界著名的花炮之乡。浏阳花炮造型美观，色彩鲜艳，质量可靠，素有 “浏阳花炮震天下” 的美名。2002 年 10 月，在浏阳闭幕的首届国际花炮合作与贸易大会上，浏阳成为国际花炮协会总部永久所在地。2007 年，“浏阳花炮” 被正式认定为中国驰名商标。 [3]&lt;br&gt;
 2003 年 03 月 06 日，原国家质检总局批准对 “浏阳花炮” 实施地理标志产品保护。&lt;/p&gt;
&lt;p&gt;作为醴陵人，说实话，浏阳花炮的科技量要比醴陵花炮高，这几年醴陵也在紧追猛赶！加油！&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/ebb8427d/index.html</guid>
            <title>2023兔年春节</title>
            <link>https://www.pswen.cn/p/ebb8427d/index.html</link>
            <category>春节</category>
            <pubDate>Sat, 04 Feb 2023 07:27:08 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h3 id=&#34;1-春节年前家县城进行烟花表演&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-春节年前家县城进行烟花表演&#34;&gt;#&lt;/a&gt; 1. 春节年前，家县城进行烟花表演：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/p/ebb8427d/index/IMG_0650.PNG&#34; alt=&#34;烟花表演1&#34;&gt;&lt;/p&gt;
&lt;p&gt;估计是增加了延迟拍摄&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;/p/ebb8427d/index/IMG_0651.PNG&#34; alt=&#34;烟花表演2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/ebb8427d/index/IMG_0652.PNG&#34; alt=&#34;烟花表演3&#34;&gt;&lt;/p&gt;
&lt;p&gt;还是得加滤镜啊&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/ebb8427d/index/IMG_0653.PNG&#34; alt=&#34;烟花表演4&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-大伯家客厅搞了个灯&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-大伯家客厅搞了个灯&#34;&gt;#&lt;/a&gt; 2. 大伯家客厅搞了个 “灯”&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/p/ebb8427d/index/IMG_0656.JPG&#34; alt=&#34;大伯家的“灯”&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-玩游戏的小外甥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-玩游戏的小外甥&#34;&gt;#&lt;/a&gt; 3. 玩游戏的小外甥&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/p/ebb8427d/index/IMG_0657.jpg&#34; alt=&#34;认真玩游戏&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-外婆家合照&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-外婆家合照&#34;&gt;#&lt;/a&gt; 4. 外婆家合照&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/p/ebb8427d/index/IMG_0681.jpg&#34; alt=&#34;外婆家合照&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-老表们&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-老表们&#34;&gt;#&lt;/a&gt; 5. 老表们&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/p/ebb8427d/index/IMG_1794.jpg&#34; alt=&#34;我和老表们&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-主公我是忠臣&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-主公我是忠臣&#34;&gt;#&lt;/a&gt; 6. 主公，我是忠臣&lt;/h3&gt;
&lt;p&gt;特别说明：服务员也太不走心，少拍了一个人都说挺好，那个人是 “望叔”，给望叔郑重道歉！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/ebb8427d/index/IMG_0690.JPG&#34; alt=&#34;同学聚合照&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-王家码头&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-王家码头&#34;&gt;#&lt;/a&gt; 7. 王家码头&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/p/ebb8427d/index/IMG_0691.JPG&#34; alt=&#34;王家码头&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;8-家族祠堂&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-家族祠堂&#34;&gt;#&lt;/a&gt; 8. 家族祠堂&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/p/ebb8427d/index/IMG_0692.JPG&#34; alt=&#34;祠堂&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;9-返程堵车&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-返程堵车&#34;&gt;#&lt;/a&gt; 9. 返程堵车&lt;/h3&gt;
&lt;p&gt;原本的 12h 变成 20 多小时，真是辛苦司机了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/ebb8427d/index/IMG_0694.JPG&#34; alt=&#34;堵车&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/850ce73f/index.html</guid>
            <title>室友“羊”了</title>
            <link>https://www.pswen.cn/p/850ce73f/index.html</link>
            <category>疫情</category>
            <pubDate>Mon, 19 Dec 2022 12:46:23 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;室友这几天不舒服，就测了，果不其然🐑了，我应该是很危险了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;/p/850ce73f/index/image-20221219212509735.png&#34; alt=&#34;抗原检测阳性&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/d223f900/index.html</guid>
            <title>疫情三年，是时候结束了！</title>
            <link>https://www.pswen.cn/p/d223f900/index.html</link>
            <category>疫情</category>
            <pubDate>Mon, 12 Dec 2022 12:56:26 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;疫情三年，什么变化了？什么没有变化呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;疫情三年变化的是，出现了健康码、行程码、核酸检测&lt;/p&gt;
&lt;p&gt;疫情三年变化的是，到处都贴起了二维码、出行限制、经济发展滞缓&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;/p/d223f900/index/image-20221212210631735.png&#34; alt=&#34;核酸检测点即将拆除&#34;&gt;&lt;/p&gt;
&lt;p&gt;三年疫情，突然放开，大家还是有些许不适应&lt;/p&gt;
&lt;p&gt;还是习惯的过门卡掏出手机，还是习惯每天准点测核酸&lt;/p&gt;
&lt;p&gt;三年疫情对国家也有很大冲击，国家开始发行国债，用来弥补这三年的核酸检测国家政府开支&lt;/p&gt;
&lt;p&gt;三年疫情对经济冲击夜很大，许多行业都开始收紧，业务调整，裁员潮，都开始 “过冬” 了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/d223f900/index/image-20221212210553921.png&#34; alt=&#34;行程码下线&#34;&gt;&lt;/p&gt;
&lt;p&gt;不变的是啥呢？&lt;/p&gt;
&lt;p&gt;唯一不变的估计是人吗？&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/52a5c0f5/index.html</guid>
            <title>被围绕的区域——LeetCode130</title>
            <link>https://www.pswen.cn/p/52a5c0f5/index.html</link>
            <category>矩阵</category>
            <category>深度遍历</category>
            <category>广度遍历</category>
            <pubDate>Tue, 08 Feb 2022 11:56:55 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;给你一个  &lt;code&gt;m x n&lt;/code&gt;  的矩阵  &lt;code&gt;board&lt;/code&gt;  ，由若干字符  &lt;code&gt;&#39;X&#39;&lt;/code&gt;  和  &lt;code&gt;&#39;O&#39;&lt;/code&gt;  ，找到所有被  &lt;code&gt;&#39;X&#39;&lt;/code&gt;  围绕的区域，并将这些区域里所有的  &lt;code&gt;&#39;O&#39;&lt;/code&gt;  用  &lt;code&gt;&#39;X&#39;&lt;/code&gt;  填充。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/52a5c0f5/index/xogrid.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;示例 1&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：board = [[&#34;X&#34;,&#34;X&#34;,&#34;X&#34;,&#34;X&#34;],[&#34;X&#34;,&#34;O&#34;,&#34;O&#34;,&#34;X&#34;],[&#34;X&#34;,&#34;X&#34;,&#34;O&#34;,&#34;X&#34;],[&#34;X&#34;,&#34;O&#34;,&#34;X&#34;,&#34;X&#34;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[[&#34;X&#34;,&#34;X&#34;,&#34;X&#34;,&#34;X&#34;],[&#34;X&#34;,&#34;X&#34;,&#34;X&#34;,&#34;X&#34;],[&#34;X&#34;,&#34;X&#34;,&#34;X&#34;,&#34;X&#34;],[&#34;X&#34;,&#34;O&#34;,&#34;X&#34;,&#34;X&#34;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：被围绕的区间不会存在于边界上，换句话说，任何边界上的&amp;nbsp;&#39;O&#39;&amp;nbsp;都不会被填充为&amp;nbsp;&#39;X&#39;。 任何不在边界上，或不与边界上的&amp;nbsp;&#39;O&#39;&amp;nbsp;相连的&amp;nbsp;&#39;O&#39;&amp;nbsp;最终都会被填充为&amp;nbsp;&#39;X&#39;。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 2&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：board = [[&#34;X&#34;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[[&#34;X&#34;]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;m == board.length&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n == board[i].length&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 &amp;lt;= m, n &amp;lt;= 200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;board[i][j] 为 &#39;X&#39; 或 &#39;O&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;解题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题&#34;&gt;#&lt;/a&gt; 解题&lt;/h3&gt;
&lt;p&gt;写在前面&lt;br&gt;
本题给定的矩阵中有三种元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;字母 X；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;被字母 X 包围的字母 O；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;没有被字母 X 包围的字母 O。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本题要求将所有被字母 X 包围的字母 O 都变为字母 X ，但很难判断哪些 O 是被包围的，哪些 O 不是被包围的。&lt;/p&gt;
&lt;p&gt;注意到题目解释中提到： &lt;code&gt;任何边界上的 O 都不会被填充为 X&lt;/code&gt; 。 我们可以想到，所有的不被包围的 O 都直接或间接与边界上的 O 相连。我们可以利用这个性质判断 O 是否在边界上，具体地说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于每一个边界上的 O，我们以它为起点，标记所有与它直接或间接相连的字母 O；&lt;br&gt;
最后我们遍历这个矩阵，对于每一个字母：&lt;/li&gt;
&lt;li&gt;如果该字母被标记过，则该字母为没有被字母 X 包围的字母 O，我们将其还原为字母 O；&lt;br&gt;
如果该字母没有被标记过，则该字母为被字母 X 包围的字母 O，我们将其修改为字母 X。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法一深度优先搜索&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法一深度优先搜索&#34;&gt;#&lt;/a&gt; 方法一：深度优先搜索&lt;/h3&gt;
&lt;h4 id=&#34;思路及解法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#思路及解法&#34;&gt;#&lt;/a&gt; 思路及解法&lt;/h4&gt;
&lt;p&gt;我们可以使用深度优先搜索实现标记操作。在下面的代码中，我们把标记过的字母 O 修改为字母 A。&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n, m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;solve&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;[][] board)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n = board.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (n == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m = board[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dfs(board, i, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dfs(board, i, m - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; m - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dfs(board, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dfs(board, n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; m; j++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (board[i][j] == &lt;span class=&#34;string&#34;&gt;&#39;A&#39;&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    board[i][j] = &lt;span class=&#34;string&#34;&gt;&#39;O&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                } &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (board[i][j] == &lt;span class=&#34;string&#34;&gt;&#39;O&#39;&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    board[i][j] = &lt;span class=&#34;string&#34;&gt;&#39;X&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;[][] board, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (x &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; || x &amp;gt;= n || y &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; || y &amp;gt;= m || board[x][y] != &lt;span class=&#34;string&#34;&gt;&#39;O&#39;&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        board[x][y] = &lt;span class=&#34;string&#34;&gt;&#39;A&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(board, x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(board, x - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(board, x, y + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(board, x, y - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h4 id=&#34;复杂度分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复杂度分析&#34;&gt;#&lt;/a&gt; 复杂度分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;时间复杂度： &lt;code&gt;O(n×m)&lt;/code&gt; ，其中  &lt;code&gt;n&lt;/code&gt;  和  &lt;code&gt;m &lt;/code&gt; 分别为矩阵的行数和列数。深度优先搜索过程中，每一个点至多只会被标记一次。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空间复杂度： &lt;code&gt;O(n×m)&lt;/code&gt; ，其中  &lt;code&gt;n&lt;/code&gt;  和  &lt;code&gt;m&lt;/code&gt;  分别为矩阵的行数和列数。主要为深度优先搜索的栈的开销。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法二广度优先搜索&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法二广度优先搜索&#34;&gt;#&lt;/a&gt; 方法二：广度优先搜索&lt;/h3&gt;
&lt;h4 id=&#34;思路及解法-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#思路及解法-2&#34;&gt;#&lt;/a&gt; 思路及解法&lt;/h4&gt;
&lt;p&gt;我们可以使用广度优先搜索实现标记操作。在下面的代码中，我们把标记过的字母  &lt;code&gt;O&lt;/code&gt;  修改为字母  &lt;code&gt;A&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] dx = {&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] dy = {&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;solve&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;[][] board)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; board.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (n == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; board[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Queue&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[]&amp;gt; queue = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedList&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[]&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (board[i][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] == &lt;span class=&#34;string&#34;&gt;&#39;O&#39;&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                queue.offer(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[]{i, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                board[i][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&#39;A&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (board[i][m - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] == &lt;span class=&#34;string&#34;&gt;&#39;O&#39;&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                queue.offer(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[]{i, m - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                board[i][m - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&#39;A&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; m - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (board[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][i] == &lt;span class=&#34;string&#34;&gt;&#39;O&#39;&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                queue.offer(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[]{&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, i});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                board[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][i] = &lt;span class=&#34;string&#34;&gt;&#39;A&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (board[n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][i] == &lt;span class=&#34;string&#34;&gt;&#39;O&#39;&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                queue.offer(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[]{n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, i});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                board[n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][i] = &lt;span class=&#34;string&#34;&gt;&#39;A&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!queue.isEmpty()) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] cell = queue.poll();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; cell[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], y = cell[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;mx&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; x + dx[i], my = y + dy[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mx &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; || my &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; || mx &amp;gt;= n || my &amp;gt;= m || board[mx][my] != &lt;span class=&#34;string&#34;&gt;&#39;O&#39;&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                queue.offer(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[]{mx, my});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                board[mx][my] = &lt;span class=&#34;string&#34;&gt;&#39;A&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; m; j++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (board[i][j] == &lt;span class=&#34;string&#34;&gt;&#39;A&#39;&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    board[i][j] = &lt;span class=&#34;string&#34;&gt;&#39;O&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                } &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (board[i][j] == &lt;span class=&#34;string&#34;&gt;&#39;O&#39;&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    board[i][j] = &lt;span class=&#34;string&#34;&gt;&#39;X&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h4 id=&#34;复杂度分析-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复杂度分析-2&#34;&gt;#&lt;/a&gt; 复杂度分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;时间复杂度： &lt;code&gt;O(n×m)&lt;/code&gt; ，其中  &lt;code&gt;n&lt;/code&gt;  和  &lt;code&gt;m&lt;/code&gt;  分别为矩阵的行数和列数。广度优先搜索过程中，每一个点至多只会被标记一次。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空间复杂度： &lt;code&gt;O(n×m)&lt;/code&gt; ，其中  &lt;code&gt;n&lt;/code&gt;  和  &lt;code&gt;m&lt;/code&gt;  分别为矩阵的行数和列数。主要为广度优先搜索的队列的开销。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/638c83fa/index.html</guid>
            <title>JVM调优——X参数,方法内联</title>
            <link>https://www.pswen.cn/p/638c83fa/index.html</link>
            <category>jvm调优</category>
            <category>混合模式</category>
            <category>解释模式</category>
            <category>纯编译模式</category>
            <pubDate>Wed, 12 Jan 2022 15:06:08 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;JVM 的 &lt;code&gt;-X&lt;/code&gt;  参数是非标准参数，在不同版本的 JVM 中，参数可能会有所不同，可以通过 &lt;code&gt;java -X&lt;/code&gt;  查看非标准参数&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt; java -X&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xbatch           禁用后台编译&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xbootclasspath/a:&amp;lt;以 : 分隔的目录和 zip/jar 文件&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      附加在引导类路径末尾&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xcheck:jni       对 JNI 函数执行其他检查&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xcomp            强制在首次调用时编译方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xdebug           不执行任何操作。为实现向后兼容而提供。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xdiag            显示附加诊断消息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xfuture          启用最严格的检查，预期将来的默认值。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      此选项已过时，可能会在&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      未来发行版中删除。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xint             仅解释模式执行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xinternalversion&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      显示比 -version 选项更详细的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      JVM 版本信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xlog:&amp;lt;opts&amp;gt;      配置或启用采用 Java 虚拟&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      机 (Java Virtual Machine, JVM) 统一记录框架进行事件记录。使用 -Xlog:help&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      可了解详细信息。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xloggc:&amp;lt;file&amp;gt;    将 GC 状态记录在文件中（带时间戳）。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      此选项已过时，可能会在&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      将来的发行版中删除。它将替换为 -Xlog:gc:&amp;lt;file&amp;gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xmixed           混合模式执行（默认值）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xmn&amp;lt;size&amp;gt;        为年轻代（新生代）设置初始和最大堆大小&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      （以字节为单位）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xms&amp;lt;size&amp;gt;        设置初始 Java 堆大小&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xmx&amp;lt;size&amp;gt;        设置最大 Java 堆大小&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xnoclassgc       禁用类垃圾收集&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xrs              减少 Java/VM 对操作系统信号的使用（请参见文档）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xshare:auto      在可能的情况下使用共享类数据（默认值）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xshare:off       不尝试使用共享类数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xshare:on        要求使用共享类数据，否则将失败。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      这是一个测试选项，可能导致间歇性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      故障。不应在生产环境中使用它。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -XshowSettings    显示所有设置并继续&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -XshowSettings:all&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      显示所有设置并继续&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -XshowSettings:locale&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      显示所有与区域设置相关的设置并继续&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -XshowSettings:properties&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      显示所有属性设置并继续&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -XshowSettings:vm&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      显示所有与 vm 相关的设置并继续&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -XshowSettings:system&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      （仅 Linux）显示主机系统或容器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      配置并继续&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xss&amp;lt;size&amp;gt;        设置 Java 线程堆栈大小&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xverify          设置字节码验证器的模式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      请注意，选项 -Xverify:none 已过时，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      可能会在未来发行版中删除。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    --add-reads &amp;lt;module&amp;gt;=&amp;lt;target-module&amp;gt;(,&amp;lt;target-module&amp;gt;)*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      更新 &amp;lt;module&amp;gt; 以读取 &amp;lt;target-module&amp;gt;，而无论&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      模块如何声明。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      &amp;lt;target-module&amp;gt; 可以是 ALL-UNNAMED，将读取所有未命名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      模块。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    --add-exports &amp;lt;module&amp;gt;/&amp;lt;package&amp;gt;=&amp;lt;target-module&amp;gt;(,&amp;lt;target-module&amp;gt;)*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      更新 &amp;lt;module&amp;gt; 以将 &amp;lt;package&amp;gt; 导出到 &amp;lt;target-module&amp;gt;，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      而无论模块如何声明。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      &amp;lt;target-module&amp;gt; 可以是 ALL-UNNAMED，将导出到所有&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      未命名模块。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    --add-opens &amp;lt;module&amp;gt;/&amp;lt;package&amp;gt;=&amp;lt;target-module&amp;gt;(,&amp;lt;target-module&amp;gt;)*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      更新 &amp;lt;module&amp;gt; 以在 &amp;lt;target-module&amp;gt; 中打开&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      &amp;lt;package&amp;gt;，而无论模块如何声明。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    --illegal-access=&amp;lt;value&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      允许或拒绝通过未命名模块中的代码对命名模块中的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      类型成员进行访问。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      &amp;lt;value&amp;gt; 为 &#34;deny&#34;、&#34;permit&#34;、&#34;warn&#34; 或 &#34;debug&#34; 之一&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      此选项将在未来发行版中删除。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    --limit-modules &amp;lt;module name&amp;gt;[,&amp;lt;module name&amp;gt;...]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      限制可观察模块的领域&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    --patch-module &amp;lt;module&amp;gt;=&amp;lt;file&amp;gt;(:&amp;lt;file&amp;gt;)*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      使用 JAR 文件或目录中的类和资源&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      覆盖或增强模块。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    --source &amp;lt;version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      设置源文件模式中源的版本。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;这些额外选项如有更改, 恕不另行通知。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;以下选项是特定于 macOS 的选项：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -XstartOnFirstThread&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      在第一个 (AppKit) 线程上运行 main() 方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xdock:name=&amp;lt;application name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                      覆盖停靠栏中显示的默认应用程序名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -Xdock:icon=&amp;lt;path to icon file&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                     覆盖停靠栏中显示的默认图标&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;-xint-xcomp与-xmixed参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#-xint-xcomp与-xmixed参数&#34;&gt;#&lt;/a&gt; -Xint、-Xcomp 与 - Xmixed 参数&lt;/h2&gt;
&lt;h3 id=&#34;-xint参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#-xint参数&#34;&gt;#&lt;/a&gt; -Xint 参数&lt;/h3&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;在解释模式（interpreted mode）下，-Xint标记会强制JVM执行所有的字节码，这当然会降低运行速度，通常低10倍或更多。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;/p/638c83fa/index/20190729122640228.png&#34; alt=&#34;interpreted-mode&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;-xcomp参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#-xcomp参数&#34;&gt;#&lt;/a&gt; -Xcomp 参数&lt;/h3&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;-Xcomp参数与-Xint正好相反，JVM在第一次使用时会把所有的字节码编译成本地代码，从而带来最大程度的优化。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;/p/638c83fa/index/20190729122919297.png&#34; alt=&#34;compiled-mode&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而，很多应用在使用 - Xcomp 也会有一些性能损失，当然这笔 - Xint 损失的少，原因是 - Xcomp 没有让 JVM 启用 JIT 编译器的全部功能。JIT 编译器可以对是否需要编译做出判断。如果所有代码都需要进行编译的话，对于一些只执行一次的代码就没有意义了。&lt;/p&gt;
&lt;h3 id=&#34;-xmixed参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#-xmixed参数&#34;&gt;#&lt;/a&gt; -Xmixed 参数&lt;/h3&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;-Xmixed是混合模式，将解释模式和变异模式进行混合使用，有JVM自己决定，这是JVM的默认模式，也是推荐模式&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;/p/638c83fa/index/2019072913573773.png&#34; alt=&#34;mixed-model&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;jvm方法内联优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jvm方法内联优化&#34;&gt;#&lt;/a&gt; JVM 方法内联优化&lt;/h2&gt;
&lt;h3 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;在日常中工作中，我们时不时会代码进行一些优化，比如用新的算法，简化计算逻辑，减少计算量等。对于 java 程序来说，除了开发者本身对代码优化之外，还有一个 &#34;人&#34; 也在背后默默的优化我们的代码，这个 &#34;人&#34; 就是 jvm。jvm 会帮我们分析出热点代码，优化代码逻辑。其中 jvm 最常做的优化之一就是：方法内联优化。&lt;/p&gt;
&lt;h3 id=&#34;方法内联&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法内联&#34;&gt;#&lt;/a&gt; 方法内联&lt;/h3&gt;
&lt;p&gt;什么是方法内联？又可以叫做函数内联，java 中方法可等同于其它语言中的函数。关于方法内联维基百科上面解释是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在计算机科学中，内联函数（有时称作在线函数或编译时期展开函数）是一种编程语言结构，用来建议编译器对一些特殊函数进行内联扩展（有时称作在线扩展）；也就是说&lt;strong&gt;建议编译器将指定的函数体插入并取代每一处调用该函数的地方（上下文），从而节省了每次调用函数带来的额外时间开支。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单通俗的讲就是把方法内部调用的其它方法的逻辑，嵌入到自身的方法中去，变成自身的一部分，之后不再调用该方法，从而节省调用函数带来的额外开支。&lt;/p&gt;
&lt;h3 id=&#34;函数调用开销&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数调用开销&#34;&gt;#&lt;/a&gt; 函数调用开销&lt;/h3&gt;
&lt;p&gt;之所以出现方法内联是因为函数调用除了执行自身逻辑的开销外，还有一些不为人知的额外开销。这部分额外的开销主要来自方法栈帧的生成、参数字段的压入、栈帧的弹出、还有指令执行地址的跳转。比如有下面这样代码：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;function_A&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b)&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    function_B(a,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;function_B&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; c, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; d)&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     function_A(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;则代码的执行过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/638c83fa/index/247487dfbaf1ec956441e9e5e2f85817_1440w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以如果 java 中方法调用嵌套过多或者方法过多，这种额外的开销就越多。&lt;/p&gt;
&lt;p&gt;试想一下想 get/set 这种方法调用：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getI&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setI&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.i = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;} &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;很可能自身执行逻辑的开销还比不上为了调用这个方法的额外开锁。如果类似的方法被频繁的调用，则真正相对执行效率就会很低，虽然这类方法的执行时间很短。这也是为什么 jvm 会在热点代码中执行方法内联的原因，这样的话就可以省去调用调用函数带来的额外开支。&lt;/p&gt;
&lt;p&gt;这里举个内联的可能形式：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;  &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; c, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; d)&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; add(a, b) + add(c, d);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b)&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;内联之后：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;  &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b , &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; c, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; d)&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a + b + c + d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;这样除了本身的相加逻辑的开销，比内联前减少了二次调用函数带来的额外开销。&lt;/p&gt;
&lt;h3 id=&#34;内联条件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内联条件&#34;&gt;#&lt;/a&gt; 内联条件&lt;/h3&gt;
&lt;p&gt;一个方法如果满足以下条件就很可能被 jvm 内联。&lt;/p&gt;
&lt;p&gt;1、热点代码： 如果一个方法的执行频率很高就表示优化的潜在价值就越大。那代码执行多少次才能确定为热点代码？这是根据编译器的编译模式来决定的。如果是客户端编译模式则次数是 1500，服务端编译模式是 10000。次数的大小可以通过 - XX:CompileThreshold 来调整。&lt;/p&gt;
&lt;p&gt;2、方法体不能太大：jvm 中被内联的方法会编译成机器码放在 code cache 中。如果方法体太大，则能缓存热点方法就少，反而会影响性能。&lt;/p&gt;
&lt;p&gt;3、如果希望方法被内联，尽量用 private、static、final 修饰，这样 jvm 可以直接内联。如果是 public、protected 修饰方法 jvm 则需要进行类型判断，因为这些方法可以被子类继承和覆盖，jvm 需要判断内联究竟内联是父类还是其中某个子类的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以了解 jvm 方法内联机制之后，会有助于我们工作中写出能让 jvm 更容易优化的代码，有助于提升程序的性能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/9195a466/index.html</guid>
            <title>巧妙使用正则——去除小数点后多余的零</title>
            <link>https://www.pswen.cn/p/9195a466/index.html</link>
            <category>正则</category>
            <category>js</category>
            <category>去除零</category>
            <pubDate>Mon, 10 Jan 2022 13:51:44 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;直接上代码&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JSX&#34;&gt;&lt;figure class=&#34;iseeu highlight jsx&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; arr=[&lt;span class=&#34;string&#34;&gt;&#39;1200.00100&#39;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&#39;1200.00000&#39;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&#39;1200.&#39;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&#39;1200&#39;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&#39;1200.10000&#39;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&#39;0.120010000&#39;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&#39;0.000011111&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; regexp=&lt;span class=&#34;regexp&#34;&gt;/(?:\.0*|(\.\d+?)0+)$/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arr.&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(item.&lt;span class=&#34;title function_&#34;&gt;replace&lt;/span&gt;(regexp,&lt;span class=&#34;string&#34;&gt;&#39;$1&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;})&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// &amp;gt; 1200.001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// &amp;gt; 1200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// &amp;gt; 1200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// &amp;gt; 1200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// &amp;gt; 1200.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// &amp;gt; 0.12001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// &amp;gt; 0.000011111&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;正则可视化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/9195a466/index/image.svg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;推荐个可视化网址：&lt;a href=&#34;https://regexper.com/&#34;&gt;https://regexper.com/&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;再解释下正则的意思 &lt;code&gt;(?:.0*|(.\d+?)0+)$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先分解成 4 部分&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;(?:reg1|reg2)&lt;/code&gt;  - 它是一个正则分组非捕获组，要么匹配 reg1，要么匹配 reg2，优先匹配 reg1，加上？: 不对捕获组记录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.0*&lt;/code&gt;  - 表示匹配一个。开头，后边跟着 0 或 0 个以上数量的 0，且不进行捕获，所以在填充 $1 时，就是个空值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(.\d+?)0+&lt;/code&gt;  - 它是一个捕获组，匹配一个。开头后边跟着非贪婪（懒惰）匹配任意数字，接着在末尾尽可能多的匹配 0 这个字符，匹配完成后，生成一个捕获组内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt;  - 表示匹配结果需要以 0 作为结尾&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;正则分组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#正则分组&#34;&gt;#&lt;/a&gt; 正则分组&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;普通捕获组&lt;/p&gt;
&lt;p&gt;从正则表达式左侧开始，每出现一个左括号 &#34;(&#34; 记做一个分组，分组编号从 1 开始。0 代表整个表达式。&lt;/p&gt;
&lt;p&gt;对于时间字符串：2017-04-25，表达式如下&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JS&#34;&gt;&lt;figure class=&#34;iseeu highlight js&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(\\d{&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;})-((\\d{&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;})-(\\d{&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;}))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;有 4 个左括号，所以有 4 个分组:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;编号&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;捕获组&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;匹配&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(\d{4})-((\d{2})-(\d{2}))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2017-04-25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(\d{4})&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;((\d{2})-(\d{2}))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;04-25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(\d{2})&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(\d{2})&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命名捕获组&lt;/p&gt;
&lt;p&gt;每个以左括号开始的捕获组，都紧跟着 &lt;strong&gt;?&lt;/strong&gt;，而后才是正则表达式。&lt;/p&gt;
&lt;p&gt;对于时间字符串：2017-04-25，表达式如下:&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JS&#34;&gt;&lt;figure class=&#34;iseeu highlight js&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(?&amp;lt;year&amp;gt;\\d{&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;})-(?&amp;lt;md&amp;gt;(?&amp;lt;month&amp;gt;\\d{&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;})-(?&amp;lt;date&amp;gt;\\d{&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;}))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;有 4 个命名的捕获组，分别是:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;编号&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;捕获组&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;匹配&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(?\d{4})-(?(?\d{2})-(?\d{2}))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2017-04-25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;year&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(?\d{4})-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;md&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(?(?\d{2})-(?\d{2}))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;04-25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;month&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(?\d{2})&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;date&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(?\d{2})&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;命名的捕获组同样也可以使用编号获取相应值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;非捕获组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#非捕获组&#34;&gt;#&lt;/a&gt; 非捕获组&lt;/h2&gt;
&lt;p&gt;在左括号后紧跟  &lt;code&gt;?:&lt;/code&gt; ，而后再加上正则表达式，构成非捕获组 &lt;strong&gt;(?:Expression)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于时间字符串：2017-04-25，表达式如下:&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JS&#34;&gt;&lt;figure class=&#34;iseeu highlight js&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(?:\\d{&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;})-((\\d{&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;})-(\\d{&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;}))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;这个正则表达式虽然有四个左括号，理论上有 4 个捕获组。但是第一组 &lt;strong&gt;(?:\d{4})&lt;/strong&gt;，其实是被忽略的。当使用 matcher.group (4) 时，系统会报错。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;编号&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;捕获组&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;匹配&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(\d{4})-((\d{2})-(\d{2}))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2017-04-25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;((\d{2})-(\d{2}))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;04-25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(\d{2})&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(\d{2})&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;非贪婪懒惰匹配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#非贪婪懒惰匹配&#34;&gt;#&lt;/a&gt; 非贪婪 (懒惰) 匹配&lt;/h2&gt;
&lt;p&gt;** 贪婪匹配:** 正则表达式一般趋向于最大长度匹配，也就是所谓的贪婪匹配。如上面使用模式 p 匹配字符串 str，结果就是匹配到：&lt;strong&gt;abcaxc&lt;/strong&gt;(ab*c)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非贪婪匹配&lt;/strong&gt;：就是匹配到结果就好，就少的匹配字符。如上面使用模式 p 匹配字符串 str，结果就是匹配到：&lt;strong&gt;abc&lt;/strong&gt;(ab*c)。&lt;/p&gt;
&lt;p&gt;问号可以表示重复前面内容的 0 次或一次，也就是要么不出现，要么出现一次&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;pattern1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; @&lt;span class=&#34;string&#34;&gt;&#34;a.*?c&#34;&lt;/span&gt;;   &lt;span class=&#34;comment&#34;&gt;// non-greedy match &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Regex&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;regex&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Regex&lt;/span&gt;(pattern1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;regex.Match(&lt;span class=&#34;string&#34;&gt;&#34;abcabc&#34;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// return &#34;abc&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;## 结果：abc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PYTHON&#34;&gt;&lt;figure class=&#34;iseeu highlight python&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; re&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s=&lt;span class=&#34;string&#34;&gt;&#39;hello 1234567 world&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;res = re.&lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;he.*?(\d).*rld$&#39;&lt;/span&gt;,s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(res.group(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;## 结果：123456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;常用非贪婪表达式&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;*? 重复任意次，但尽可能少重复&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+? 重复1次或更多次，但尽可能少重复&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;?? 重复0次或1次，但尽可能少重复&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{n,m}? 重复n到m次，但尽可能少重复&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;{n,}? 重复n次以上，但尽可能少重复&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/fbb9fe6d/index.html</guid>
            <title>单词接龙——leetcode127</title>
            <link>https://www.pswen.cn/p/fbb9fe6d/index.html</link>
            <category>leetcode</category>
            <category>算法</category>
            <category>单词接龙</category>
            <pubDate>Sun, 09 Jan 2022 10:38:08 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&#34;题目描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题目描述&#34;&gt;#&lt;/a&gt; 题目描述&lt;/h1&gt;
&lt;p&gt;字典&amp;nbsp;wordList 中从单词 beginWord&amp;nbsp;和 endWord 的 转换序列 是一个按下述规格形成的序列：&lt;br&gt;
序列中第一个单词是  &lt;code&gt;beginWord&lt;/code&gt;  。&lt;br&gt;
序列中最后一个单词是  &lt;code&gt;endWord&lt;/code&gt; 。&lt;br&gt;
每次转换只能改变一个字母。&lt;br&gt;
转换过程中的中间单词必须是字典&amp;nbsp; &lt;code&gt;wordList&lt;/code&gt;  中的单词。&lt;br&gt;
给你两个单词  &lt;code&gt;beginWord&lt;/code&gt; &amp;nbsp;和  &lt;code&gt;endWord&lt;/code&gt;  和一个字典  &lt;code&gt;wordList&lt;/code&gt;  ，找到从&amp;nbsp; &lt;code&gt;beginWord &lt;/code&gt; 到&amp;nbsp; &lt;code&gt;endWord&lt;/code&gt;  的 最短转换序列 中的 单词数目 。如果不存在这样的转换序列，返回  &lt;code&gt;0&lt;/code&gt; 。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：beginWord = &#34;hit&#34;, endWord = &#34;cog&#34;, wordList = [&#34;hot&#34;,&#34;dot&#34;,&#34;dog&#34;,&#34;lot&#34;,&#34;log&#34;,&#34;cog&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：一个最短转换序列是 &#34;hit&#34; -&amp;gt; &#34;hot&#34; -&amp;gt; &#34;dot&#34; -&amp;gt; &#34;dog&#34; -&amp;gt; &#34;cog&#34;, 返回它的长度 5。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：beginWord = &#34;hit&#34;, endWord = &#34;cog&#34;, wordList = [&#34;hot&#34;,&#34;dot&#34;,&#34;dog&#34;,&#34;lot&#34;,&#34;log&#34;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：endWord &#34;cog&#34; 不在字典中，所以无法进行转换。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1 &amp;lt;= beginWord.length &amp;lt;= 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;endWord.length == beginWord.length&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 &amp;lt;= wordList.length &amp;lt;= 5000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wordList[i].length == beginWord.length&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;beginWord、endWord 和 wordList[i] 由小写英文字母组成&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;beginWord != endWord&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wordList 中的所有字符串 互不相同&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h1 id=&#34;解题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题&#34;&gt;#&lt;/a&gt; 解题&lt;/h1&gt;
&lt;h3 id=&#34;方法一广度优先搜索-优化建图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法一广度优先搜索-优化建图&#34;&gt;#&lt;/a&gt; 方法一：广度优先搜索 + 优化建图&lt;/h3&gt;
&lt;h4 id=&#34;思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#思路&#34;&gt;#&lt;/a&gt; 思路&lt;/h4&gt;
&lt;p&gt;本题要求的是最短转换序列的长度，看到最短首先想到的就是广度优先搜索。想到广度优先搜索自然而然的就能想到图，但是本题并没有直截了当的给出图的模型，因此我们需要把它抽象成图的模型。&lt;/p&gt;
&lt;p&gt;我们可以把每个单词都抽象为一个点，如果两个单词可以只改变一个字母进行转换，那么说明他们之间有一条双向边。因此我们只需要把满足转换条件的点相连，就形成了一张图。&lt;/p&gt;
&lt;p&gt;基于该图，我们以 beginWord 为图的起点，以 endWord 为终点进行广度优先搜索，寻找 beginWord 到 endWord 的最短路径。&lt;/p&gt;
&lt;h4 id=&#34;算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#算法&#34;&gt;#&lt;/a&gt; 算法&lt;/h4&gt;
&lt;p&gt;基于上面的思路我们考虑如何编程实现。&lt;/p&gt;
&lt;p&gt;首先为了方便表示，我们先给每一个单词标号，即给每个单词分配一个 id。创建一个由单词 word 到 id 对应的映射 wordId，并将 beginWord 与 wordList 中所有的单词都加入这个映射中。之后我们检查 endWord 是否在该映射内，若不存在，则输入无解。我们可以使用哈希表实现上面的映射关系。&lt;/p&gt;
&lt;p&gt;然后我们需要建图，依据朴素的思路，我们可以枚举每一对单词的组合，判断它们是否恰好相差一个字符，以判断这两个单词对应的节点是否能够相连。但是这样效率太低，我们可以优化建图。&lt;/p&gt;
&lt;p&gt;具体地，我们可以创建虚拟节点。对于单词 hit，我们创建三个虚拟节点 &lt;em&gt;it、h&lt;/em&gt;t、hi*，并让 hit 向这三个虚拟节点分别连一条边即可。如果一个单词能够转化为 hit，那么该单词必然会连接到这三个虚拟节点之一。对于每一个单词，我们枚举它连接到的虚拟节点，把该单词对应的 id 与这些虚拟节点对应的 id 相连即可。&lt;/p&gt;
&lt;p&gt;最后我们将起点加入队列开始广度优先搜索，当搜索到终点时，我们就找到了最短路径的长度。注意因为添加了虚拟节点，所以我们得到的距离为实际最短路径长度的两倍。同时我们并未计算起点对答案的贡献，所以我们应当返回距离的一半再加一的结果。&lt;/p&gt;
&lt;h4 id=&#34;代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码&#34;&gt;#&lt;/a&gt; 代码&lt;/h4&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Map&amp;lt;String, Integer&amp;gt; wordId = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;String, Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; edge = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;nodeNum&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;ladderLength&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String beginWord, String endWord, List&amp;lt;String&amp;gt; wordList)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (String word : wordList) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            addEdge(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        addEdge(beginWord);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!wordId.containsKey(endWord)) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] dis = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[nodeNum];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Arrays.fill(dis, Integer.MAX_VALUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;beginId&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; wordId.get(beginWord), endId = wordId.get(endWord);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dis[beginId] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Queue&amp;lt;Integer&amp;gt; que = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedList&lt;/span&gt;&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        que.offer(beginId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!que.isEmpty()) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; que.poll();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (x == endId) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dis[endId] / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; it : edge.get(x)) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (dis[it] == Integer.MAX_VALUE) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    dis[it] = dis[x] + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    que.offer(it);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;addEdge&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String word)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        addWord(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;id1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; wordId.get(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;[] array = word.toCharArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; array.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; length; ++i) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;tmp&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; array[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            array[i] = &lt;span class=&#34;string&#34;&gt;&#39;*&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;newWord&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;(array);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            addWord(newWord);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;id2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; wordId.get(newWord);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            edge.get(id1).add(id2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            edge.get(id2).add(id1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            array[i] = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;addWord&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String word)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!wordId.containsKey(word)) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            wordId.put(word, nodeNum++);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            edge.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h4 id=&#34;复杂度分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复杂度分析&#34;&gt;#&lt;/a&gt; 复杂度分析&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度： &lt;code&gt;O(N×C2)&lt;/code&gt; 。其中  N 为 wordList 的长度， C 为列表中单词的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建图过程中，对于每一个单词，我们需要枚举它连接到的所有虚拟节点，时间复杂度为   &lt;code&gt;O(C)&lt;/code&gt; ，将这些单词加入到哈希表中，时间复杂度为  &lt;code&gt;O(N×C)&lt;/code&gt; ，因此总时间复杂度为  &lt;code&gt;O(N×C)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;广度优先搜索的时间复杂度最坏情况下是 O (N \times C) O (N×C)。每一个单词需要拓展出 O©O© 个虚拟节点，因此节点数 O (N \times C) O (N×C)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空间复杂度： &lt;code&gt;O(N×C2)&lt;/code&gt; 。其中 N 为 wordList 的长度，C 为列表中单词的长度。哈希表中包含  &lt;code&gt;O(N×C)&lt;/code&gt;  个节点，每个节点占用空间  &lt;code&gt;O(C)&lt;/code&gt; ，因此总的空间复杂度为  &lt;code&gt;O(N×C^2)&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/f883163f/index.html</guid>
            <title>买卖股票的最佳时机 II——LeetCode122</title>
            <link>https://www.pswen.cn/p/f883163f/index.html</link>
            <category>leetcode</category>
            <category>算法</category>
            <category>贪心</category>
            <category>动态规划</category>
            <pubDate>Thu, 06 Jan 2022 15:28:13 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&#34;题目描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题目描述&#34;&gt;#&lt;/a&gt; 题目描述&lt;/h1&gt;
&lt;p&gt;给定一个数组 prices ，其中&amp;nbsp;prices [i] 是一支给定股票第 i 天的价格。&lt;/p&gt;
&lt;p&gt;设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。&lt;/p&gt;
&lt;p&gt;注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: prices = [7,1,5,3,6,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出，这笔交易所能获得利润 = 5-1 = 4 。&lt;br&gt;
随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，这笔交易所能获得利润 = 6-3 = 3 。&lt;br&gt;
&amp;nbsp;&lt;br&gt;
示例 2:&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: prices = [1,2,3,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出，这笔交易所能获得利润 = 5-1 = 4 。&lt;br&gt;
注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。&lt;/p&gt;
&lt;p&gt;示例&amp;nbsp;3:&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入: prices = [7,6,4,3,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出: 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;解释：在这种情况下，没有交易完成，所以最大利润为 0。&lt;/p&gt;
&lt;p&gt;提示：&lt;br&gt;
]&lt;br&gt;
1 &amp;lt;= prices.length &amp;lt;= 3 * 10^4&lt;br&gt;
0 &amp;lt;= prices[i] &amp;lt;= 10^4&lt;/p&gt;
&lt;h1 id=&#34;解题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题&#34;&gt;#&lt;/a&gt; 解题&lt;/h1&gt;
&lt;h2 id=&#34;解法一动态规划&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解法一动态规划&#34;&gt;#&lt;/a&gt; 解法一：动态规划&lt;/h2&gt;
&lt;h3 id=&#34;思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#思路&#34;&gt;#&lt;/a&gt; 思路&lt;/h3&gt;
&lt;p&gt;虑到「不能同时参与多笔交易」，因此每天交易结束后只可能存在手里有一支股票或者没有股票的状态。&lt;/p&gt;
&lt;p&gt;定义状态 &lt;code&gt;dp[i][0]&lt;/code&gt;  表示第 i 天交易完后手里没有股票的最大利润， &lt;code&gt;dp[i][1]&lt;/code&gt;  表示第 i 天交易完后手里持有一支股票的最大利润（i 从 0 开始）。(&lt;strong&gt;定义状态&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;考虑 &lt;code&gt;dp[i][0]&lt;/code&gt;  的转移方程，如果这一天交易完后手里没有股票，那么可能的转移状态为前一天已经没有股票，即  &lt;code&gt;dp[i−1][0]&lt;/code&gt; ，或者前一天结束的时候手里持有一支股票，即  &lt;code&gt;dp[i−1][1]&lt;/code&gt; ，这时候我们要将其卖出，并获得  &lt;code&gt;prices[i]&lt;/code&gt;  的收益。因此为了收益最大化，我们列出如下的转移方程：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dp[i][0] = max{ dp[i−1][0] , dp[i−1][1] + prices[i]}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再来考虑 &lt;code&gt;dp[i][1]&lt;/code&gt; ，按照同样的方式考虑转移状态，那么可能的转移状态为前一天已经持有一支股票，即 &lt;code&gt;dp[i−1][1]&lt;/code&gt; ，或者前一天结束时还没有股票，即  &lt;code&gt;dp[i−1][0]&lt;/code&gt; ，这时候我们要将其买入，并减少 &lt;code&gt;prices[i]&lt;/code&gt;  的收益。可以列出如下的转移方程：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dp[i][1] = max{ dp[i−1][1], dp[i−1][0]−prices[i] }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于初始状态，根据状态定义我们可以知道第 00 天交易结束的时候  &lt;code&gt;dp[0][0]=0&lt;/code&gt; ， &lt;code&gt;dp[0][1]=−prices[0]&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;因此，我们只要从前往后依次计算状态即可。由于全部交易结束后，持有股票的收益一定低于不持有股票的收益，因此这时候  &lt;code&gt;dp[n−1][0]&lt;/code&gt;  的收益必然是大于 &lt;code&gt;dp[n−1][1]&lt;/code&gt;  的，最后的答案即为  &lt;code&gt;dp[n−1][0]&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;解题-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题-2&#34;&gt;#&lt;/a&gt; 解题&lt;/h3&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;maxProfit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] prices)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; prices.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 状态定义 x为天数  y为0为当天不持有 1为当天持有&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[][] dp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[n][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 定义起始状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 第一天 不持有，不花钱 收益为0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dp[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 第一天 持有，花钱 收益为当天买股票的钱&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dp[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = - prices[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 从第二天开始递推哈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; d &amp;lt; n; d++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 第二天不持有股票：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 第一天不持有股票的收益 + （没买）0  |  第一天持有股票 + （卖出）第二天价格 ；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dp[d][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = Math.max(dp[d-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], dp[d-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + prices[d]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 第二天持有股票：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 第一天不持有股票的收益 + 买入第二天价格  |  第一天持有股票 + 没买也没卖 ；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dp[d][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = Math.max(dp[d-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] - prices[d], dp[d-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 持有股票的收益必定小于不持有股票&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dp[n-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;注意到上面的状态转移方程中，每一天的状态只与前一天的状态有关，而与更早的状态都无关，因此我们不必存储这些无关的状态，只需要将 &lt;code&gt;dp[i−1][0] &lt;/code&gt; 和 &lt;code&gt;dp[i−1][1]&lt;/code&gt;  存放在两个变量中，通过它们计算出 &lt;code&gt;dp[i][0]&lt;/code&gt;  和 &lt;code&gt;dp[i][1]&lt;/code&gt;  并存回对应的变量，以便于第 &lt;code&gt;i+1&lt;/code&gt;  天的状态转移即可。&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;maxProfit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] prices)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; prices.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;dp0&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, dp1 = -prices[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; n; ++i) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;newDp0&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Math.max(dp0, dp1 + prices[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;newDp1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; Math.max(dp1, dp0 - prices[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dp0 = newDp0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dp1 = newDp1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dp0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;复杂度分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复杂度分析&#34;&gt;#&lt;/a&gt; 复杂度分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;时间复杂度： &lt;code&gt;O(n)&lt;/code&gt; ，其中 n 为数组的长度。一共有 2n 个状态，每次状态转移的时间复杂度为  &lt;code&gt;O(1)&lt;/code&gt; ，因此时间复杂度为 &lt;code&gt;O(2n)=O(n)&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空间复杂度： &lt;code&gt;O(n)&lt;/code&gt; 。我们需要开辟 &lt;code&gt;O(n)&lt;/code&gt;  空间存储动态规划中的所有状态。如果使用空间优化，空间复杂度可以优化至  &lt;code&gt;O(1)&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解法二贪心&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解法二贪心&#34;&gt;#&lt;/a&gt; 解法二：贪心&lt;/h2&gt;
&lt;h3 id=&#34;思路-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#思路-2&#34;&gt;#&lt;/a&gt; 思路&lt;/h3&gt;
&lt;h3 id=&#34;解题-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题-3&#34;&gt;#&lt;/a&gt; 解题&lt;/h3&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;maxProfit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] prices)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; prices.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; n; ++i) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans += Math.max(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, prices[i] - prices[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;复杂度分析-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复杂度分析-2&#34;&gt;#&lt;/a&gt; 复杂度分析&lt;/h3&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/7d31a8bc/index.html</guid>
            <title>路径总和 II——LeetCode113</title>
            <link>https://www.pswen.cn/p/7d31a8bc/index.html</link>
            <category>leetcode</category>
            <category>树</category>
            <category>dfs</category>
            <category>bfs</category>
            <pubDate>Wed, 05 Jan 2022 14:27:28 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&#34;题目描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题目描述&#34;&gt;#&lt;/a&gt; 题目描述&lt;/h1&gt;
&lt;p&gt;给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。&lt;/p&gt;
&lt;p&gt;叶子节点 是指没有子节点的节点。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/7d31a8bc/index/pathsumii1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[[5,4,11,2],[5,8,4,5]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/7d31a8bc/index/pathsum2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：root = [1,2,3], targetSum = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：root = [1,2], targetSum = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;p&gt;树中节点总数在范围 [0, 5000] 内&lt;br&gt;
 - 1000 &amp;lt;= Node.val &amp;lt;= 1000&lt;br&gt;
-1000 &amp;lt;= targetSum &amp;lt;= 1000&lt;/p&gt;
&lt;h1 id=&#34;解题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题&#34;&gt;#&lt;/a&gt; 解题&lt;/h1&gt;
&lt;h2 id=&#34;dfs解法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dfs解法&#34;&gt;#&lt;/a&gt; dfs 解法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;前言&lt;br&gt;
注意到本题的要求是，找到所有满足从「根节点」到某个「叶子节点」经过的路径上的节点之和等于目标和的路径。核心思想是对树进行一次遍历，在遍历时记录从根节点到当前节点的路径和，以防止重复计算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;思路及算法&lt;/p&gt;
&lt;p&gt;我们可以采用深度优先搜索的方式，枚举每一条从根节点到叶子节点的路径。当我们遍历到叶子节点，且此时路径和恰为目标和时，我们就找到了一条满足条件的路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码实现&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; ret = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedList&lt;/span&gt;&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Deque&amp;lt;Integer&amp;gt; path = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedList&lt;/span&gt;&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; &lt;span class=&#34;title function_&#34;&gt;pathSum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode root, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; targetSum)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(root, targetSum);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode root, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; targetSum)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (root == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        path.offerLast(root.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        targetSum -= root.val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (root.left == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; root.right == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; targetSum == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ret.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedList&lt;/span&gt;&amp;lt;Integer&amp;gt;(path));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(root.left, targetSum);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(root.right, targetSum);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        path.pollLast();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;复杂度分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;p&gt;时间复杂度： &lt;code&gt;O(N^2)&lt;/code&gt; ・，其中 N 是树的节点数。在最坏情况下，树的上半部分为链状，下半部分为完全二叉树，并且从根节点到每一个叶子节点的路径都符合题目要求。此时，路径的数目为  &lt;code&gt;O(N)&lt;/code&gt; ，并且每一条路径的节点个数也为 O (N) O (N)，因此要将这些路径全部添加进答案中，时间复杂度为  &lt;code&gt;O(N^2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;空间复杂度： &lt;code&gt;O(N)&lt;/code&gt; ，其中 N 是树的节点数。空间复杂度主要取决于栈空间的开销，栈中的元素个数不会超过树的节点数。&lt;/p&gt;
&lt;h2 id=&#34;bfs解法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bfs解法&#34;&gt;#&lt;/a&gt; bfs 解法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;思路及算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们也可以采用广度优先搜索的方式，遍历这棵树。当我们遍历到叶子节点，且此时路径和恰为目标和时，我们就找到了一条满足条件的路径。&lt;/p&gt;
&lt;p&gt;为了节省空间，我们使用哈希表记录树中的每一个节点的父节点。每次找到一个满足条件的节点，我们就从该节点出发不断向父节点迭代，即可还原出从根节点到当前节点的路径。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码实现&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; ret = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedList&lt;/span&gt;&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Map&amp;lt;TreeNode, TreeNode&amp;gt; map = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;TreeNode, TreeNode&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; &lt;span class=&#34;title function_&#34;&gt;pathSum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode root, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; targetSum)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (root == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Queue&amp;lt;TreeNode&amp;gt; queueNode = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedList&lt;/span&gt;&amp;lt;TreeNode&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Queue&amp;lt;Integer&amp;gt; queueSum = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedList&lt;/span&gt;&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        queueNode.offer(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        queueSum.offer(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!queueNode.isEmpty()) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;TreeNode&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; queueNode.poll();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;rec&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; queueSum.poll() + node.val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (node.left == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; node.right == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (rec == targetSum) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    getPath(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            } &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (node.left != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    map.put(node.left, node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    queueNode.offer(node.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    queueSum.offer(rec);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (node.right != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    map.put(node.right, node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    queueNode.offer(node.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    queueSum.offer(rec);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getPath&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode node)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;Integer&amp;gt; temp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedList&lt;/span&gt;&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (node != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            temp.add(node.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            node = map.get(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Collections.reverse(temp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ret.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkedList&lt;/span&gt;&amp;lt;Integer&amp;gt;(temp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;复杂度分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;时间复杂度： &lt;code&gt;O(N^2)&lt;/code&gt; ，其中 NN 是树的节点数。分析思路与方法一相同。&lt;/p&gt;
&lt;p&gt;空间复杂度： &lt;code&gt;O(N)&lt;/code&gt; ，其中 NN 是树的节点数。空间复杂度主要取决于哈希表和队列空间的开销，哈希表需要存储除根节点外的每个节点的父节点，队列中的元素个数不会超过树的节点数&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/ab179abd/index.html</guid>
            <title>复原IP地址——LeetCode93</title>
            <link>https://www.pswen.cn/p/ab179abd/index.html</link>
            <category>leetcode</category>
            <category>算法</category>
            <category>回溯</category>
            <pubDate>Tue, 04 Jan 2022 13:58:27 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&#34;题目描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题目描述&#34;&gt;#&lt;/a&gt; 题目描述&lt;/h1&gt;
&lt;p&gt;有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 ‘.’ 分隔。&lt;/p&gt;
&lt;p&gt;例如：“0.1.2.201” 和 “192.168.1.1” 是 有效 IP 地址，但是 “0.011.255.245”、“192.168.1.312” 和 “192.168@1.1” 是 无效 IP 地址。&lt;br&gt;
给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的有效 IP 地址，这些地址可以通过在 s 中插入 ‘.’ 来形成。你不能重新排序或删除 s 中的任何数字。你可以按 任何 顺序返回答案。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;用例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用例&#34;&gt;#&lt;/a&gt; 用例&lt;/h2&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &#34;25525511135&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[&#34;255.255.11.135&#34;,&#34;255.255.111.35&#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &#34;0000&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[&#34;0.0.0.0&#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &#34;1111&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[&#34;1.1.1.1&#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 4：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &#34;010010&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[&#34;0.10.0.10&#34;,&#34;0.100.1.0&#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 5：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &#34;101023&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：[&#34;1.0.10.23&#34;,&#34;1.0.102.3&#34;,&#34;10.1.0.23&#34;,&#34;10.10.2.3&#34;,&#34;101.0.2.3&#34;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;p&gt;0 &amp;lt;= s.length &amp;lt;= 20&lt;br&gt;
s 仅由数字组成&lt;/p&gt;
&lt;h1 id=&#34;解题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题&#34;&gt;#&lt;/a&gt; 解题&lt;/h1&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题思路&#34;&gt;#&lt;/a&gt; 解题思路&lt;/h2&gt;
&lt;p&gt;由于我们需要找出所有可能复原出的 IP 地址，因此可以考虑使用&lt;strong&gt;回溯&lt;/strong&gt;的方法，对&lt;strong&gt;所有可能的字符串分隔方式&lt;/strong&gt;进行搜索，并筛选出满足要求的作为答案。&lt;/p&gt;
&lt;p&gt;设题目中给出的字符串为 s。我们用递归函数  &lt;code&gt;dfs(segId,segStart)&lt;/code&gt;  表示我们正在从 &lt;code&gt;s[segStart] &lt;/code&gt; 的位置开始，搜索 IP 地址中的第 segId 段，其中 &lt;code&gt;segId∈{0,1,2,3}&lt;/code&gt; 。由于 IP 地址的每一段必须是  &lt;code&gt;[0, 255] &lt;/code&gt; 中的整数，因此我们从 segStart 开始，从小到大依次枚举当前这一段 IP 地址的结束位置 segEnd。如果满足要求，就递归地进行下一段搜索，调用递归函数 &lt;code&gt;dfs(segId+1,segEnd+1)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;特别地，由于 IP 地址的每一段不能有前导零，因此如果  &lt;code&gt;s[segStart]&lt;/code&gt;  等于字符 0，那么 IP 地址的第 segId 段只能为 0，需要作为特殊情况进行考虑。&lt;/p&gt;
&lt;p&gt;在搜索的过程中，如果我们已经得到了全部的 4 段 IP 地址（即 segId=4），并且遍历完了整个字符串（即  &lt;code&gt;segStart=∣s∣&lt;/code&gt; ，其中  &lt;code&gt;|s|&lt;/code&gt;  表示字符串 s 的长度），那么就复原出了一种满足题目要求的 IP 地址，我们将其加入答案。在其它的时刻，如果提前遍历完了整个字符串，那么我们需要结束搜索，回溯到上一步。&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码实现&#34;&gt;#&lt;/a&gt; 代码实现&lt;/h2&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;SEG_COUNT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;String&amp;gt; ans = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] segments = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[SEG_COUNT];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span class=&#34;title function_&#34;&gt;restoreIpAddresses&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String s)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        segments = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;int&lt;/span&gt;[SEG_COUNT];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dfs(s, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String s, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; segId, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; segStart)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果找到了 4 段 IP 地址并且遍历完了字符串，那么就是一种答案&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (segId == SEG_COUNT) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (segStart == s.length()) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;StringBuffer&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ipAddr&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;StringBuffer&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; SEG_COUNT; ++i) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    ipAddr.append(segments[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i != SEG_COUNT - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        ipAddr.append(&lt;span class=&#34;string&#34;&gt;&#39;.&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans.add(ipAddr.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果还没有找到 4 段 IP 地址就已经遍历完了字符串，那么提前回溯&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (segStart == s.length()) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 由于不能有前导零，如果当前数字为 0，那么这一段 IP 地址只能为 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (s.charAt(segStart) == &lt;span class=&#34;string&#34;&gt;&#39;0&#39;&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            segments[segId] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dfs(s, segId + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, segStart + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 一般情况，枚举每一种可能性并递归&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;segEnd&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; segStart; segEnd &amp;lt; s.length(); ++segEnd) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            addr = addr * &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; + (s.charAt(segEnd) - &lt;span class=&#34;string&#34;&gt;&#39;0&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (addr &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; addr &amp;lt;= &lt;span class=&#34;number&#34;&gt;0xFF&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                segments[segId] = addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dfs(s, segId + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, segEnd + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            } &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;复杂度分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复杂度分析&#34;&gt;#&lt;/a&gt; 复杂度分析&lt;/h2&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;p&gt;我们用 SEG_COUNT=4 表示 IP 地址的段数。&lt;/p&gt;
&lt;p&gt;时间复杂度： &lt;code&gt;O(3^SEG_COUNT × ∣s∣)&lt;/code&gt; 。由于 IP 地址的每一段的位数不会超过 3，因此在递归的每一层，我们最多只会深入到下一层的 33 种情况。由于 SEG_COUNT=4，对应着递归的最大层数。如果我们复原出了一种满足题目要求的 IP 地址，那么需要  &lt;code&gt;O(∣s∣) &lt;/code&gt; 的时间将其加入答案数组中，因此总时间复杂度为 &lt;code&gt;O(3 ^SEG_COUNT ×∣s∣)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;空间复杂度： &lt;code&gt;O(SEG_COUNT)&lt;/code&gt; ，这里只计入除了用来存储答案数组以外的额外空间复杂度。递归使用的空间与递归的最大深度 \text {SEG_COUNT} SEG_COUNT 成正比。并且在上面的代码中，我们只额外使用了长度为  &lt;code&gt;SEG_COUNT&lt;/code&gt;  的数组  &lt;code&gt;segments&lt;/code&gt;  存储已经搜索过的 IP 地址，因此空间复杂度为 &lt;code&gt;O(SEG_COUNT)&lt;/code&gt; 。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/dfd6ab93/index.html</guid>
            <title>最长回文子串——Leetcode5</title>
            <link>https://www.pswen.cn/p/dfd6ab93/index.html</link>
            <category>leetcode</category>
            <category>算法</category>
            <category>动态规划</category>
            <pubDate>Mon, 03 Jan 2022 06:28:19 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&#34;题目描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题目描述&#34;&gt;#&lt;/a&gt; 题目描述&lt;/h1&gt;
&lt;p&gt;给你一个字符串 s，找到 s 中最长的回文子串。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &#34;babad&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&#34;bab&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：&#34;aba&#34; 同样是符合题意的答案。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &#34;cbbd&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&#34;bb&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &#34;a&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&#34;a&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 4：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;PLAINTEXT&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：s = &#34;ac&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&#34;a&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 1000&lt;/code&gt; &lt;br&gt;
s 仅由数字和英文字母（大写和 / 或小写）组成&lt;/p&gt;
&lt;h1 id=&#34;解题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题&#34;&gt;#&lt;/a&gt; 解题&lt;/h1&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题思路&#34;&gt;#&lt;/a&gt; 解题思路&lt;/h2&gt;
&lt;p&gt;对于一个子串而言，如果它是回文串，并且长度大于 22，那么将它首尾的两个字母去除之后，它仍然是个回文串。例如对于字符串 “ababa”，如果我们已经知道 “bab” 是回文串，那么 “ababa” 一定是回文串，这是因为它的首尾两个字母都是 “a”。&lt;/p&gt;
&lt;p&gt;根据这样的思路，我们就可以用动态规划的方法解决本题。我们用  &lt;code&gt;P(i,j) &lt;/code&gt; 表示字符串 s 的第 i 到 j 个字母组成的串（下文表示成  &lt;code&gt;s[i:j]&lt;/code&gt; ）是否为回文串：如果字符串 s 从 i 到 j 是回文串，那么 &lt;code&gt;P(i,j)= true&lt;/code&gt; ，否则为 &lt;code&gt;P(i,j)= true&lt;/code&gt; ；&lt;/p&gt;
&lt;p&gt;这里的「否」包含两种可能性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s[i,j]&lt;/code&gt;  本身不是一个回文串；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;i&amp;gt;j&lt;/code&gt; ，此时  &lt;code&gt;s[i,j]&lt;/code&gt;  本身不合法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么我们就可以写出动态规划的状态转移方程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/dfd6ab93/index/image-20220104210656306.png&#34; alt=&#34;状态转移方程&#34;&gt;&lt;/p&gt;
&lt;p&gt;也就是说，只有  &lt;code&gt;s[i+1:j−1] &lt;/code&gt; 是回文串，并且  &lt;code&gt;s&lt;/code&gt;  的第 &lt;code&gt;i&lt;/code&gt;  和  &lt;code&gt;j&lt;/code&gt;  个字母相同时， &lt;code&gt;s[i:j]&lt;/code&gt;  才会是回文串。&lt;/p&gt;
&lt;p&gt;上文的所有讨论是建立在子串长度大于 2 的前提之上的，我们还需要考虑动态规划中的&lt;strong&gt;边界条件&lt;/strong&gt;，即子串的长度为 1 或 2。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于长度为 1 的子串，它显然是个回文串；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于长度为 2 的子串，只要它的两个字母相同，它就是一个回文串。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我们就可以写出动态规划的边界条件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/dfd6ab93/index/image-20220104210730308.png&#34; alt=&#34;边界条件&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据这个思路，我们就可以完成动态规划了，最终的答案即为所有 &lt;code&gt; P(i, j) = true&lt;/code&gt;  中  &lt;code&gt;j−i+1&lt;/code&gt; （即子串长度）的最大值。注意：在状态转移方程中，我们是从长度较短的字符串向长度较长的字符串进行转移的，因此一定要注意动态规划的循环顺序。&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码实现&#34;&gt;#&lt;/a&gt; 代码实现&lt;/h2&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String s)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; s.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (len &amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;maxLen&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// dp[i][j] 表示 s[i..j] 是否是回文串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt;[][] dp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;boolean&lt;/span&gt;[len][len];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 初始化：所有长度为 1 的子串都是回文串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dp[i][i] = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;[] charArray = s.toCharArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 递推开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 先枚举子串长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;L&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;; L &amp;lt;= len; L++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 枚举左边界，左边界的上限设置可以宽松一些&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; L + i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 如果右边界越界，就可以退出当前循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (j &amp;gt;= len) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (charArray[i] != charArray[j]) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    dp[i][j] = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                } &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (j - i &amp;lt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        dp[i][j] = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    } &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        dp[i][j] = dp[i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (dp[i][j] &amp;amp;&amp;amp; j - i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;gt; maxLen) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    maxLen = j - i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    begin = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; s.substring(begin, begin + maxLen);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h2 id=&#34;复杂度分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复杂度分析&#34;&gt;#&lt;/a&gt; 复杂度分析&lt;/h2&gt;
&lt;p&gt;时间复杂度： &lt;code&gt;O(n^2) &lt;/code&gt; 其中 n 是字符串的长度。动态规划的状态总数为  &lt;code&gt;O(n^2)&lt;/code&gt;  对于每个状态，我们需要转移的时间为  &lt;code&gt;O(1)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;空间复杂度： &lt;code&gt;O(n^2)&lt;/code&gt; ，即存储动态规划状态需要的空间。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/4425fc35/index.html</guid>
            <title>linux生产免费的域名证书</title>
            <link>https://www.pswen.cn/p/4425fc35/index.html</link>
            <category>linux</category>
            <category>acmesh</category>
            <category>域名证书</category>
            <pubDate>Wed, 29 Dec 2021 13:59:07 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;a href=&#34;http://xn--acme-kt0gs67hmo3a2r1a.sh&#34;&gt;简单来说 acme.sh&lt;/a&gt; 实现了 acme 协议，可以从 let‘s encrypt 生成免费的证书。&lt;br&gt;
&lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt; 有以下特点：&lt;br&gt;
一个纯粹用 Shell（Unix shell）语言编写的 ACME 协议客户端。&lt;br&gt;
完整的 ACME 协议实施。 支持 ACME v1 和 ACME v2 支持 ACME v2 通配符证书&lt;br&gt;
简单，功能强大且易于使用。你只需要 3 分钟就可以学习它。&lt;br&gt;
Let’s Encrypt 免费证书客户端最简单的 shell 脚本。&lt;br&gt;
纯粹用 Shell 编写，不依赖于 python 或官方的 Let’s Encrypt 客户端。&lt;br&gt;
只需一个脚本即可自动颁发，续订和安装证书。 不需要 root/sudoer 访问权限。&lt;br&gt;
支持在 Docker 内使用，支持 IPv6&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;strong&gt;安装环境：&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;操作系统：centos 7 X64&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;SSL 证书来源：Let’s Encrypt&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt; 安装用脚本：&lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt; 服务器：nginx&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt; 域名：&lt;a href=&#34;http://epoint.pswen.cn&#34;&gt;epoint.pswen.cn&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://1.xn--acme-ke9g492u.sh&#34;&gt;1. 安装 acme.sh&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SHELL&#34;&gt;&lt;figure class=&#34;iseeu highlight shell&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;curl https://get.acme.sh | sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;2. 安装后的配置&lt;br&gt;
把 &lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt; 安装到你的 home 目录下:~/.acme.sh/ 并创建 一个 bash 的 alias, 方便你的使用:&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SHELL&#34;&gt;&lt;figure class=&#34;iseeu highlight shell&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;alias acme.sh=~/.acme.sh/acme.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &#39;alias acme.sh=~/.acme.sh/acme.sh&#39; &amp;gt;&amp;gt;/etc/profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;3. 申请证书&lt;br&gt;
&lt;a href=&#34;http://acme.sh&#34;&gt; acme.sh&lt;/a&gt; 实现了 acme 协议支持的所有验证协议。一般有两种方式验证: http 和 dns 验证（本文不提供 dns 方式申请，dns 手动模式，不能自动更新证书。在续订证书时，您必须手动向域中添加新的 txt 记录。）&lt;/p&gt;
&lt;p&gt;HTTP 方式方法如下：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SH&#34;&gt;&lt;figure class=&#34;iseeu highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;acme.sh --issue -d epoint.pswen.cn --webroot /nginx网站根目录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;只需要指定域名，并指定域名所在的网站根目录【命令中根目录路径】. &lt;a href=&#34;http://acme.sh&#34;&gt;acme.sh&lt;/a&gt; 会全自动的生成验证文件，并放到网站的根目录，然后自动完成验证。最后会聪明的删除验证文件。整个过程没有任何副作用.&lt;/p&gt;
&lt;p&gt;4. 证书的安装&lt;br&gt;
注意，默认生成的证书都放在安装目录下: ~/.acme.sh/, 请不要直接使用此目录下的文件，&lt;br&gt;
 例如：不要直接让 nginx/apache 的配置文件使用这下面的文件.&lt;br&gt;
 这里面的文件都是内部使用，而且目录结构可能会变化.&lt;/p&gt;
&lt;p&gt;正确的使用方法是使用 --installcert 命令，并指定目标位置，然后证书文件会被 copy 到相应的位置，&lt;/p&gt;
&lt;p&gt;Nginx 服务： &lt;code&gt;service nginx force-reload&lt;/code&gt; 。(centos6)&lt;/p&gt;
&lt;p&gt;Nginx 服务： &lt;code&gt;systemctl restart nginx &lt;/code&gt; 。(centos7)&lt;/p&gt;
&lt;p&gt;nginx 示例 1:&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SHELL&#34;&gt;&lt;figure class=&#34;iseeu highlight shell&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;acme.sh --installcert -d epoint.pswen.cn --key-file /usr/local/nginx/ssl_cert/epoint.pswen.cn.key --fullchain-file /usr/local/nginx/ssl_cert/epoint.pswen.cn.cer --reloadcmd &#34;service nginx force-reload&#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;nginx 示例 2：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SH&#34;&gt;&lt;figure class=&#34;iseeu highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;acme.sh --install-cert -d chandao.test.com \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--key-file /usr/local/nginx/ssl_cert/test.com/chandao.test.com.key \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--fullchain-file /usr/local/nginx/ssl_cert/test.com/chandao.test.com.cer \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--reloadcmd      &lt;span class=&#34;string&#34;&gt;&#34;service nginx force-reload&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;附带完成前面 1-4 步骤的截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/4425fc35/index/867078-20190326175923357-720763416.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Nginx 服务器安装 SSL 证书&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Nginx 配置 Http 和 Https 共存&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SHELL&#34;&gt;&lt;figure class=&#34;iseeu highlight shell&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;listen 80; #如果硬性要求全部走https协议，这一行去除&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;listen 443 ssl http2; #如果硬性要求全部走https协议，这里去除ssl&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;server_name chandao.test.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;ssl on; &lt;span class=&#34;comment&#34;&gt;#如果硬性要求全部走https协议，这里开启ssl on&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ssl_certificate /usr/local/nginx/ssl_cert/test.com/chandao.test.com.cer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ssl_certificate_key /usr/local/nginx/ssl_cert/test.com/chandao.test.com.key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;ssl性能调优&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;nginx 1.13.0支持了TLSv1.3,TLSv1.3相比之前的TLSv1.2、TLSv1.1等性能大幅提升&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ssl_prefer_server_ciphers on;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ssl_session_timeout 10m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;使用ssl_session_cache优化https下Nginx的性能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ssl_session_cache builtin:1000 shared:SSL:10m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;OCSP Stapling 开启。OCSP是用于在线查询证书吊销情况的服务，使用OCSP Stapling能将证书有效状态的信息缓存到服务器，提高 TLS 握手速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ssl_stapling on;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;OCSP Stapling 验证开启&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ssl_stapling_verify on; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;完整例子：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SHELL&#34;&gt;&lt;figure class=&#34;iseeu highlight shell&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;server {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  listen 80;  #如果硬性要求全部走https协议，这一行去除&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  listen       443 ssl http2;    #如果硬性要求全部走https协议，这里去除ssl&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  server_name chandao.test.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  access_log off;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  index index.html index.htm index.php;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  root /data/wwwroot/chandao;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;  #&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;ssl on;   &lt;span class=&#34;comment&#34;&gt;#如果硬性要求全部走https协议，这里开启ssl on&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ssl_certificate   /usr/local/nginx/ssl_cert/test.com/chandao.test.com.cer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ssl_certificate_key  /usr/local/nginx/ssl_cert/test.com/chandao.test.com.key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;  #&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;ssl性能调优&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;  #&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;nginx 1.13.0支持了TLSv1.3,TLSv1.3相比之前的TLSv1.2、TLSv1.1等性能大幅提升&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ssl_prefer_server_ciphers on;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ssl_session_timeout 10m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;  #&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;使用ssl_session_cache优化https下Nginx的性能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ssl_session_cache builtin:1000 shared:SSL:10m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;  #&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;OCSP Stapling 开启。OCSP是用于在线查询证书吊销情况的服务，使用OCSP Stapling能将证书有效状态的信息缓存到服务器，提高 TLS 握手速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ssl_stapling on;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;  #&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;OCSP Stapling 验证开启&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ssl_stapling_verify on; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;  #&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;error_page 404 /404.html;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;  #&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;error_page 502 /502.html;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  location ~ [^/]\.php(/|$) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #fastcgi_pass remote_php_ip:9000;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fastcgi_pass unix:/dev/shm/php-cgi.sock;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fastcgi_index index.php;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    include fastcgi.conf;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    expires 30d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    access_log off;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  location ~ .*\.(js|css)?$ {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    expires 7d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    access_log off;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  location ~ /\.ht {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    deny all;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;6. 重启 nginx&lt;br&gt;
 保存退出后，通过 nginx -t 来检查配置文件是否正确，有错误的话改之即可。配置文件检测正确之后，通过 service nginx force-reload 来重载配置文件。&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SHELL&#34;&gt;&lt;figure class=&#34;iseeu highlight shell&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nginx -t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;systemctl restart nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/7670a0f/index.html</guid>
            <title>Java位运算原理及使用讲解</title>
            <link>https://www.pswen.cn/p/7670a0f/index.html</link>
            <category>Java</category>
            <category>位运算</category>
            <pubDate>Wed, 29 Dec 2021 12:02:53 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;日常开发中位运算不是很常用，但是巧妙的使用位运算可以大量减少运行开销，优化算法。举个例子，翻转操作比较常见，比如初始值为 1，操作一次变为 0，再操作一次变为 1。可能的做法是使用三木运算符，判断原始值为 1 还是 0，如果是 1，设置为 0，否则设置为 0. 但是使用位运算，不用判断原始值，直接改变值就可以： &lt;code&gt;1^num &lt;/code&gt; ,num 为原始值。当然，一条语句可能对代码没什么影响，但是在高重复，大数据量的情况下将会节省很多开销。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;1-位运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-位运算符&#34;&gt;#&lt;/a&gt; 1. 位运算符&lt;/h1&gt;
&lt;h2 id=&#34;11-java支持的位运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-java支持的位运算符&#34;&gt;#&lt;/a&gt; 1.1 java 支持的位运算符：&lt;/h2&gt;
&lt;p&gt;&amp;amp;：按位与。&lt;/p&gt;
&lt;p&gt;|：按位或。&lt;/p&gt;
&lt;p&gt;~：按位非。&lt;/p&gt;
&lt;p&gt;^：按位异或。&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;：左位移运算符。&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;：右位移运算符。&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt;&amp;lt;：无符号右移运算符。&lt;/p&gt;
&lt;p&gt;位运 算 符 中，除 ～ 以 外，其余 均 为 二 元 运 算 符 。 操 作 数 只 能 为 整 型 和字 符 型 数 据 。&lt;/p&gt;
&lt;p&gt;Java 使用 补 码 来 表 示 二 进 制 数，在补 码 表 示 中，最高 位 为 符号 位，正数 的 符 号 位 为 0, 负数 为 1。补 码 的 规 定 如 下 :&lt;/p&gt;
&lt;p&gt;对 正 数 来 说，最高位为 0, 其余 各 位 代 表 数 值 本 身 (以二 进制 表 示), 如 +42 的补码 为 00101010。&lt;/p&gt;
&lt;p&gt;对 负 数 而 言，把该 数 绝 对 值 的 补 码 按 位 取 反，然后 对 整 个数 加 1, 即得 该 数的 补 码 。 如 -1 的补 码 为 11111111111111111111111111111111 (00000000000000000000000000000001 按 位 取 反 11111111111111111111111111111110+1=11111111111111111111111111111111)。为何有那么多 0、1，java 中 int 是 32 位的。&lt;/p&gt;
&lt;h2 id=&#34;12-按位与&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-按位与&#34;&gt;#&lt;/a&gt; 1.2  按位与（&amp;amp;）&lt;/h2&gt;
&lt;p&gt;按位与的运算规则&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作数 1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;操作数 2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位与&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;规则总结：只有两个操作数对应位同为 1 时，结果为 1，其余全为 0. （或者是只要有一个操作数为 0，结果就为 0）。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/7670a0f/index/Center.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/7670a0f/index/Center-20211229200705116.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/7670a0f/index/Center-20211229200704972.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;13-按位或&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-按位或&#34;&gt;#&lt;/a&gt; 1.3 按位或（|）&lt;/h2&gt;
&lt;p&gt;按位或的运算规则&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作数 1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;操作数 2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位或&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;规则总结：只有两个操作数对应位同为 0 时，结果为 0，其余全为 1.（或者是只要有一个操作数为 1，结果就为 1）。&lt;/p&gt;
&lt;h2 id=&#34;14按位非~&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#14按位非~&#34;&gt;#&lt;/a&gt; 1.4 按位非（~）&lt;/h2&gt;
&lt;p&gt;按位非的运算规则&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作数&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;按位或&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在求负数的源码中使用过。&lt;/p&gt;
&lt;h2 id=&#34;15-按位异或&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#15-按位异或&#34;&gt;#&lt;/a&gt; 1.5 按位异或（^）&lt;/h2&gt;
&lt;p&gt;按位异或的运算规则&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作数 1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;操作数 2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位异或&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;规则总结：异：1.&lt;/p&gt;
&lt;h2 id=&#34;16-左位移&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#16-左位移&#34;&gt;#&lt;/a&gt; 1.6 左位移（&amp;lt;&amp;lt;）&lt;/h2&gt;
&lt;p&gt;算术右移（&amp;gt;&amp;gt;）: 符号位不变，低位补 0。如：2&amp;lt;&amp;lt;2 结果为 8。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/7670a0f/index/Center-20211229200705119.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;当移动的位数超过数字本身的位数时，那么不就都需要补 0 操作，实际上不是的，java 不可能做那么浪费资源的事情。在真正执行位移前，其对要移动的位数做了一些预处理，比如 32 处理为 0，-1 处理为 31.&lt;/p&gt;
&lt;h2 id=&#34;17-右位移&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#17-右位移&#34;&gt;#&lt;/a&gt; 1.7 右位移（&amp;gt;&amp;gt;）&lt;/h2&gt;
&lt;p&gt;低位溢出，符号位不变，并用符号位补溢出的高位。如：-6&amp;gt;&amp;gt;2 结果为 - 2。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/7670a0f/index/Center-20211229200705083.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;18-无符号右移&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#18-无符号右移&#34;&gt;#&lt;/a&gt; 1.8 无符号右移（&amp;gt;&amp;gt;&amp;gt;）&lt;/h2&gt;
&lt;p&gt;低位溢出，高位补 0。注意，无符号右移（&amp;gt;&amp;gt;&amp;gt;）中的符号位（最高位）也跟着变，无符号的意思是将符号位当作数字位看待。如：-1&amp;gt;&amp;gt;&amp;gt;1 结果为 2147483647。这个数字应该比较熟悉，看两个输出语句就知道是什么了：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System.out.println(Integer.toBinaryString(-1&amp;gt;&amp;gt;&amp;gt;1));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System.out.println(Integer.toBinaryString(Integer.MAX_VALUE));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;p&gt;1111111111111111111111111111111&lt;/p&gt;
&lt;p&gt;1111111111111111111111111111111&lt;/p&gt;
&lt;p&gt;-1&amp;gt;&amp;gt;&amp;gt;1 竟然得到了 int 所能表示的最大整数，精彩。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/7670a0f/index/Center-20211229200704949.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;除了使用 - 1&amp;gt;&amp;gt;&amp;gt;1 能得到 Integer.MAX_VALUE，以下的也能得到同样的结果：&lt;/p&gt;
&lt;p&gt;​    //maxInt&lt;/p&gt;
&lt;p&gt;​    System.&lt;em&gt;out&lt;/em&gt;.println(~(1 &amp;lt;&amp;lt; 31));&lt;/p&gt;
&lt;p&gt;​    System.&lt;em&gt;out&lt;/em&gt;.println((1 &amp;lt;&amp;lt; -1)-1);&lt;/p&gt;
&lt;p&gt;​    System.&lt;em&gt;out&lt;/em&gt;.println(~(1 &amp;lt;&amp;lt; -1));&lt;/p&gt;
&lt;p&gt;使用位运算往往能很巧妙的实现某些算法完成一些复杂的功能。&lt;/p&gt;
&lt;h1 id=&#34;常见使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见使用&#34;&gt;#&lt;/a&gt; 常见使用&lt;/h1&gt;
&lt;h2 id=&#34;1-m2n&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-m2n&#34;&gt;#&lt;/a&gt; 1.   m*2^n&lt;/h2&gt;
&lt;p&gt;可以使用 m&amp;lt;&amp;lt;n 求得结果，如：&lt;/p&gt;
&lt;p&gt;​    System.&lt;em&gt;out&lt;/em&gt;.println(“2^3=” + (1&amp;lt;&amp;lt;3));//2^3=8&lt;/p&gt;
&lt;p&gt;​    System.&lt;em&gt;out&lt;/em&gt;.println(&#34;3&lt;em&gt;2^3=&#34; + (3&amp;lt;&amp;lt;3));//3&lt;/em&gt;2^3=24&lt;/p&gt;
&lt;p&gt;计算结果是不是很正确呢？如果非要说 2&amp;lt;&amp;lt;-1 为什么不等于 0.5，前面说过，位运算的操作数只能是整型和字符型。在求 int 所能表示的最小值时，可以使用&lt;/p&gt;
&lt;p&gt;//minInt&lt;/p&gt;
&lt;p&gt;System.&lt;em&gt;out&lt;/em&gt;.println(1 &amp;lt;&amp;lt; 31);&lt;/p&gt;
&lt;p&gt;System.&lt;em&gt;out&lt;/em&gt;.println(1 &amp;lt;&amp;lt; -1);&lt;/p&gt;
&lt;p&gt;可以发现左移 31 位和 - 1 位所得的结果是一样的，同理，左移 30 位和左移 - 2 所得的结果也是一样的。移动一个负数位，是不是等同于右移该负数的绝对值位呢？输出一下就能发现不是的。java 中 int 所能表示的最大数值是 31 位，加上符号位共 32 位。在这里可以有这样的位移法则：&lt;/p&gt;
&lt;p&gt;法则一：任何数左移（右移）32 的倍数位等于该数本身。&lt;/p&gt;
&lt;p&gt;法则二：在位移运算 m&amp;lt;&amp;lt;n 的计算中，若 n 为正数，则实际移动的位数为 n%32，若 n 为负数，则实际移动的位数为 (32+n%32)，右移，同理。&lt;/p&gt;
&lt;p&gt;左移是乘以 2 的幂，对应着右移则是除以 2 的幂。&lt;/p&gt;
&lt;h2 id=&#34;2-判断一个数n的奇偶性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-判断一个数n的奇偶性&#34;&gt;#&lt;/a&gt; 2.   判断一个数 n 的奇偶性&lt;/h2&gt;
&lt;p&gt;n&amp;amp;1 == 1?” 奇数”:” 偶数”&lt;/p&gt;
&lt;p&gt;为什么与 1 能判断奇偶？所谓的二进制就是满 2 进 1，那么好了，偶数的最低位肯定是 0（恰好满 2，对不对？），同理，奇数的最低位肯定是 1.int 类型的 1，前 31 位都是 0，无论是 1&amp;amp;0 还是 0&amp;amp;0 结果都是 0，那么有区别的就是 1 的最低位上的 1 了，若 n 的二进制最低位是 1（奇数）与上 1，结果为 1，反则结果为 0.&lt;/p&gt;
&lt;h2 id=&#34;3-不用临时变量交换两个数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-不用临时变量交换两个数&#34;&gt;#&lt;/a&gt; 3.   不用临时变量交换两个数&lt;/h2&gt;
&lt;p&gt;在 int [] 数组首尾互换中，是不看到过这样的代码：&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;public static int[] reverse(int[] nums){&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int i = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int j = nums.length-1;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while(j&amp;gt;i){&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums[i]= nums[i]^nums[j];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums[j] = nums[j]^nums[i];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums[i] = nums[i]^nums[j];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;j--;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i++;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return nums;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;连续三次使用异或，并没有临时变量就完成了两个数字交换，怎么实现的呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/7670a0f/index/Center-20211229200705072.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面的计算主要遵循了一个计算公式：b&lt;sup&gt;(a&lt;/sup&gt;b)=a。&lt;/p&gt;
&lt;p&gt;我们可以对以上公式做如下的推导：&lt;/p&gt;
&lt;p&gt;任何数异或本身结果为 0. 且有定理 a&lt;sup&gt;b=b&lt;/sup&gt;a。异或是一个无顺序的运算符，则 b&lt;sup&gt;a&lt;/sup&gt;b=b&lt;sup&gt;b&lt;/sup&gt;a，结果为 0^a。&lt;/p&gt;
&lt;p&gt;再次列出异或的计算表:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作数 1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;操作数 2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位异或&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以发现，异或 0 具有保持的特点，而异或 1 具有翻转的特点。使用这些特点可以进行取数的操作。&lt;/p&gt;
&lt;p&gt;​     那么 0^a，使用异或 0 具有保持的特点，最终结果就是 a。&lt;/p&gt;
&lt;p&gt;其实 java 中的异或运算法则完全遵守数学中的计算法则：&lt;/p&gt;
&lt;p&gt;①  a ^ a =0&lt;/p&gt;
&lt;p&gt;②  a ^ b =b ^ a&lt;/p&gt;
&lt;p&gt;③  a ^b ^ c = a ^ (b ^ c) = (a ^ b) ^ c;&lt;/p&gt;
&lt;p&gt;④  d = a ^b ^ c 可以推出 a = d ^ b ^ c.&lt;/p&gt;
&lt;p&gt;⑤  a ^ b ^a = b.&lt;/p&gt;
&lt;h2 id=&#34;4-取绝对值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-取绝对值&#34;&gt;#&lt;/a&gt; 4.   取绝对值&lt;/h2&gt;
&lt;p&gt;(a^(a&amp;gt;&amp;gt;31))-(a&amp;gt;&amp;gt;31)&lt;/p&gt;
&lt;p&gt;先整理一下使用位运算取绝对值的思路：若 a 为正数，则不变，需要用异或 0 保持的特点；若 a 为负数，则其补码为源码翻转每一位后 + 1，先求其源码，补码 - 1 后再翻转每一位，此时需要使用异或 1 具有翻转的特点。&lt;/p&gt;
&lt;p&gt;任何正数右移 31 后只剩符号位 0，最终结果为 0，任何负数右移 31 后也只剩符号位 1，溢出的 31 位截断，空出的 31 位补符号位 1，最终结果为 - 1. 右移 31 操作可以取得任何整数的符号位。&lt;/p&gt;
&lt;p&gt;那么综合上面的步骤，可得到公式。a&amp;gt;&amp;gt;31 取得 a 的符号，若 a 为正数，a&amp;gt;&amp;gt;31 等于 0，a^0=a，不变；若 a 为负数，a&amp;gt;&amp;gt;31 等于 - 1 ，a^-1 翻转每一位.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/b10a7a0e/index.html</guid>
            <title>夜中云谷</title>
            <link>https://www.pswen.cn/p/b10a7a0e/index.html</link>
            <category>夜景</category>
            <category>图记</category>
            <category>天安云谷</category>
            <pubDate>Sat, 18 Dec 2021 13:06:30 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;img src=&#34;/p/b10a7a0e/index/IMG_0119.jpg&#34; alt=&#34;IMG_0119&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/1009bbf4/index.html</guid>
            <title>gulp-imagemin在压缩图片</title>
            <link>https://www.pswen.cn/p/1009bbf4/index.html</link>
            <category>gulp</category>
            <category>压缩图片</category>
            <category>gulp-imagemin</category>
            <pubDate>Tue, 16 Nov 2021 14:35:58 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;经过各种研（bai）究（du），找到了一种方案：采用 &lt;code&gt;gulp + gulp-imagemin&lt;/code&gt; ，对图片进行压缩，结合 hexo 进行对应图片压缩。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h3&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SH&#34;&gt;&lt;figure class=&#34;iseeu highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install gulp --save-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install gulp-imagemin --save-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install imagemin-pngquant --save-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 当然也可以--save  记得要给gulp全局安装下，npm命令不行，就是用cnpm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install gulp -g &lt;span class=&#34;comment&#34;&gt;# 只有gulp要全局安装下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;gulpfile&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gulpfile&#34;&gt;#&lt;/a&gt; gulpfile&lt;/h3&gt;
&lt;p&gt;在 package.json 同名目录下，增加 gulpfile.js 对应的入口 js 文件&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVASCRIPT&#34;&gt;&lt;figure class=&#34;iseeu highlight javascript&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; gulp &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&#39;gulp&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; imagemin &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&#39;gulp-imagemin&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pngquant &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&#39;imagemin-pngquant&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义一个任务 第一个参数为名称，后面时要执行的动作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;minify-images&#39;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;done&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    gulp.&lt;span class=&#34;title function_&#34;&gt;src&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;public/p/**/*.{JPG,jpg,PNG,png,GIF,gif,SVG,svg,JPEG,jpeg}&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;imagemin&lt;/span&gt;({&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;attr&#34;&gt;optimizationLevel&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;attr&#34;&gt;progressive&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;attr&#34;&gt;usa&lt;/span&gt;:[&lt;span class=&#34;title function_&#34;&gt;pngquant&lt;/span&gt;()]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		}))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(gulp.&lt;span class=&#34;title function_&#34;&gt;dest&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;public/p/&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;done&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;});&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义default ，后面将多个任务序列化并行执行，我们只有一个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;default&#39;&lt;/span&gt;, gulp.&lt;span class=&#34;title function_&#34;&gt;series&lt;/span&gt;(gulp.&lt;span class=&#34;title function_&#34;&gt;parallel&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#39;minify-images&#39;&lt;/span&gt;)), &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;info&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&#34;----------gulp Finished----------&#34;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;});&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;执行命令 &lt;code&gt;gulp&lt;/code&gt;  默认情况下，代表 &lt;code&gt;gulp default&lt;/code&gt;  就执行你上面的 default 任务&lt;/p&gt;
&lt;p&gt;当然你也可以制定任务名称： &lt;code&gt;gulp minify-images&lt;/code&gt;  执行指定 task&lt;/p&gt;
&lt;p&gt;然后再 hexo 状态下：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SH&#34;&gt;&lt;figure class=&#34;iseeu highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;hexo clean &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hexo g&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 输出如下：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[22:46:42] Using gulpfile ~/Desktop/blogfile/gulpfile.js&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[22:46:42] Starting &lt;span class=&#34;string&#34;&gt;&#39;default&#39;&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[22:46:42] Starting &lt;span class=&#34;string&#34;&gt;&#39;minify-images&#39;&lt;/span&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[22:46:42] Finished &lt;span class=&#34;string&#34;&gt;&#39;minify-images&#39;&lt;/span&gt; after 74 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[22:46:42] Finished &lt;span class=&#34;string&#34;&gt;&#39;default&#39;&lt;/span&gt; after 99 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;那说明成功了&lt;/p&gt;
&lt;h3 id=&#34;遇到的坑&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#遇到的坑&#34;&gt;#&lt;/a&gt; 遇到的坑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;引入语法问题，插件需要使用 es6 语法，故此你的 package.json 需要增加一个参数 &lt;code&gt;  &#34;type&#34;: &#34;module&#34;&lt;/code&gt;  如此你可以再 gulpfile.js 中使用 es6 的 import 语法&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/dbbc4a4a/index.html</guid>
            <title>图记——今日午餐</title>
            <link>https://www.pswen.cn/p/dbbc4a4a/index.html</link>
            <category>图记</category>
            <category>生活</category>
            <category>午餐</category>
            <pubDate>Sun, 14 Nov 2021 04:29:41 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;img src=&#34;/p/dbbc4a4a/index/IMG_0073.JPG&#34; alt=&#34;今日午餐&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/8239/index.html</guid>
            <title>虚拟机类加载机制-类加载时机</title>
            <link>https://www.pswen.cn/p/8239/index.html</link>
            <category>jvm</category>
            <category>类加载</category>
            <pubDate>Fri, 12 Nov 2021 14:55:27 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;在 Java 语言里面，类型的加载、连接和初始化过程都是在程序运行期间完成的，这种策略虽然会令类加载时稍微增加一些性能开销，但是会为 Java 应用程序提供高度的灵活性，Java 里天生可以动态扩展的语言特性就是依赖于运行期动态加载和动态连接这个特点实现的。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;例如，如果编写一个面向接口的应用程序，可以等到运行时再指定其实际的实现类；用户可以通过 Java 预定义的和自定义类加载器，让一个本地的应用程序可以在运行时从网络或其他地方加载一个二进制流作为程序代码的一部分，这种组装应用程序的方式目前已广泛应用于 Java 程序之中。从最基础的 Applet、JSP 到相对复杂的 OSGI 技术，都使用了 Java 语言运行期类加载的特性。&lt;/p&gt;
&lt;h2 id=&#34;类加载机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类加载机制&#34;&gt;#&lt;/a&gt; 类加载机制&lt;/h2&gt;
&lt;p&gt;生命周期：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialzation）、使用（Using）和卸载（Unloading）7 个阶段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/8239/index/20160719124551909.jpeg&#34; alt=&#34;生命周期&#34;&gt;&lt;/p&gt;
&lt;p&gt;什么情况下需要开始进行类加载过程的第一阶段呢？没有明确约束，虚拟机自由把握；&lt;/p&gt;
&lt;p&gt;而初始化阶段有严格规范，以下五种情况必须理解对类进行初始化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遇到 new（new 关键词实例化），getstatic（读取类的 static 字段），putstatic（设置类的 static 字段，被 final 修饰、已在编译期就把结果放入了常量池的字段除外），invokestatic（调用一个类的静态方法）&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;java.lang.reflect&lt;/code&gt;  包的方法对类进行反射调用&lt;/li&gt;
&lt;li&gt;初始化一个类，会先初始化它的父类&lt;/li&gt;
&lt;li&gt;虚拟机启动时，会先初始化执行的主类（main 方法）&lt;/li&gt;
&lt;li&gt;JDK1.7 的 &lt;code&gt;java.lang.invoke.MethodHandle&lt;/code&gt;  的方法去获取句柄&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;有且仅有&lt;/strong&gt;&lt;/em&gt;这五种情况，除此之外都是被动引用，不会触发初始化，举 3 个例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于静态字段，只有定义这个字段的类才会被初始化，例如父类定义的静态字段，通过子类去使用父类的静态字段，那么只有父类会初始化，子类不会&lt;/li&gt;
&lt;li&gt;数组类型定义使用时，类似 &lt;code&gt;SubClass[]&lt;/code&gt;  不会进行初始化&lt;/li&gt;
&lt;li&gt;被 finla 修饰的静态字段，会进行常量传播优化，实际上这个字段已经和这个类没啥关系了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;初始化第三种情况下，对于接口有个特例情况：一个类初始化时要求父类全部初始化，而接口，不要求其父接口全部都完成初始化，只有在使用到才会初始化。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/1426/index.html</guid>
            <title>环形链表——LeetCode141</title>
            <link>https://www.pswen.cn/p/1426/index.html</link>
            <category>算法</category>
            <category>快慢指针</category>
            <category>环形链表</category>
            <pubDate>Fri, 12 Nov 2021 13:17:10 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;给定一个链表，判断链表中是否有环。&lt;/p&gt;
&lt;p&gt;如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。&lt;br&gt;
如果链表中存在环，则返回 true 。 否则，返回 false 。&lt;br&gt;
LeetCode-141 链接：&lt;a href=&#34;https://leetcode-cn.com/problems/linked-list-cycle&#34;&gt;https://leetcode-cn.com/problems/linked-list-cycle&lt;/a&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt; 
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/1426/index/circularlinkedlist.png&#34; alt=&#34;环形链表-示例1&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;BASH&#34;&gt;&lt;figure class=&#34;iseeu highlight bash&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：&lt;span class=&#34;built_in&#34;&gt;head&lt;/span&gt; = [3,2,0,-4], pos = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：链表中有一个环，其尾部连接到第二个节点。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/1426/index/circularlinkedlist_test2.png&#34; alt=&#34;环形链表-示例2&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;BASH&#34;&gt;&lt;figure class=&#34;iseeu highlight bash&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：&lt;span class=&#34;built_in&#34;&gt;head&lt;/span&gt; = [1,2], pos = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：链表中有一个环，其尾部连接到第一个节点。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/1426/index/circularlinkedlist_test3.png&#34; alt=&#34;环形链表-示例3&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;BASH&#34;&gt;&lt;figure class=&#34;iseeu highlight bash&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：&lt;span class=&#34;built_in&#34;&gt;head&lt;/span&gt; = [1], pos = -1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释：链表中没有环。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;REASONML&#34;&gt;&lt;figure class=&#34;iseeu highlight reasonml&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;链表中节点的数目范围是 &lt;span class=&#34;literal&#34;&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;104&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&lt;span class=&#34;number&#34;&gt;105&lt;/span&gt; &amp;lt;= &lt;span class=&#34;module-access&#34;&gt;&lt;span class=&#34;module&#34;&gt;&lt;span class=&#34;identifier&#34;&gt;Node&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; &amp;lt;= &lt;span class=&#34;number&#34;&gt;105&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pos 为 -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; 或者链表中的一个 有效索引 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;h3 id=&#34;解题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题&#34;&gt;#&lt;/a&gt; 解题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Hash 表&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最容易想到的方法是遍历所有节点，每次遍历到一个节点时，判断该节点此前是否被访问过。&lt;/p&gt;
&lt;p&gt;具体地，我们可以使用哈希表来存储所有已经访问过的节点。每次我们到达一个节点，如果该节点已经存在于哈希表中，则说明该链表是环形链表，否则就将该节点加入哈希表中。重复这一过程，直到我们遍历完整个链表即可。&lt;/p&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;hasCycle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ListNode head)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Set&amp;lt;ListNode&amp;gt; seen = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HashSet&lt;/span&gt;&amp;lt;ListNode&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (head != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!seen.add(head)) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            head = head.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;p&gt;时间复杂度： &lt;code&gt;O(N)&lt;/code&gt; ，其中  &lt;code&gt;N &lt;/code&gt; 是链表中的节点数。最坏情况下我们需要遍历每个节点一次。&lt;br&gt;
空间复杂度： &lt;code&gt;O(N)&lt;/code&gt; ，其中 &lt;code&gt;N &lt;/code&gt; 是链表中的节点数。主要为哈希表的开销，最坏情况下我们需要将每个节点插入到哈希表中一次。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;快慢指针&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法需要读者对「Floyd 判圈算法」（又称龟兔赛跑算法）有所了解。&lt;/p&gt;
&lt;p&gt;假想「乌龟」和「兔子」在链表上移动，「兔子」跑得快，「乌龟」跑得慢。当「乌龟」和「兔子」从链表上的同一个节点开始移动时，如果该链表中没有环，那么「兔子」将一直处于「乌龟」的前方；如果该链表中有环，那么「兔子」会先于「乌龟」进入环，并且一直在环内移动。等到「乌龟」进入环时，由于「兔子」的速度快，它一定会在某个时刻与乌龟相遇，即套了「乌龟」若干圈。&lt;/p&gt;
&lt;p&gt;我们可以根据上述思路来解决本题。具体地，我们定义两个指针，一快一满。慢指针每次只移动一步，而快指针每次移动两步。初始时，慢指针在位置 head，而快指针在位置 head.next。这样一来，如果在移动的过程中，快指针反过来追上慢指针，就说明该链表为环形链表。否则快指针将到达链表尾部，该链表不为环形链表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/1426/index/2.png&#34; alt=&#34;龟兔赛跑&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么我们要规定初始时慢指针在位置 head，快指针在位置 head.next，而不是两个指针都在位置 head（即与「乌龟」和「兔子」中的叙述相同）？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;观察下面的代码，我们使用的是 while 循环，循环条件先于循环体。由于循环条件一定是判断快慢指针是否重合，如果我们将两个指针初始都置于 head，那么 while 循环就不会执行。因此，我们可以假想一个在 head 之前的虚拟节点，慢指针从虚拟节点移动一步到达 head，快指针从虚拟节点移动两步到达 head.next，这样我们就可以使用 while 循环了。&lt;/li&gt;
&lt;li&gt;当然，我们也可以使用 do-while 循环。此时，我们就可以把快慢指针的初始值都置为 head。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;hasCycle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ListNode head)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (head == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; || head.next == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;slow&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;ListNode&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;fast&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; head.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (slow != fast) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (fast == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; || fast.next == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            slow = slow.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fast = fast.next.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;p&gt;时间复杂度： &lt;code&gt;O(N)&lt;/code&gt; ，其中  &lt;code&gt;N&lt;/code&gt;  是链表中的节点数。&lt;br&gt;
当链表中不存在环时，快指针将先于慢指针到达链表尾部，链表中每个节点至多被访问两次。&lt;br&gt;
当链表中存在环时，每一轮移动后，快慢指针的距离将减小一。而初始距离为环的长度，因此至多移动&lt;br&gt;
 &lt;code&gt;N&lt;/code&gt;  轮。&lt;br&gt;
空间复杂度： &lt;code&gt;O(1)&lt;/code&gt; 。我们只使用了两个指针的额外空间。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/44752/index.html</guid>
            <title>寻找重复数——LeetCode287</title>
            <link>https://www.pswen.cn/p/44752/index.html</link>
            <category>leetcode</category>
            <category>算法</category>
            <category>二分法</category>
            <category>快慢指针</category>
            <pubDate>Thu, 11 Nov 2021 13:02:11 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;给定一个包含 n + 1 个整数的数组 nums ，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。&lt;br&gt;
假设 nums 只有 一个重复的整数 ，找出 这个重复的数 。&lt;br&gt;
你设计的解决方案必须不修改数组 nums 且只用常量级 O (1) 的额外空间。&lt;br&gt;
Leetcode-287 链接：&lt;a href=&#34;https://leetcode-cn.com/problems/find-the-duplicate-number&#34;&gt;https://leetcode-cn.com/problems/find-the-duplicate-number&lt;/a&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SH&#34;&gt;&lt;figure class=&#34;iseeu highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [1,3,4,2,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SH&#34;&gt;&lt;figure class=&#34;iseeu highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [3,1,3,4,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 3：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SH&#34;&gt;&lt;figure class=&#34;iseeu highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入：nums = [1,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出：1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;示例 4：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;FIX&#34;&gt;&lt;figure class=&#34;iseeu highlight fix&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;输入：nums &lt;/span&gt;=&lt;span class=&#34;string&#34;&gt; [1,1,2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;输出：1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;SH&#34;&gt;&lt;figure class=&#34;iseeu highlight sh&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1 &amp;lt;= n &amp;lt;= 105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.length == n + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 &amp;lt;= nums[i] &amp;lt;= n&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;nums 中 只有一个整数 出现 两次或多次 ，其余整数均只出现 一次&lt;/p&gt;
&lt;h3 id=&#34;解题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题&#34;&gt;#&lt;/a&gt; 解题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;二分法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;针对用例 &lt;code&gt;[1,3,4,2,2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;定义一个 &lt;code&gt;cnt&lt;/code&gt;  数组用来存储小于等于 索引  &lt;code&gt;i&lt;/code&gt;  的总数&lt;/p&gt;
&lt;p&gt;如果知道 cnt 数组随数字 index 逐渐增大具有单调性，那么当 num [index] 那么我们就可以直接利用二分查找来找到重复的数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;nums&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;1&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;3&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;cnt&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;小于等于 1 的一个&lt;/p&gt;
&lt;p&gt;小于等于 2 的三个&lt;/p&gt;
&lt;p&gt;小于等于 3 的四个&lt;/p&gt;
&lt;p&gt;小于等于 4 的五个&lt;/p&gt;
&lt;p&gt;由此可见：我们的目标是 2，target 满足: target 前面的  &lt;code&gt;cnt[i] &amp;lt;=  i&lt;/code&gt; , 目标值 target 之后的  &lt;code&gt;cnt[i] &amp;gt; i&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实际上可以归纳为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果测试用例的数组中  &lt;code&gt;target&lt;/code&gt;  出现了两次，其余的数各出现了一次，这个时候肯定满足上文提及的性质，因为小于  &lt;code&gt;target&lt;/code&gt;  的数 i 满足  &lt;code&gt;cnt[i]=i&lt;/code&gt; ，大于等于  &lt;code&gt;target&lt;/code&gt;  的数  &lt;code&gt;j&lt;/code&gt;  满足  &lt;code&gt;cnt[j]=j+1&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果测试用例的数组中 &lt;code&gt;target &lt;/code&gt; 出现了三次及以上，那么必然有一些数不在  &lt;code&gt;nums&lt;/code&gt;  数组中了，这个时候相当于我们用 &lt;code&gt;target&lt;/code&gt;  去替换了这些数，我们考虑替换的时候对 &lt;code&gt;cnt[] &lt;/code&gt; 数组的影响。如果替换的数 &lt;code&gt;i&lt;/code&gt;  小于  &lt;code&gt;target&lt;/code&gt;  ，那么在数 &lt;code&gt;i&lt;/code&gt;  到 &lt;code&gt;target&lt;/code&gt;  区间的值，均减一，其他不变，满足条件。如果替换的数  &lt;code&gt;j&lt;/code&gt;  大于等于  &lt;code&gt;target&lt;/code&gt; ，那么 &lt;code&gt;target&lt;/code&gt;  到 数 &lt;code&gt;j&lt;/code&gt;  区间内值均加一，其他不变，亦满足条件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此不管多个重复还是两个重复，数组都满足那个性质。&lt;/p&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;findDuplicate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] nums)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; nums.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, r = n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, ans = -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (l &amp;lt;= r) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           # 右移动一位，相关于除以&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;，取中间值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (l + r) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;cnt&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              # 将小于等于中间值都加起来  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (nums[i] &amp;lt;= mid) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    cnt++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           # 如果此时的cnt总数小于等于mid，那说明不在mid左边&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cnt &amp;lt;= mid) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               # 把左边拉到中间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                l = mid + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            } &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                # 否则把右边拉到中间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                r = mid - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                # 记录答案&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans = mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;p&gt;时间复杂度： &lt;code&gt;O(n * logn)&lt;/code&gt; ，其中 n 为 nums 数组的长度。二分查找最多需要二分 &lt;code&gt;O(logn) &lt;/code&gt; 次，每次判断的时候需要 &lt;code&gt;O(n)&lt;/code&gt;  遍历 nums 数组求解小于等于 mid 的数的个数，因此总时间复杂度为 &lt;code&gt;O(n * logn)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;空间复杂度： &lt;code&gt;O(1)&lt;/code&gt; 。我们只需要常数空间存放若干变量。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;快慢指针&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们对 nums 数组建图，每个位置  &lt;code&gt;i&lt;/code&gt;  连一条  &lt;code&gt;i→nums[i]&lt;/code&gt;  的边。由于存在的重复的数字&lt;br&gt;
 &lt;code&gt;target&lt;/code&gt;  因此  &lt;code&gt;target &lt;/code&gt; 这个位置一定有起码两条指向它的边，因此整张图一定存在环，且我们要找到的&lt;br&gt;
 &lt;code&gt;target&lt;/code&gt;  就是这个环的入口.&lt;/p&gt;
&lt;p&gt;我们先设置慢指针 &lt;code&gt;slow 和快指针&lt;/code&gt;   &lt;code&gt;fast&lt;/code&gt;  ，慢指针每次走一步，快指针每次走两步，根据「Floyd 判圈算法」两个指针在有环的情况下一定会相遇，此时我们再将  &lt;code&gt;slow&lt;/code&gt;  放置起点 &lt;code&gt;0&lt;/code&gt; ，两个指针每次同时移动一步，相遇的点就是答案。&lt;/p&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;div class=&#34;highlight-wrap&#34; autocomplete=&#34;off&#34; autocorrect=&#34;off&#34; autocapitalize=&#34;off&#34; spellcheck=&#34;false&#34; contenteditable=&#34;false&#34; data-rel=&#34;JAVA&#34;&gt;&lt;figure class=&#34;iseeu highlight java&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;findDuplicate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] nums)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;slow&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, fast = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      	# 找环的入口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            slow = nums[slow];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fast = nums[nums[fast]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        } &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (slow != fast);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 重置slow为起点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slow = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (slow != fast) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            slow = nums[slow];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fast = nums[fast];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 再次相遇 就是环入口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; slow;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;复杂度分析&lt;/p&gt;
&lt;p&gt;时间复杂度： &lt;code&gt;O(n)&lt;/code&gt; 。「Floyd 判圈算法」时间复杂度为线性的时间复杂度。&lt;br&gt;
空间复杂度： &lt;code&gt;O(1)&lt;/code&gt; 。我们只需要常数空间存放若干变量。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/4ee64d66/index.html</guid>
            <title>图记——晚霞的尾巴</title>
            <link>https://www.pswen.cn/p/4ee64d66/index.html</link>
            <category>晚霞</category>
            <category>云谷</category>
            <pubDate>Fri, 27 Aug 2021 10:50:09 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;img src=&#34;/p/4ee64d66/index/IMG_0027.jpg&#34; alt=&#34;晚霞的尾巴&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/9b051724/index.html</guid>
            <title>图记——武康大楼</title>
            <link>https://www.pswen.cn/p/9b051724/index.html</link>
            <category>武康大楼</category>
            <category>上海</category>
            <pubDate>Sun, 16 May 2021 05:50:28 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;img src=&#34;/p/9b051724/index/IMG_4609.jpg&#34; alt=&#34;武康大楼&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/51719/index.html</guid>
            <title>往昔时光-我们</title>
            <link>https://www.pswen.cn/p/51719/index.html</link>
            <category>我们</category>
            <category>年轻</category>
            <category>年幼</category>
            <pubDate>Fri, 12 Feb 2021 05:43:18 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;img src=&#34;/p/51719/index/IMG_4766.JPG&#34; alt=&#34;今夕&#34;&gt;&lt;/p&gt;
&lt;p&gt;小时候我们唯一的合照&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/ec5868f5/index.html</guid>
            <title>图记——上海外滩</title>
            <link>https://www.pswen.cn/p/ec5868f5/index.html</link>
            <category>上海外滩</category>
            <category>夜景</category>
            <pubDate>Wed, 20 May 2020 13:35:39 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;img src=&#34;/p/ec5868f5/index/IMG_4615.JPG&#34; alt=&#34;朦胧的外滩&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/6617d304/index.html</guid>
            <title>图记——直插云霄</title>
            <link>https://www.pswen.cn/p/6617d304/index.html</link>
            <category>上海</category>
            <category>三叉戟</category>
            <pubDate>Mon, 30 Dec 2019 11:50:56 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;img src=&#34;/p/6617d304/index/IMG_4526.JPG&#34; alt=&#34;直插云霄&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/dfa3267e/index.html</guid>
            <title>图记——大厦</title>
            <link>https://www.pswen.cn/p/dfa3267e/index.html</link>
            <category>上海</category>
            <category>陆家嘴</category>
            <pubDate>Tue, 08 Oct 2019 10:50:44 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;img src=&#34;/p/dfa3267e/index/IMG_4474.JPG&#34; alt=&#34;大厦&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/598af32f/index.html</guid>
            <title>2019年全家合照</title>
            <link>https://www.pswen.cn/p/598af32f/index.html</link>
            <category>合照</category>
            <pubDate>Tue, 05 Feb 2019 12:32:25 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;2019 年合照&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;/p/598af32f/index/DSC_1123.JPG&#34; alt=&#34;DSC_1123&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/4166/index.html</guid>
            <title>往昔时光-大学</title>
            <link>https://www.pswen.cn/p/4166/index.html</link>
            <category>往昔时光</category>
            <category>大学</category>
            <pubDate>Sat, 23 Jun 2018 05:32:35 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;img src=&#34;/p/4166/index/IMG_3952.JPG&#34; alt=&#34;学位授予&#34;&gt;&lt;/p&gt;
&lt;p&gt;梦想的起点&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/f7e262be/index.html</guid>
            <title>2018年全家合照</title>
            <link>https://www.pswen.cn/p/f7e262be/index.html</link>
            <category>合照</category>
            <pubDate>Fri, 16 Feb 2018 12:29:28 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;在 2018 年的全家合照&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;/p/f7e262be/index/caff8c228d8d54a9bfce949ec7ea786.jpg&#34; alt=&#34;caff8c228d8d54a9bfce949ec7ea786&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/43666/index.html</guid>
            <title>往昔时光-可爱的他们</title>
            <link>https://www.pswen.cn/p/43666/index.html</link>
            <category>往昔时光</category>
            <category>高中</category>
            <pubDate>Tue, 13 Feb 2018 04:36:02 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;img src=&#34;/p/43666/index/IMG_3586.JPG&#34; alt=&#34;可爱的他们&#34;&gt;&lt;/p&gt;
&lt;p&gt;可爱的他们&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/48940/index.html</guid>
            <title>往昔时光-大学实习</title>
            <link>https://www.pswen.cn/p/48940/index.html</link>
            <category>大学</category>
            <category>往昔</category>
            <category>实习</category>
            <pubDate>Sat, 17 Jun 2017 02:39:52 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;img src=&#34;/p/48940/index/IMG_2498.JPG&#34; alt=&#34;实习&#34;&gt;&lt;/p&gt;
&lt;p&gt;参观实习&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/48940/index/IMG_2473.JPG&#34; alt=&#34;流体机械&#34;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
    </channel>
</rss>
