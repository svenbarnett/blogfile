<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>人间日常 • Posts by &#34;类加载&#34; tag</title>
        <link>https://www.pswen.cn</link>
        <description>所行皆过往，所愿皆成真</description>
        <language>zh-CN</language>
        <pubDate>Fri, 12 Nov 2021 14:55:27 +0000</pubDate>
        <lastBuildDate>Fri, 12 Nov 2021 14:55:27 +0000</lastBuildDate>
        <category>合照</category>
        <category>疫情</category>
        <category>春节</category>
        <category>烟花</category>
        <category>元宵节</category>
        <category>QQ</category>
        <category>那些年</category>
        <category>Apollo</category>
        <category>Spring</category>
        <category>动态配置</category>
        <category>聚会</category>
        <category>悼念</category>
        <category>linux</category>
        <category>acmesh</category>
        <category>域名证书</category>
        <category>leetcode</category>
        <category>算法</category>
        <category>贪心</category>
        <category>动态规划</category>
        <category>二分法</category>
        <category>快慢指针</category>
        <category>gulp</category>
        <category>压缩图片</category>
        <category>gulp-imagemin</category>
        <category>Java</category>
        <category>位运算</category>
        <category>正则</category>
        <category>js</category>
        <category>去除零</category>
        <category>jvm</category>
        <category>类加载</category>
        <category>jvm调优</category>
        <category>混合模式</category>
        <category>解释模式</category>
        <category>纯编译模式</category>
        <category>环形链表</category>
        <category>往昔时光</category>
        <category>大学</category>
        <category>高中</category>
        <category>往昔</category>
        <category>实习</category>
        <category>我们</category>
        <category>年轻</category>
        <category>年幼</category>
        <category>树</category>
        <category>dfs</category>
        <category>bfs</category>
        <category>武康大楼</category>
        <category>上海</category>
        <category>陆家嘴</category>
        <category>三叉戟</category>
        <category>上海外滩</category>
        <category>夜景</category>
        <category>晚霞</category>
        <category>云谷</category>
        <category>回溯</category>
        <category>矩阵</category>
        <category>深度遍历</category>
        <category>广度遍历</category>
        <category>图记</category>
        <category>天安云谷</category>
        <category>生活</category>
        <category>午餐</category>
        <category>单词接龙</category>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/8239/</guid>
            <title>虚拟机类加载机制-类加载时机</title>
            <link>https://www.pswen.cn/p/8239/</link>
            <category>jvm</category>
            <category>类加载</category>
            <pubDate>Fri, 12 Nov 2021 14:55:27 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;在 Java 语言里面，类型的加载、连接和初始化过程都是在程序运行期间完成的，这种策略虽然会令类加载时稍微增加一些性能开销，但是会为 Java 应用程序提供高度的灵活性，Java 里天生可以动态扩展的语言特性就是依赖于运行期动态加载和动态连接这个特点实现的。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;例如，如果编写一个面向接口的应用程序，可以等到运行时再指定其实际的实现类；用户可以通过 Java 预定义的和自定义类加载器，让一个本地的应用程序可以在运行时从网络或其他地方加载一个二进制流作为程序代码的一部分，这种组装应用程序的方式目前已广泛应用于 Java 程序之中。从最基础的 Applet、JSP 到相对复杂的 OSGI 技术，都使用了 Java 语言运行期类加载的特性。&lt;/p&gt;
&lt;h2 id=&#34;类加载机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类加载机制&#34;&gt;#&lt;/a&gt; 类加载机制&lt;/h2&gt;
&lt;p&gt;生命周期：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialzation）、使用（Using）和卸载（Unloading）7 个阶段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/8239/20160719124551909.jpeg&#34; alt=&#34;生命周期&#34;&gt;&lt;/p&gt;
&lt;p&gt;什么情况下需要开始进行类加载过程的第一阶段呢？没有明确约束，虚拟机自由把握；&lt;/p&gt;
&lt;p&gt;而初始化阶段有严格规范，以下五种情况必须理解对类进行初始化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遇到 new（new 关键词实例化），getstatic（读取类的 static 字段），putstatic（设置类的 static 字段，被 final 修饰、已在编译期就把结果放入了常量池的字段除外），invokestatic（调用一个类的静态方法）&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;java.lang.reflect&lt;/code&gt;  包的方法对类进行反射调用&lt;/li&gt;
&lt;li&gt;初始化一个类，会先初始化它的父类&lt;/li&gt;
&lt;li&gt;虚拟机启动时，会先初始化执行的主类（main 方法）&lt;/li&gt;
&lt;li&gt;JDK1.7 的 &lt;code&gt;java.lang.invoke.MethodHandle&lt;/code&gt;  的方法去获取句柄&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;有且仅有&lt;/strong&gt;&lt;/em&gt;这五种情况，除此之外都是被动引用，不会触发初始化，举 3 个例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于静态字段，只有定义这个字段的类才会被初始化，例如父类定义的静态字段，通过子类去使用父类的静态字段，那么只有父类会初始化，子类不会&lt;/li&gt;
&lt;li&gt;数组类型定义使用时，类似 &lt;code&gt;SubClass[]&lt;/code&gt;  不会进行初始化&lt;/li&gt;
&lt;li&gt;被 finla 修饰的静态字段，会进行常量传播优化，实际上这个字段已经和这个类没啥关系了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;初始化第三种情况下，对于接口有个特例情况：一个类初始化时要求父类全部初始化，而接口，不要求其父接口全部都完成初始化，只有在使用到才会初始化。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
    </channel>
</rss>
