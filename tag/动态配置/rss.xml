<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>人间日常 • Posts by &#34;动态配置&#34; tag</title>
        <link>https://www.pswen.cn</link>
        <description>所行皆过往，所愿皆成真</description>
        <language>zh-CN</language>
        <pubDate>Thu, 23 Feb 2023 14:29:54 +0000</pubDate>
        <lastBuildDate>Thu, 23 Feb 2023 14:29:54 +0000</lastBuildDate>
        <category>合照</category>
        <category>疫情</category>
        <category>春节</category>
        <category>烟花</category>
        <category>元宵节</category>
        <category>QQ</category>
        <category>那些年</category>
        <category>Apollo</category>
        <category>Spring</category>
        <category>动态配置</category>
        <category>聚会</category>
        <category>悼念</category>
        <category>leetcode</category>
        <category>算法</category>
        <category>贪心</category>
        <category>动态规划</category>
        <category>linux</category>
        <category>acmesh</category>
        <category>域名证书</category>
        <category>二分法</category>
        <category>快慢指针</category>
        <category>gulp</category>
        <category>压缩图片</category>
        <category>gulp-imagemin</category>
        <category>正则</category>
        <category>js</category>
        <category>去除零</category>
        <category>jvm</category>
        <category>类加载</category>
        <category>Java</category>
        <category>位运算</category>
        <category>jvm调优</category>
        <category>混合模式</category>
        <category>解释模式</category>
        <category>纯编译模式</category>
        <category>环形链表</category>
        <category>往昔时光</category>
        <category>大学</category>
        <category>往昔</category>
        <category>实习</category>
        <category>高中</category>
        <category>我们</category>
        <category>年轻</category>
        <category>年幼</category>
        <category>树</category>
        <category>dfs</category>
        <category>bfs</category>
        <category>武康大楼</category>
        <category>上海</category>
        <category>陆家嘴</category>
        <category>三叉戟</category>
        <category>上海外滩</category>
        <category>夜景</category>
        <category>晚霞</category>
        <category>云谷</category>
        <category>回溯</category>
        <category>图记</category>
        <category>天安云谷</category>
        <category>矩阵</category>
        <category>深度遍历</category>
        <category>广度遍历</category>
        <category>生活</category>
        <category>午餐</category>
        <category>单词接龙</category>
        <item>
            <guid isPermalink="true">https://www.pswen.cn/p/e352a76e/index.html</guid>
            <title>从Apollo动态配置原理学Spring(一)</title>
            <link>https://www.pswen.cn/p/e352a76e/index.html</link>
            <category>Apollo</category>
            <category>Spring</category>
            <category>动态配置</category>
            <pubDate>Thu, 23 Feb 2023 14:29:54 +0000</pubDate>
            <description><![CDATA[ &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;最近工作碰到需要写一个类似携程 Apollo 的动态配置功能，以此系统学习该原理，熟练掌握下 Spring 的各种机制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Apollo 动态配置原理简述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Apollo 配置中心动态生效机制，是基于 Http 长轮询请求和 Spring 扩展机制实现的，在 Spring 容器启动过程中，Apollo 通过自定义的 &lt;code&gt;BeanPostProcessor&lt;/code&gt;  和 &lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt;  將参数中包含 &lt;code&gt;${…}&lt;/code&gt;  占位符和 &lt;code&gt;@Value&lt;/code&gt;  注解的 Bean 注册到 Apollo 框架中定义的注册表中。然后通过 Http 长轮询不断的去获取服务端的配置信息，一旦配置发生变化，Apollo 会根据变化的配置的 Key 找到对应的 Bean，然后修改 Bean 的属性，从而实现了配置动态生效的特性。&lt;/p&gt;
&lt;p&gt;需要注意的是，Apollo 在配置变化后，只能修改 Bean 的属性，例如我们数据源的属性发生变化，新创建的 Connection 对象是没问题的，但是连接池中已经创建的 Connection 对象相关信息是不能动态修改的，所以依然需要重启应用。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;其中涉及到的 Spring 的扩展机制有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BeanFactoryPostProcessor&lt;/li&gt;
&lt;li&gt;BeanPostProcessor&lt;/li&gt;
&lt;li&gt;BeanDefinitionRegistry&lt;/li&gt;
&lt;li&gt;PropertySource&lt;/li&gt;
&lt;li&gt;ImportBeanDefinitionRegistrar&lt;/li&gt;
&lt;li&gt;PropertySourcesPlaceholderConfigurer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;其中每一个都是非常关键的点，我们后续会一一进行学习。&lt;/p&gt;
&lt;h2 id=&#34;apollo启动过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#apollo启动过程&#34;&gt;#&lt;/a&gt; Apollo 启动过程&lt;/h2&gt;
&lt;p&gt;首先，我们先看一张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/e352a76e/index.htmlimage-20230223224050610.png&#34; alt=&#34;Apollo启动图&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Spring 启动，扫描 bean，将相关变量参数注册到 Apollo 属性注册表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 RemoteConfigRepository 获取配置，持久化本地，后续读取从本地读取，通过 &lt;code&gt;PropertySourcesProcessor&lt;/code&gt;  执行如下步骤&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（1）根据命名空间从配置中心获取配置信息，创建 RemoteConfigRepository 和 LocalFileConfigRepository 对象。RemoteConfigRepository 表示远程配置中心资源，LocalFileConfigRepository 表示本地缓存配置资源。&lt;/p&gt;
&lt;p&gt;（2）LocalFileConfigRepository 对象缓存配置信息到 C:\opt\data 或者 /opt/data 目录&lt;/p&gt;
&lt;p&gt;（3）RemoteConfigRepository 开启 HTTP 长轮询请求定时任务，默认 2s 请求一次。&lt;/p&gt;
&lt;p&gt;（4）將本地缓存配置信息转换为 PropertySource 对象（Apollo 自定义了 Spring 的 PropertySource），加载到 Spring 的 Environment 对象中。至此静态配置就已经加入到环境变量中&lt;/p&gt;
&lt;p&gt;（5）將自定义的 ConfigPropertySource 注册为观察者。一旦 RemoteConfigRepository 发现远程配置中心信息发生变化，ConfigPropertySource 对象会得到通知。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;通过一个自定义监听器，监听对应事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后续通过长轮询请求监听到配置变化，根据配置读取注册表里面的 key 和对应的 bean，通过反射修改 bean 对应属性值&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;apollo扩展点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#apollo扩展点&#34;&gt;#&lt;/a&gt; Apollo 扩展点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;PropertySourcesProcessor&lt;/code&gt;  初始化 Apollo 配置、接入 Spring environment，初始化 Apollo 监听器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApolloAnnotationProcessor&lt;/code&gt;  提供 Apollo 一些注解支持 &lt;code&gt;@ApolloConfig&lt;/code&gt; ， &lt;code&gt;@ApolloConfigChangeListener&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringValueProcessor&lt;/code&gt;  提供对 &lt;code&gt;@Value&lt;/code&gt;  动态生效能力 针对实例 bean&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringValueDefinitionProcessor&lt;/code&gt;  提供对 &lt;code&gt;@Value&lt;/code&gt;  动态生效能力 针对 bean 定义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApolloJsonValueProcessor&lt;/code&gt;  提供对 &lt;code&gt;@ApolloJsonValue&lt;/code&gt;  支持&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述分别对应使用 Spring 的扩展能力 &lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt; 、 &lt;code&gt;BeanPostProcessor&lt;/code&gt; 、 &lt;code&gt;BeanPostProcessor&lt;/code&gt;  和 &lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt; 、 &lt;code&gt;BeanDefinitionRegistryPostProcessor&lt;/code&gt; 、 &lt;code&gt;BeanPostProcessor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们这个系列也会对 apollo 基于 spring 提供的扩展点来嵌入自己的能力。主要为 BeanFactoryPostProcessor、BeanPostProcessor 这两个扩展点；先简单说一下：&lt;em&gt;&lt;strong&gt;只需要知道，BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor 在生成所有 beandefinition 之后调用，而 BeanPostProcessor 在通过 beandefinition 实例化 bean 的过程中调用即可。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;那这些实现我们就下篇见了！！！&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt; ]]></description>
        </item>
    </channel>
</rss>
