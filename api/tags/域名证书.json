{"name":"域名证书","postlist":[{"title":"linux生产免费的域名证书","slug":"acmesh-cert","date":"2021-12-29T13:59:07.000Z","updated":"2022-12-10T15:20:52.748Z","comments":null,"realpath":null,"path":"api/articles/acmesh-cert.json","excerpt":"简单来说 acme.sh 实现了 acme 协议，可以从 let‘s encrypt 生成免费的证书。<br>acme.sh 有以下特点：<br>一个纯粹用 Shell（Unix shell）语言编写的 ACME 协议客户端。<br>完整的 ACME 协议实施。 支持 ACME v1 和 ACME v2 支持 ACME v2 通配符证书<br>简单，功能强大且易于使用。你只需要 3 分钟就可以学习它。<br>Let's Encrypt 免费证书客户端最简单的 shell 脚本。<br>纯粹用 Shell 编写，不依赖于 python 或官方的 Let's Encrypt 客户端。<br>只需一个脚本即可自动颁发，续订和安装证书。 不需要 root/sudoer 访问权限。<br>支持在 Docker 内使用，支持 IPv6","keywords":"linux,cert,acme.sh","cover":"/p/4425fc35/867078-20190326175923357-720763416.png","content":"<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1hY21lLWt0MGdzNjdobW8zYTJyMWEuc2g=\">简单来说 acme.sh</span> 实现了 acme 协议，可以从 let‘s encrypt 生成免费的证书。<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL2FjbWUuc2g=\">acme.sh</span> 有以下特点：<br>\n一个纯粹用 Shell（Unix shell）语言编写的 ACME 协议客户端。<br>\n完整的 ACME 协议实施。 支持 ACME v1 和 ACME v2 支持 ACME v2 通配符证书<br>\n简单，功能强大且易于使用。你只需要 3 分钟就可以学习它。<br>\nLet's Encrypt 免费证书客户端最简单的 shell 脚本。<br>\n纯粹用 Shell 编写，不依赖于 python 或官方的 Let's Encrypt 客户端。<br>\n只需一个脚本即可自动颁发，续订和安装证书。 不需要 root/sudoer 访问权限。<br>\n支持在 Docker 内使用，支持 IPv6</p>\n<p><span id=\"more\"></span></p>\n<p><strong>安装环境：</strong><br>\n<strong>操作系统：centos 7 X64</strong><br>\n<strong>SSL 证书来源：Let's Encrypt</strong><br>\n<strong> 安装用脚本：<span class=\"exturl\" data-url=\"aHR0cDovL2FjbWUuc2g=\">acme.sh</span></strong><br>\n<strong> 服务器：nginx</strong><br>\n<strong> 域名：<span class=\"exturl\" data-url=\"aHR0cDovL2Vwb2ludC5wc3dlbi5jbg==\">epoint.pswen.cn</span></strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEueG4tLWFjbWUta2U5ZzQ5MnUuc2g=\">1. 安装 acme.sh</span></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> https://get.acme.sh <span class=\"token operator\">|</span> <span class=\"token function\">sh</span></pre></td></tr></table></figure><p>2. 安装后的配置<br>\n把 <span class=\"exturl\" data-url=\"aHR0cDovL2FjbWUuc2g=\">acme.sh</span> 安装到你的 home 目录下:~/.acme.sh/ 并创建 一个 bash 的 alias, 方便你的使用:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">acme.sh</span><span class=\"token operator\">=~</span>/.acme.sh/acme.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'alias acme.sh=~/.acme.sh/acme.sh'</span> <span class=\"token operator\">>></span>/etc/profile</pre></td></tr></table></figure><p>3. 申请证书<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL2FjbWUuc2g=\"> acme.sh</span> 实现了 acme 协议支持的所有验证协议。一般有两种方式验证: http 和 dns 验证（本文不提供 dns 方式申请，dns 手动模式，不能自动更新证书。在续订证书时，您必须手动向域中添加新的 txt 记录。）</p>\n<p>HTTP 方式方法如下：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>acme.sh <span class=\"token parameter variable\">--issue</span> <span class=\"token parameter variable\">-d</span> epoint.pswen.cn <span class=\"token parameter variable\">--webroot</span> /nginx网站根目录</pre></td></tr></table></figure><p>只需要指定域名，并指定域名所在的网站根目录【命令中根目录路径】. <span class=\"exturl\" data-url=\"aHR0cDovL2FjbWUuc2g=\">acme.sh</span> 会全自动的生成验证文件，并放到网站的根目录，然后自动完成验证。最后会聪明的删除验证文件。整个过程没有任何副作用.</p>\n<p>4. 证书的安装<br>\n注意，默认生成的证书都放在安装目录下: ~/.acme.sh/, 请不要直接使用此目录下的文件，<br>\n 例如：不要直接让 nginx/apache 的配置文件使用这下面的文件.<br>\n 这里面的文件都是内部使用，而且目录结构可能会变化.</p>\n<p>正确的使用方法是使用 --installcert 命令，并指定目标位置，然后证书文件会被 copy 到相应的位置，</p>\n<p>Nginx 服务： <code>service nginx force-reload</code> 。(centos6)</p>\n<p>Nginx 服务： <code>systemctl restart nginx </code> 。(centos7)</p>\n<p>nginx 示例 1:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>acme.sh <span class=\"token parameter variable\">--installcert</span> <span class=\"token parameter variable\">-d</span> epoint.pswen.cn --key-file /usr/local/nginx/ssl_cert/epoint.pswen.cn.key --fullchain-file /usr/local/nginx/ssl_cert/epoint.pswen.cn.cer <span class=\"token parameter variable\">--reloadcmd</span> <span class=\"token string\">\"service nginx force-reload\"</span></pre></td></tr></table></figure><p>nginx 示例 2：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>acme.sh --install-cert <span class=\"token parameter variable\">-d</span> chandao.test.com <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--key-file /usr/local/nginx/ssl_cert/test.com/chandao.test.com.key <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--fullchain-file /usr/local/nginx/ssl_cert/test.com/chandao.test.com.cer <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">--reloadcmd</span>      <span class=\"token string\">\"service nginx force-reload\"</span></pre></td></tr></table></figure><p>附带完成前面 1-4 步骤的截图：</p>\n<p><img data-src=\"/p/4425fc35/867078-20190326175923357-720763416.png\" alt=\"img\"></p>\n<ol start=\"5\">\n<li>Nginx 服务器安装 SSL 证书</li>\n</ol>\n<p>Nginx 配置 Http 和 Https 共存</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#如果硬性要求全部走 https 协议，这一行去除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>listen <span class=\"token number\">443</span> ssl http2<span class=\"token punctuation\">;</span> <span class=\"token comment\">#如果硬性要求全部走 https 协议，这里去除 ssl</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server_name chandao.test.com<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#ssl on; #如果硬性要求全部走 https 协议，这里开启 ssl on</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ssl_certificate /usr/local/nginx/ssl_cert/test.com/chandao.test.com.cer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ssl_certificate_key /usr/local/nginx/ssl_cert/test.com/chandao.test.com.key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#ssl 性能调优</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#nginx 1.13.0 支持了 TLSv1.3,TLSv1.3 相比之前的 TLSv1.2、TLSv1.1 等性能大幅提升</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:<span class=\"token operator\">!</span>MD5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>ssl_prefer_server_ciphers on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ssl_session_timeout 10m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#使用 ssl_session_cache 优化 https 下 Nginx 的性能</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ssl_session_cache builtin:1000 shared:SSL:10m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#OCSP Stapling 开启。OCSP 是用于在线查询证书吊销情况的服务，使用 OCSP Stapling 能将证书有效状态的信息缓存到服务器，提高 TLS 握手速度</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ssl_stapling on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#OCSP Stapling 验证开启</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>ssl_stapling_verify on<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>完整例子：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#如果硬性要求全部走 https 协议，这一行去除</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  listen       <span class=\"token number\">443</span> ssl http2<span class=\"token punctuation\">;</span>    <span class=\"token comment\">#如果硬性要求全部走 https 协议，这里去除 ssl</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  server_name chandao.test.com<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  access_log off<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  index index.html index.htm index.php<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  root /data/wwwroot/chandao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">#ssl on;   #如果硬性要求全部走 https 协议，这里开启 ssl on</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  ssl_certificate   /usr/local/nginx/ssl_cert/test.com/chandao.test.com.cer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  ssl_certificate_key  /usr/local/nginx/ssl_cert/test.com/chandao.test.com.key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">#ssl 性能调优</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#nginx 1.13.0 支持了 TLSv1.3,TLSv1.3 相比之前的 TLSv1.2、TLSv1.1 等性能大幅提升</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:<span class=\"token operator\">!</span>MD5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  ssl_prefer_server_ciphers on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  ssl_session_timeout 10m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">#使用 ssl_session_cache 优化 https 下 Nginx 的性能</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  ssl_session_cache builtin:1000 shared:SSL:10m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">#OCSP Stapling 开启。OCSP 是用于在线查询证书吊销情况的服务，使用 OCSP Stapling 能将证书有效状态的信息缓存到服务器，提高 TLS 握手速度</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  ssl_stapling on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">#OCSP Stapling 验证开启</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  ssl_stapling_verify on<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">#error_page 404 /404.html;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">#error_page 502 /502.html;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  location ~ <span class=\"token punctuation\">[</span>^/<span class=\"token punctuation\">]</span><span class=\"token punctuation\">\\</span>.php<span class=\"token punctuation\">(</span>/<span class=\"token operator\">|</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">#fastcgi_pass remote_php_ip:9000;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    fastcgi_pass unix:/dev/shm/php-cgi.sock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    fastcgi_index index.php<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    include fastcgi.conf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  location ~ .*<span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">(</span>gif<span class=\"token operator\">|</span>jpg<span class=\"token operator\">|</span>jpeg<span class=\"token operator\">|</span>png<span class=\"token operator\">|</span>bmp<span class=\"token operator\">|</span>swf<span class=\"token operator\">|</span>flv<span class=\"token operator\">|</span>mp4<span class=\"token operator\">|</span>ico<span class=\"token punctuation\">)</span>$ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    expires 30d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    access_log off<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  location ~ .*<span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">(</span>js<span class=\"token operator\">|</span>css<span class=\"token punctuation\">)</span>?$ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    expires 7d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    access_log off<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  location ~ /<span class=\"token punctuation\">\\</span>.ht <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    deny all<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>6. 重启 nginx<br>\n 保存退出后，通过 nginx -t 来检查配置文件是否正确，有错误的话改之即可。配置文件检测正确之后，通过 service nginx force-reload 来重载配置文件。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nginx <span class=\"token parameter variable\">-t</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl restart nginx</pre></td></tr></table></figure>","raw":null,"categories":[],"tags":[{"name":"linux","path":"api/tags/linux.json"},{"name":"acmesh","path":"api/tags/acmesh.json"},{"name":"域名证书","path":"api/tags/域名证书.json"}]}]}