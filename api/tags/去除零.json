{"name":"去除零","postlist":[{"title":"巧妙使用正则——去除小数点后多余的零","slug":"js-regexp","date":"2022-01-10T13:51:44.000Z","updated":"2023-02-08T11:20:51.425Z","comments":null,"realpath":null,"path":"api/articles/js-regexp.json","excerpt":"直接上代码1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>const arr=[&#x27;1200.00100&#x27;,&#x27;1200.00000&#x27;,&#x27;1200.&#x27;,&#x27;1200&#x27;,&#x27;1200.10000&#x27;,&#x27;0.120010000&#x27;,&#x27;0.000011111&#x27;]<br>const regexp=/(?:\\.0*|(\\.\\d+?)0+)$/<br>arr.forEach((item)=&gt;&#123;<br>    console.log(item.replace(regexp,&#x27;$1&#x27;))<br>&#125;)<br><br>// &gt; 1200.001<br>// &gt; 1200<br>// &gt; 1200<br>// &gt; 1200<br>// &gt; 1200.1<br>// &gt; 0.12001<br>// &gt; 0.000011111<br>","keywords":"正则,js,去除零","cover":"/p/9195a466/image.svg","content":"<p>直接上代码</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr=[<span class=\"string\">&#x27;1200.00100&#x27;</span>,<span class=\"string\">&#x27;1200.00000&#x27;</span>,<span class=\"string\">&#x27;1200.&#x27;</span>,<span class=\"string\">&#x27;1200&#x27;</span>,<span class=\"string\">&#x27;1200.10000&#x27;</span>,<span class=\"string\">&#x27;0.120010000&#x27;</span>,<span class=\"string\">&#x27;0.000011111&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> regexp=<span class=\"regexp\">/(?:\\.0*|(\\.\\d+?)0+)$/</span></span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item.<span class=\"title function_\">replace</span>(regexp,<span class=\"string\">&#x27;$1&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; 1200.001</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; 1200</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; 1200</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; 1200</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; 1200.1</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; 0.12001</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; 0.000011111</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>正则可视化：</p>\n<p><img src=\"/p/9195a466/image.svg\" alt=\"image\"></p>\n<p>推荐个可视化网址：<a href=\"https://regexper.com/\">https://regexper.com/</a></p>\n<!-- more -->\n<p>再解释下正则的意思 <code>(?:.0*|(.\\d+?)0+)$</code></p>\n<p>先分解成 4 部分</p>\n<ol>\n<li><code>(?:reg1|reg2)</code>  - 它是一个正则分组非捕获组，要么匹配 reg1，要么匹配 reg2，优先匹配 reg1，加上？: 不对捕获组记录</li>\n<li><code>.0*</code>  - 表示匹配一个。开头，后边跟着 0 或 0 个以上数量的 0，且不进行捕获，所以在填充 $1 时，就是个空值</li>\n<li><code>(.\\d+?)0+</code>  - 它是一个捕获组，匹配一个。开头后边跟着非贪婪（懒惰）匹配任意数字，接着在末尾尽可能多的匹配 0 这个字符，匹配完成后，生成一个捕获组内容</li>\n<li><code>$</code>  - 表示匹配结果需要以 0 作为结尾</li>\n</ol>\n<h2 id=\"正则分组\"><a class=\"markdownIt-Anchor\" href=\"#正则分组\">#</a> 正则分组</h2>\n<ul>\n<li>\n<p>普通捕获组</p>\n<p>从正则表达式左侧开始，每出现一个左括号 &quot;(&quot; 记做一个分组，分组编号从 1 开始。0 代表整个表达式。</p>\n<p>对于时间字符串：2017-04-25，表达式如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\\\d&#123;<span class=\"number\">4</span>&#125;)-((\\\\d&#123;<span class=\"number\">2</span>&#125;)-(\\\\d&#123;<span class=\"number\">2</span>&#125;))</span><br></pre></td></tr></table></figure>\n<p>有 4 个左括号，所以有 4 个分组:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">编号</th>\n<th style=\"text-align:left\">捕获组</th>\n<th style=\"text-align:left\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">(\\d{4})-((\\d{2})-(\\d{2}))</td>\n<td style=\"text-align:left\">2017-04-25</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">(\\d{4})</td>\n<td style=\"text-align:left\">2017</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">((\\d{2})-(\\d{2}))</td>\n<td style=\"text-align:left\">04-25</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">(\\d{2})</td>\n<td style=\"text-align:left\">04</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">(\\d{2})</td>\n<td style=\"text-align:left\">25</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>命名捕获组</p>\n<p>每个以左括号开始的捕获组，都紧跟着 <strong>?</strong>，而后才是正则表达式。</p>\n<p>对于时间字符串：2017-04-25，表达式如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?&lt;year&gt;\\\\d&#123;<span class=\"number\">4</span>&#125;)-(?&lt;md&gt;(?&lt;month&gt;\\\\d&#123;<span class=\"number\">2</span>&#125;)-(?&lt;date&gt;\\\\d&#123;<span class=\"number\">2</span>&#125;))</span><br></pre></td></tr></table></figure>\n<p>有 4 个命名的捕获组，分别是:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">编号</th>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">捕获组</th>\n<th style=\"text-align:left\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">(?\\d{4})-(?(?\\d{2})-(?\\d{2}))</td>\n<td style=\"text-align:left\">2017-04-25</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">year</td>\n<td style=\"text-align:left\">(?\\d{4})-</td>\n<td style=\"text-align:left\">2017</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">md</td>\n<td style=\"text-align:left\">(?(?\\d{2})-(?\\d{2}))</td>\n<td style=\"text-align:left\">04-25</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">month</td>\n<td style=\"text-align:left\">(?\\d{2})</td>\n<td style=\"text-align:left\">04</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">date</td>\n<td style=\"text-align:left\">(?\\d{2})</td>\n<td style=\"text-align:left\">25</td>\n</tr>\n</tbody>\n</table>\n<p>命名的捕获组同样也可以使用编号获取相应值。</p>\n</li>\n</ul>\n<h2 id=\"非捕获组\"><a class=\"markdownIt-Anchor\" href=\"#非捕获组\">#</a> 非捕获组</h2>\n<p>在左括号后紧跟  <code>?:</code> ，而后再加上正则表达式，构成非捕获组 <strong>(?:Expression)</strong>。</p>\n<p>对于时间字符串：2017-04-25，表达式如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?:\\\\d&#123;<span class=\"number\">4</span>&#125;)-((\\\\d&#123;<span class=\"number\">2</span>&#125;)-(\\\\d&#123;<span class=\"number\">2</span>&#125;))</span><br></pre></td></tr></table></figure>\n<p>这个正则表达式虽然有四个左括号，理论上有 4 个捕获组。但是第一组 <strong>(?:\\d{4})</strong>，其实是被忽略的。当使用 matcher.group (4) 时，系统会报错。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">编号</th>\n<th style=\"text-align:left\">捕获组</th>\n<th style=\"text-align:left\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">(\\d{4})-((\\d{2})-(\\d{2}))</td>\n<td style=\"text-align:left\">2017-04-25</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">((\\d{2})-(\\d{2}))</td>\n<td style=\"text-align:left\">04-25</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">(\\d{2})</td>\n<td style=\"text-align:left\">04</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">(\\d{2})</td>\n<td style=\"text-align:left\">25</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"非贪婪懒惰匹配\"><a class=\"markdownIt-Anchor\" href=\"#非贪婪懒惰匹配\">#</a> 非贪婪 (懒惰) 匹配</h2>\n<p>** 贪婪匹配:** 正则表达式一般趋向于最大长度匹配，也就是所谓的贪婪匹配。如上面使用模式 p 匹配字符串 str，结果就是匹配到：<strong>abcaxc</strong>(ab*c)。</p>\n<p><strong>非贪婪匹配</strong>：就是匹配到结果就好，就少的匹配字符。如上面使用模式 p 匹配字符串 str，结果就是匹配到：<strong>abc</strong>(ab*c)。</p>\n<p>问号可以表示重复前面内容的 0 次或一次，也就是要么不出现，要么出现一次</p>\n<p>示例 1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">string</span> <span class=\"variable\">pattern1</span> <span class=\"operator\">=</span> @<span class=\"string\">&quot;a.*?c&quot;</span>;   <span class=\"comment\">// non-greedy match </span></span><br><span class=\"line\"><span class=\"type\">Regex</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Regex</span>(pattern1);</span><br><span class=\"line\">regex.Match(<span class=\"string\">&quot;abcabc&quot;</span>); <span class=\"comment\">// return &quot;abc&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">## 结果：abc</span><br></pre></td></tr></table></figure>\n<p>示例 2：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">s=<span class=\"string\">&#x27;hello 1234567 world&#x27;</span></span><br><span class=\"line\">res = re.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;he.*?(\\d).*rld$&#x27;</span>,s)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res.group(<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 结果：123456</span></span><br></pre></td></tr></table></figure>\n<p>常用非贪婪表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*? 重复任意次，但尽可能少重复</span><br><span class=\"line\">+? 重复1次或更多次，但尽可能少重复</span><br><span class=\"line\">?? 重复0次或1次，但尽可能少重复</span><br><span class=\"line\">&#123;n,m&#125;? 重复n到m次，但尽可能少重复</span><br><span class=\"line\">&#123;n,&#125;? 重复n次以上，但尽可能少重复</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"正则","path":"api/tags/正则.json"},{"name":"js","path":"api/tags/js.json"},{"name":"去除零","path":"api/tags/去除零.json"}]}]}