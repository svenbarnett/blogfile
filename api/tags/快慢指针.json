{"name":"快慢指针","postlist":[{"title":"寻找重复数——LeetCode287","slug":"find-the-duplicate-number","date":"2021-11-11T13:02:11.000Z","updated":"2022-12-14T07:48:35.166Z","comments":null,"realpath":null,"path":"api/articles/find-the-duplicate-number.json","excerpt":null,"keywords":"寻找重复数,二分法,算法,leetcode","cover":"","content":"<p>给定一个包含 n + 1 个整数的数组 nums ，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。<br>\n假设 nums 只有 一个重复的整数 ，找出 这个重复的数 。<br>\n你设计的解决方案必须不修改数组 nums 且只用常量级 O (1) 的额外空间。<br>\nLeetcode-287 链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC10aGUtZHVwbGljYXRlLW51bWJlcg==\">https://leetcode-cn.com/problems/find-the-duplicate-number</span></p>\n<p>示例 1：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>输入：nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1,3</span>,4,2,2<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输出：2</pre></td></tr></table></figure><p>示例 2：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>输入：nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3,1</span>,3,4,2<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输出：3</pre></td></tr></table></figure><p>示例 3：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>输入：nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输出：1</pre></td></tr></table></figure><p>示例 4：</p>\n<pre><code>输入：nums = [1,1,2]\n输出：1\n</code></pre>\n<p>提示：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">105</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nums.length <span class=\"token operator\">==</span> n + <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> n</pre></td></tr></table></figure><p>nums 中 只有一个整数 出现 两次或多次 ，其余整数均只出现 一次</p>\n<h3 id=\"解题\"><a class=\"anchor\" href=\"#解题\">#</a> 解题</h3>\n<ol>\n<li>二分法</li>\n</ol>\n<p>针对用例 <code>[1,3,4,2,2]</code></p>\n<p>定义一个 <code>cnt</code>  数组用来存储小于等于 索引  <code>i</code>  的总数</p>\n<p>如果知道 cnt 数组随数字 index 逐渐增大具有单调性，那么当 num [index] 那么我们就可以直接利用二分查找来找到重复的数</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">nums</th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">cnt</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n</tbody>\n</table>\n<p>小于等于 1 的一个</p>\n<p>小于等于 2 的三个</p>\n<p>小于等于 3 的四个</p>\n<p>小于等于 4 的五个</p>\n<p>由此可见：我们的目标是 2，target 满足: target 前面的  <code>cnt[i] &lt;=  i</code> , 目标值 target 之后的  <code>cnt[i] &gt; i</code></p>\n<p>实际上可以归纳为：</p>\n<ul>\n<li>\n<p>如果测试用例的数组中  <code>target</code>  出现了两次，其余的数各出现了一次，这个时候肯定满足上文提及的性质，因为小于  <code>target</code>  的数 i 满足  <code>cnt[i]=i</code> ，大于等于  <code>target</code>  的数  <code>j</code>  满足  <code>cnt[j]=j+1</code> 。</p>\n</li>\n<li>\n<p>如果测试用例的数组中 <code>target </code> 出现了三次及以上，那么必然有一些数不在  <code>nums</code>  数组中了，这个时候相当于我们用 <code>target</code>  去替换了这些数，我们考虑替换的时候对 <code>cnt[] </code> 数组的影响。如果替换的数 <code>i</code>  小于  <code>target</code>  ，那么在数 <code>i</code>  到 <code>target</code>  区间的值，均减一，其他不变，满足条件。如果替换的数  <code>j</code>  大于等于  <code>target</code> ，那么 <code>target</code>  到 数 <code>j</code>  区间内值均加一，其他不变，亦满足条件。</p>\n</li>\n</ul>\n<p>因此不管多个重复还是两个重复，数组都满足那个性质。</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           # 右移动一位，相关于除以<span class=\"token number\">2</span>，取中间值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              # 将小于等于中间值都加起来  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           # 如果此时的cnt总数小于等于mid，那说明不在mid左边</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>               # 把左边拉到中间</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                l <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                # 否则把右边拉到中间</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                r <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                # 记录答案</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                ans <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>复杂度分析</p>\n<p>时间复杂度： <code>O(n * logn)</code> ，其中 n 为 nums 数组的长度。二分查找最多需要二分 <code>O(logn) </code> 次，每次判断的时候需要 <code>O(n)</code>  遍历 nums 数组求解小于等于 mid 的数的个数，因此总时间复杂度为 <code>O(n * logn)</code> 。</p>\n<p>空间复杂度： <code>O(1)</code> 。我们只需要常数空间存放若干变量。</p>\n<ol start=\"2\">\n<li>快慢指针</li>\n</ol>\n<p>我们对 nums 数组建图，每个位置  <code>i</code>  连一条  <code>i→nums[i]</code>  的边。由于存在的重复的数字<br>\n <code>target</code>  因此  <code>target </code> 这个位置一定有起码两条指向它的边，因此整张图一定存在环，且我们要找到的<br>\n <code>target</code>  就是这个环的入口.</p>\n<p>我们先设置慢指针 <code>slow 和快指针</code>   <code>fast</code>  ，慢指针每次走一步，快指针每次走两步，根据「Floyd 判圈算法」两个指针在有环的情况下一定会相遇，此时我们再将  <code>slow</code>  放置起点 <code>0</code> ，两个指针每次同时移动一步，相遇的点就是答案。</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> slow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      \t# 找环的入口</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            slow <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            fast <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>slow <span class=\"token operator\">!=</span> fast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        # 重置slow为起点</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        slow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>slow <span class=\"token operator\">!=</span> fast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            slow <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            fast <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        # 再次相遇 就是环入口</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>复杂度分析</p>\n<p>时间复杂度： <code>O(n)</code> 。「Floyd 判圈算法」时间复杂度为线性的时间复杂度。<br>\n空间复杂度： <code>O(1)</code> 。我们只需要常数空间存放若干变量。</p>\n","raw":null,"categories":[],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"},{"name":"算法","path":"api/tags/算法.json"},{"name":"二分法","path":"api/tags/二分法.json"},{"name":"快慢指针","path":"api/tags/快慢指针.json"}]},{"title":"环形链表——LeetCode141","slug":"linked-list-cycle","date":"2021-11-12T13:17:10.000Z","updated":"2022-12-14T07:48:35.170Z","comments":null,"realpath":null,"path":"api/articles/linked-list-cycle.json","excerpt":"给定一个链表，判断链表中是否有环。如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。<br>如果链表中存在环，则返回 true 。 否则，返回 false 。<br>LeetCode-141 链接：https://leetcode-cn.com/problems/linked-list-cycle","keywords":"环形链表,快慢指针","cover":"https://cdn.jsdelivr.net/gh/svenbarnett/svenbarnett.github.io/source/_postscircularlinkedlist.png","content":"<p>给定一个链表，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。<br>\n如果链表中存在环，则返回 true 。 否则，返回 false 。<br>\nLeetCode-141 链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbGlua2VkLWxpc3QtY3ljbGU=\">https://leetcode-cn.com/problems/linked-list-cycle</span></p>\n<p><span id=\"more\"></span></p>\n<p>示例 1：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/svenbarnett/svenbarnett.github.io/source/_postscircularlinkedlist.png\" alt=\"环形链表-示例1\"></p>\n<pre><code>输入：head = [3,2,0,-4], pos = 1\n输出：true\n解释：链表中有一个环，其尾部连接到第二个节点。\n</code></pre>\n<p>示例 2：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/svenbarnett/svenbarnett.github.io/source/_postscircularlinkedlist_test2.png\" alt=\"环形链表-示例2\"></p>\n<pre><code>输入：head = [1,2], pos = 0\n输出：true\n解释：链表中有一个环，其尾部连接到第一个节点。\n</code></pre>\n<p>示例 3：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/svenbarnett/svenbarnett.github.io/source/_postscircularlinkedlist_test3.png\" alt=\"环形链表-示例3\"></p>\n<pre><code>输入：head = [1], pos = -1\n输出：false\n解释：链表中没有环。\n</code></pre>\n<p>提示：</p>\n<pre><code>链表中节点的数目范围是 [0, 104]\n-105 &lt;= Node.val &lt;= 105\npos 为 -1 或者链表中的一个 有效索引 。\n</code></pre>\n<h3 id=\"解题\"><a class=\"anchor\" href=\"#解题\">#</a> 解题</h3>\n<ol>\n<li>Hash 表</li>\n</ol>\n<p>最容易想到的方法是遍历所有节点，每次遍历到一个节点时，判断该节点此前是否被访问过。</p>\n<p>具体地，我们可以使用哈希表来存储所有已经访问过的节点。每次我们到达一个节点，如果该节点已经存在于哈希表中，则说明该链表是环形链表，否则就将该节点加入哈希表中。重复这一过程，直到我们遍历完整个链表即可。</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasCycle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> seen <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>seen<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>复杂度分析</p>\n<p>时间复杂度： <code>O(N)</code> ，其中  <code>N </code> 是链表中的节点数。最坏情况下我们需要遍历每个节点一次。<br>\n空间复杂度： <code>O(N)</code> ，其中 <code>N </code> 是链表中的节点数。主要为哈希表的开销，最坏情况下我们需要将每个节点插入到哈希表中一次。</p>\n<ol start=\"2\">\n<li>快慢指针</li>\n</ol>\n<p>方法需要读者对「Floyd 判圈算法」（又称龟兔赛跑算法）有所了解。</p>\n<p>假想「乌龟」和「兔子」在链表上移动，「兔子」跑得快，「乌龟」跑得慢。当「乌龟」和「兔子」从链表上的同一个节点开始移动时，如果该链表中没有环，那么「兔子」将一直处于「乌龟」的前方；如果该链表中有环，那么「兔子」会先于「乌龟」进入环，并且一直在环内移动。等到「乌龟」进入环时，由于「兔子」的速度快，它一定会在某个时刻与乌龟相遇，即套了「乌龟」若干圈。</p>\n<p>我们可以根据上述思路来解决本题。具体地，我们定义两个指针，一快一满。慢指针每次只移动一步，而快指针每次移动两步。初始时，慢指针在位置 head，而快指针在位置 head.next。这样一来，如果在移动的过程中，快指针反过来追上慢指针，就说明该链表为环形链表。否则快指针将到达链表尾部，该链表不为环形链表。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/svenbarnett/svenbarnett.github.io/source/_posts2.png\" alt=\"龟兔赛跑\"></p>\n<blockquote>\n<p>为什么我们要规定初始时慢指针在位置 head，快指针在位置 head.next，而不是两个指针都在位置 head（即与「乌龟」和「兔子」中的叙述相同）？</p>\n</blockquote>\n<ul>\n<li>观察下面的代码，我们使用的是 while 循环，循环条件先于循环体。由于循环条件一定是判断快慢指针是否重合，如果我们将两个指针初始都置于 head，那么 while 循环就不会执行。因此，我们可以假想一个在 head 之前的虚拟节点，慢指针从虚拟节点移动一步到达 head，快指针从虚拟节点移动两步到达 head.next，这样我们就可以使用 while 循环了。</li>\n<li>当然，我们也可以使用 do-while 循环。此时，我们就可以把快慢指针的初始值都置为 head。</li>\n</ul>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasCycle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>slow <span class=\"token operator\">!=</span> fast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> fast<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>复杂度分析</p>\n<p>时间复杂度： <code>O(N)</code> ，其中  <code>N</code>  是链表中的节点数。<br>\n当链表中不存在环时，快指针将先于慢指针到达链表尾部，链表中每个节点至多被访问两次。<br>\n当链表中存在环时，每一轮移动后，快慢指针的距离将减小一。而初始距离为环的长度，因此至多移动<br>\n <code>N</code>  轮。<br>\n空间复杂度： <code>O(1)</code> 。我们只使用了两个指针的额外空间。</p>\n","raw":null,"categories":[],"tags":[{"name":"算法","path":"api/tags/算法.json"},{"name":"快慢指针","path":"api/tags/快慢指针.json"},{"name":"环形链表","path":"api/tags/环形链表.json"}]}]}