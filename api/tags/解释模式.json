{"name":"解释模式","postlist":[{"title":"JVM调优——X参数,方法内联","slug":"jvm-params","date":"2022-01-12T15:06:08.000Z","updated":"2022-12-10T15:20:52.748Z","comments":null,"realpath":null,"path":"api/articles/jvm-params.json","excerpt":null,"keywords":"jvm调优,mixed,混合,xint,解释,comp,纯编译,方法内联","cover":"/p/638c83fa/logo","content":"<p>JVM 的 <code>-X</code>  参数是非标准参数，在不同版本的 JVM 中，参数可能会有所不同，可以通过 <code>java -X</code>  查看非标准参数</p>\n<figure class=\"highlight plaintext\"><figcaption data-lang=\"plaintext\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>> java -X</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    -Xbatch           禁用后台编译</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    -Xbootclasspath/a:&lt;以 : 分隔的目录和 zip/jar 文件></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                      附加在引导类路径末尾</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    -Xcheck:jni       对 JNI 函数执行其他检查</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    -Xcomp            强制在首次调用时编译方法</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    -Xdebug           不执行任何操作。为实现向后兼容而提供。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    -Xdiag            显示附加诊断消息</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    -Xfuture          启用最严格的检查，预期将来的默认值。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                      此选项已过时，可能会在</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                      未来发行版中删除。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    -Xint             仅解释模式执行</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    -Xinternalversion</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                      显示比 -version 选项更详细的</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                      JVM 版本信息</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    -Xlog:&lt;opts>      配置或启用采用 Java 虚拟</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                      机 (Java Virtual Machine, JVM) 统一记录框架进行事件记录。使用 -Xlog:help</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                      可了解详细信息。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    -Xloggc:&lt;file>    将 GC 状态记录在文件中（带时间戳）。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                      此选项已过时，可能会在</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                      将来的发行版中删除。它将替换为 -Xlog:gc:&lt;file>。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    -Xmixed           混合模式执行（默认值）</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    -Xmn&lt;size>        为年轻代（新生代）设置初始和最大堆大小</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                      （以字节为单位）</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    -Xms&lt;size>        设置初始 Java 堆大小</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    -Xmx&lt;size>        设置最大 Java 堆大小</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    -Xnoclassgc       禁用类垃圾收集</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    -Xrs              减少 Java/VM 对操作系统信号的使用（请参见文档）</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    -Xshare:auto      在可能的情况下使用共享类数据（默认值）</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    -Xshare:off       不尝试使用共享类数据</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    -Xshare:on        要求使用共享类数据，否则将失败。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                      这是一个测试选项，可能导致间歇性</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                      故障。不应在生产环境中使用它。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    -XshowSettings    显示所有设置并继续</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    -XshowSettings:all</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                      显示所有设置并继续</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    -XshowSettings:locale</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                      显示所有与区域设置相关的设置并继续</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    -XshowSettings:properties</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                      显示所有属性设置并继续</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    -XshowSettings:vm</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                      显示所有与 vm 相关的设置并继续</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    -XshowSettings:system</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                      （仅 Linux）显示主机系统或容器</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                      配置并继续</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    -Xss&lt;size>        设置 Java 线程堆栈大小</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    -Xverify          设置字节码验证器的模式</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                      请注意，选项 -Xverify:none 已过时，</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                      可能会在未来发行版中删除。</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    --add-reads &lt;module>=&lt;target-module>(,&lt;target-module>)*</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                      更新 &lt;module> 以读取 &lt;target-module>，而无论</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                      模块如何声明。</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                      &lt;target-module> 可以是 ALL-UNNAMED，将读取所有未命名</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                      模块。</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    --add-exports &lt;module>/&lt;package>=&lt;target-module>(,&lt;target-module>)*</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                      更新 &lt;module> 以将 &lt;package> 导出到 &lt;target-module>，</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                      而无论模块如何声明。</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                      &lt;target-module> 可以是 ALL-UNNAMED，将导出到所有</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                      未命名模块。</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    --add-opens &lt;module>/&lt;package>=&lt;target-module>(,&lt;target-module>)*</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                      更新 &lt;module> 以在 &lt;target-module> 中打开</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                      &lt;package>，而无论模块如何声明。</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    --illegal-access=&lt;value></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                      允许或拒绝通过未命名模块中的代码对命名模块中的</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                      类型成员进行访问。</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                      &lt;value> 为 \"deny\"、\"permit\"、\"warn\" 或 \"debug\" 之一</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                      此选项将在未来发行版中删除。</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    --limit-modules &lt;module name>[,&lt;module name>...]</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                      限制可观察模块的领域</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    --patch-module &lt;module>=&lt;file>(:&lt;file>)*</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                      使用 JAR 文件或目录中的类和资源</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                      覆盖或增强模块。</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    --source &lt;version></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                      设置源文件模式中源的版本。</pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>这些额外选项如有更改, 恕不另行通知。</pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>以下选项是特定于 macOS 的选项：</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    -XstartOnFirstThread</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                      在第一个 (AppKit) 线程上运行 main() 方法</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    -Xdock:name=&lt;application name></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                      覆盖停靠栏中显示的默认应用程序名称</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    -Xdock:icon=&lt;path to icon file></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                     覆盖停靠栏中显示的默认图标</pre></td></tr></table></figure><h2 id=\"-xint-xcomp与-xmixed参数\"><a class=\"anchor\" href=\"#-xint-xcomp与-xmixed参数\">#</a> -Xint、-Xcomp 与 - Xmixed 参数</h2>\n<h3 id=\"-xint参数\"><a class=\"anchor\" href=\"#-xint参数\">#</a> -Xint 参数</h3>\n<figure class=\"highlight plaintext\"><figcaption data-lang=\"plaintext\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在解释模式（interpreted mode）下，-Xint标记会强制JVM执行所有的字节码，这当然会降低运行速度，通常低10倍或更多。</pre></td></tr></table></figure><p><img data-src=\"/p/638c83fa/20190729122640228.png\" alt=\"interpreted-mode\"></p>\n<h3 id=\"-xcomp参数\"><a class=\"anchor\" href=\"#-xcomp参数\">#</a> -Xcomp 参数</h3>\n<figure class=\"highlight plaintext\"><figcaption data-lang=\"plaintext\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>-Xcomp参数与-Xint正好相反，JVM在第一次使用时会把所有的字节码编译成本地代码，从而带来最大程度的优化。</pre></td></tr></table></figure><p><img data-src=\"/p/638c83fa/20190729122919297.png\" alt=\"compiled-mode\"></p>\n<p>然而，很多应用在使用 - Xcomp 也会有一些性能损失，当然这笔 - Xint 损失的少，原因是 - Xcomp 没有让 JVM 启用 JIT 编译器的全部功能。JIT 编译器可以对是否需要编译做出判断。如果所有代码都需要进行编译的话，对于一些只执行一次的代码就没有意义了。</p>\n<h3 id=\"-xmixed参数\"><a class=\"anchor\" href=\"#-xmixed参数\">#</a> -Xmixed 参数</h3>\n<figure class=\"highlight plaintext\"><figcaption data-lang=\"plaintext\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>-Xmixed是混合模式，将解释模式和变异模式进行混合使用，有JVM自己决定，这是JVM的默认模式，也是推荐模式</pre></td></tr></table></figure><p><img data-src=\"/p/638c83fa/2019072913573773.png\" alt=\"mixed-model\"></p>\n<h2 id=\"jvm方法内联优化\"><a class=\"anchor\" href=\"#jvm方法内联优化\">#</a> JVM 方法内联优化</h2>\n<h3 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>在日常中工作中，我们时不时会代码进行一些优化，比如用新的算法，简化计算逻辑，减少计算量等。对于 java 程序来说，除了开发者本身对代码优化之外，还有一个 &quot;人&quot; 也在背后默默的优化我们的代码，这个 &quot;人&quot; 就是 jvm。jvm 会帮我们分析出热点代码，优化代码逻辑。其中 jvm 最常做的优化之一就是：方法内联优化。</p>\n<h3 id=\"方法内联\"><a class=\"anchor\" href=\"#方法内联\">#</a> 方法内联</h3>\n<p>什么是方法内联？又可以叫做函数内联，java 中方法可等同于其它语言中的函数。关于方法内联维基百科上面解释是：</p>\n<blockquote>\n<p>在计算机科学中，内联函数（有时称作在线函数或编译时期展开函数）是一种编程语言结构，用来建议编译器对一些特殊函数进行内联扩展（有时称作在线扩展）；也就是说<strong>建议编译器将指定的函数体插入并取代每一处调用该函数的地方（上下文），从而节省了每次调用函数带来的额外时间开支。</strong></p>\n</blockquote>\n<p>简单通俗的讲就是把方法内部调用的其它方法的逻辑，嵌入到自身的方法中去，变成自身的一部分，之后不再调用该方法，从而节省调用函数带来的额外开支。</p>\n<h3 id=\"函数调用开销\"><a class=\"anchor\" href=\"#函数调用开销\">#</a> 函数调用开销</h3>\n<p>之所以出现方法内联是因为函数调用除了执行自身逻辑的开销外，还有一些不为人知的额外开销。这部分额外的开销主要来自方法栈帧的生成、参数字段的压入、栈帧的弹出、还有指令执行地址的跳转。比如有下面这样代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">function_A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//do something</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">function_B</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">function_B</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//do something</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token function\">function_A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>则代码的执行过程如下：</p>\n<p><img data-src=\"/p/638c83fa/247487dfbaf1ec956441e9e5e2f85817_1440w.jpg\" alt=\"img\"></p>\n<p>所以如果 java 中方法调用嵌套过多或者方法过多，这种额外的开销就越多。</p>\n<p>试想一下想 get/set 这种方法调用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>很可能自身执行逻辑的开销还比不上为了调用这个方法的额外开锁。如果类似的方法被频繁的调用，则真正相对执行效率就会很低，虽然这类方法的执行时间很短。这也是为什么 jvm 会在热点代码中执行方法内联的原因，这样的话就可以省去调用调用函数带来的额外开支。</p>\n<p>这里举个内联的可能形式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span>  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>内联之后：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span>  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样除了本身的相加逻辑的开销，比内联前减少了二次调用函数带来的额外开销。</p>\n<h3 id=\"内联条件\"><a class=\"anchor\" href=\"#内联条件\">#</a> 内联条件</h3>\n<p>一个方法如果满足以下条件就很可能被 jvm 内联。</p>\n<p>1、热点代码： 如果一个方法的执行频率很高就表示优化的潜在价值就越大。那代码执行多少次才能确定为热点代码？这是根据编译器的编译模式来决定的。如果是客户端编译模式则次数是 1500，服务端编译模式是 10000。次数的大小可以通过 - XX:CompileThreshold 来调整。</p>\n<p>2、方法体不能太大：jvm 中被内联的方法会编译成机器码放在 code cache 中。如果方法体太大，则能缓存热点方法就少，反而会影响性能。</p>\n<p>3、如果希望方法被内联，尽量用 private、static、final 修饰，这样 jvm 可以直接内联。如果是 public、protected 修饰方法 jvm 则需要进行类型判断，因为这些方法可以被子类继承和覆盖，jvm 需要判断内联究竟内联是父类还是其中某个子类的方法。</p>\n<blockquote>\n<p>所以了解 jvm 方法内联机制之后，会有助于我们工作中写出能让 jvm 更容易优化的代码，有助于提升程序的性能。</p>\n</blockquote>\n","raw":null,"categories":[{"name":"java","path":"api/categories/java.json"}],"tags":[{"name":"jvm调优","path":"api/tags/jvm调优.json"},{"name":"混合模式","path":"api/tags/混合模式.json"},{"name":"解释模式","path":"api/tags/解释模式.json"},{"name":"纯编译模式","path":"api/tags/纯编译模式.json"}]}]}