{"total":36,"pageSize":10,"pageCount":4,"data":[{"title":"世界少了一个人，而我失去了爷爷","slug":"20230328","date":"2023-03-28T14:07:43.000Z","updated":"2023-04-30T03:19:29.150Z","comments":null,"realpath":null,"path":"api/articles/20230328.json","excerpt":"我的爷爷于 2023 年 03 月 27 日 10:36 分去世了。","keywords":"爷爷,去世,悼念","cover":"/p/15a97059/IMG_0776.JPG","content":"<html><head></head><body><p>我的爷爷于 2023 年 03 月 27 日 10:36 分去世了。</p>\n<span id=\"more\"></span>\n<h4 id=\"简要生平\"><a class=\"markdownIt-Anchor\" href=\"#简要生平\">#</a> 简要生平</h4>\n<p>我的爷爷，彭明辉，出生于 1938 年，享年 85 岁。在我爸的悼念中写道：</p>\n<blockquote>\n<p>父亲大人出生于 1938 年 5 月 14 日贫农家庭，高小文化，1954 年起参加潭湾初级社，六联乡高级社，横烟大队的基层工作，</p>\n<img src=\"/p/15a97059/IMG_0776.JPG\" alt=\"IMG_0776\">\n<p>1956 年 7 月加入中国共产党，在党和政府的培养下，加强学习，得到了领导的推荐，进入人民公社，乡人民政府从事民政、企业会计 (助理会计师职称) 等职务工作，</p>\n<img src=\"/p/15a97059/IMG_0775.JPG\" alt=\"IMG_0775\">\n<p>在几十年的工作中，勤奋努力、兢兢业业、任劳任怨，奉献自己力量，教子有方，儿孙绕膝，一生精力全部奉献给后裔，</p>\n<img src=\"/p/15a97059/IMG_0777.JPG\" alt=\"IMG_0777\">\n<p>严父因年迈突发重病，经多方医治无效，不幸于本闰二月初六日，上午 10.36 时分寿终正寝，享寿 85 年，生前感谢亲友族的亲切关怀，在此我表示深深哀谢！</p>\n</blockquote>\n<p>而我们在整理遗物时，找回了很多年前的回忆，也看到他的意气风发！</p>\n<h4 id=\"我们的回忆\"><a class=\"markdownIt-Anchor\" href=\"#我们的回忆\">#</a> 我们的回忆</h4>\n<p>小时候，我们一群孙辈环绕在他身旁，那时候他应该是很幸福</p>\n<img src=\"/p/15a97059/IMG_0769.jpg\" alt=\"IMG_0769\">\n<p>但是这些记忆直到我们找到照片也记不起，此时我们就像生活在两个平行空间，没有记忆的交集</p>\n<p>相信他也曾无数次翻开这些充满他回忆的照片，也会情不自禁的笑出来</p>\n<img src=\"/p/15a97059/IMG_0768.jpg\" alt=\"IMG_0768\">\n<h4 id=\"他的意气风发\"><a class=\"markdownIt-Anchor\" href=\"#他的意气风发\">#</a> 他的意气风发</h4>\n<p>从他收藏学习生活材料记录来看，他年轻时也是一个爱学习、万事皆计划、喜爱记录、善于整理、非常细心的一个帅气年轻小伙</p>\n<p>记录的家庭成员的生辰八字</p>\n<img src=\"/p/15a97059/IMG_0788.JPG\" alt=\"IMG_0788\">\n<p>写的悼词</p>\n<img src=\"/p/15a97059/IMG_0774.JPG\" alt=\"IMG_0774\">\n<p>种种的点点滴滴，和我们看到的爷爷完全是两个类型的人，此时他如此细腻、如此多愁善感、如此耐心</p>\n<p>此时，不觉令人发醒：人终归黄土，而如何让人长久活在大家记忆之中？</p>\n<p>我觉无非就是他给这个世界留下了什么！</p>\n<p><video src=\"/p/15a97059/1.mp4\" controls=\"\"><source src=\"/p/15a97059/1.mp4\" type=\"video/mp4\"></video></p>\n<p>从前<br>\n您带我们扫墓烧钱，<br>\n您教我们叩头作揖，<br>\n您教我们写您的祖考<br>\n您给我们讲述您的辉煌故事</p>\n<p>以后<br>\n我们给您扫墓烧钱，<br>\n我们给您叩头作揖，<br>\n您变成了我们的祖考<br>\n我们只能从仅存照片中回忆您的故事</p>\n<p>您长眠，我常念；爷爷，一路走好！</p>\n<p>视频制作 By 彭丽娜</p>\n</body></html>","raw":null,"categories":[],"tags":[{"name":"悼念","path":"api/tags/悼念.json"}]},{"title":"希望传递温暖，让异乡变家乡","slug":"20230318","date":"2023-03-18T11:16:54.000Z","updated":"2023-04-30T03:19:29.098Z","comments":null,"realpath":null,"path":"api/articles/20230318.json","excerpt":"希望 480 的同学在全国各地遇到来出差的同学都主动约一下，让大家都能感受四面八方同学的温暖！！！","keywords":"老同学,聚会,传递温暖","cover":"/p/3255df9f/IMG_0743.jpg","content":"<html><head></head><body><p>希望 480 的同学在全国各地遇到来出差的同学都主动约一下，让大家都能感受四面八方同学的温暖！！！</p>\n<span id=\"more\"></span>\n<p>在深圳合気屋下沙店聚一下</p>\n<p><img src=\"/p/3255df9f/IMG_0743.jpg\" alt=\"地点：深圳下沙合気屋\"></p>\n<p>回去路上还挺远</p>\n<p><img src=\"/p/3255df9f/IMG_0745.jpg\" alt=\"回去路线\"></p>\n<p>后面 K 了一下歌</p>\n<p><img src=\"/p/3255df9f/IMG_0752.JPG\" alt=\"K歌\"></p>\n</body></html>","raw":null,"categories":[{"name":"杂记","path":"api/categories/杂记.json"}],"tags":[{"name":"聚会","path":"api/tags/聚会.json"}]},{"title":"从Apollo动态配置原理学Spring(二)","slug":"20230226","date":"2023-02-26T12:39:24.000Z","updated":"2023-04-30T03:19:29.054Z","comments":null,"realpath":null,"path":"api/articles/20230226.json","excerpt":"Apollo 动态配置其实本质就是利用 Spring Bean 的生命周期的扩展点，这个扩展点超级多，不可能全部列出来，只说核心的扩展点。这也就是为什么 Spring 的扩展性很好的原因，开了很多的口子，尽可能让某个功能高内聚松耦合，用户需要哪个功能就用哪个，而不是直接来一个大而全的东西。我们先通过学习核心的，然后后续对照 Apollo 用到了哪些再对照，就会发现很多地方就能理解的很好了","keywords":"Spring生命周期","cover":"/p/4c633c0c/20210707002134280.png","content":"<html><head></head><body><blockquote>\n<p>Apollo 动态配置其实本质就是利用 Spring Bean 的生命周期的扩展点，这个扩展点超级多，不可能全部列出来，只说核心的扩展点。这也就是为什么 Spring 的扩展性很好的原因，开了很多的口子，尽可能让某个功能高内聚松耦合，用户需要哪个功能就用哪个，而不是直接来一个大而全的东西。</p>\n</blockquote>\n<p>我们先通过学习核心的，然后后续对照 Apollo 用到了哪些再对照，就会发现很多地方就能理解的很好了</p>\n<span id=\"more\"></span>\n<p><strong>什么是 Spring Bean 的生命周期</strong></p>\n<p>对于普通的 Java 对象，当 new 的时候创建对象，然后该对象就能够使用了。一旦该对象不再被使用，则由 Java 自动进行垃圾回收。</p>\n<p>而 Spring 中的对象是 bean，bean 和普通的 Java 对象没啥大的区别，只不过 Spring 不再自己去 new 对象了，而是由 IoC 容器去帮助我们实例化对象并且管理它，我们需要哪个对象，去问 IoC 容器要即可。IoC 其实就是解决对象之间的耦合问题，Spring Bean 的生命周期完全由容器控制。</p>\n<h2 id=\"spring-bean-的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#spring-bean-的生命周期\">#</a> Spring Bean 的生命周期</h2>\n<p>这里要提一下，这里我们说的 Spring Bean 的生命周期主要指的是 singleton bean，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。</p>\n<p>我们也来复习下 Spring 中的 bean 的作用域有哪些？</p>\n<ul>\n<li><code>singleton</code>  : 唯一 bean 实例，Spring 中的 bean 默认都是单例的。</li>\n<li><code>prototype</code>  : 每次请求都会创建一个新的 bean 实例。</li>\n<li><code>request</code>  : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP request 内有效。</li>\n<li><code>session</code>  : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效。</li>\n<li><code>global-session</code> ： 全局 session 作用域，仅仅在基于 Portlet 的 web 应用中才有意义，Spring5 已经没有了。Portlet 是能够生成语义代码（例如：HTML）片段的小型 Java Web 插件。它们基于 portlet 容器，可以像 servlet 一样处理 HTTP 请求。但是，与 servlet 不同，每个 portlet 都有不同的会话。</li>\n</ul>\n<p>我们知道对于普通的 Java 对象来说，它们的生命周期就是：</p>\n<ul>\n<li>实例化</li>\n<li>该对象不再被使用时通过垃圾回收机制进行回收</li>\n</ul>\n<p>而对于 Spring Bean 的生命周期来说：</p>\n<ul>\n<li>实例化 Instantiation</li>\n<li>属性赋值 Populate</li>\n<li>初始化 Initialization</li>\n<li>销毁 Destruction</li>\n</ul>\n<p>实例化 -&gt; 属性赋值 -&gt; 初始化 -&gt; 销毁</p>\n<p>只有四个步骤，这样拆解的话是不是感觉也不难？不像其他人写的那样直接一上来就各种 BeanPostProcessor、BeanFactoryPostProcessor 全部怼进流程里去，别说读者看着头大，自己写的可能短时间内还记得流程，隔个一段时间，你可能都不知道自己写了个啥。</p>\n<p>通过 Bean 创建流程入口 <code>AbstractApplicationContext#refresh()</code>  方法的  <code>finishBeanFactoryInitialization(beanFactory)</code>  处带大家跟一下源码，想了想还是不带入过多的代码进来，直接给到最终的主要逻辑。</p>\n<div class=\"highlight-wrap\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"false\" data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Object <span class=\"title function_\">doCreateBean</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, <span class=\"meta\">@Nullable</span> Object[] args)</span> <span class=\"keyword\">throws</span> BeanCreationException {</span><br><span class=\"line\">    <span class=\"type\">BeanWrapper</span> <span class=\"variable\">instanceWrapper</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd.isSingleton()) {</span><br><span class=\"line\">        instanceWrapper = (BeanWrapper)<span class=\"built_in\">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instanceWrapper == <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    \t<span class=\"comment\">// 实例化阶段</span></span><br><span class=\"line\">        instanceWrapper = <span class=\"built_in\">this</span>.createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">exposedObject</span> <span class=\"operator\">=</span> bean;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    \t<span class=\"comment\">// 属性赋值阶段</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.populateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">        <span class=\"comment\">// 初始化阶段</span></span><br><span class=\"line\">        exposedObject = <span class=\"built_in\">this</span>.initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">    } <span class=\"keyword\">catch</span> (Throwable var18) {</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    }</span><br><span class=\"line\">    ...</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div>\n<p>至于销毁，是在容器关闭时调用的，详见  <code>ConfigurableApplicationContext#close()</code></p>\n<p>是不是很清爽了？至于 BeanPostProcessor、BeanFactoryPostProcessor 以及其他的类，只不过是对主流程四个步骤的一系列扩展点而已。</p>\n<h2 id=\"spring-bean-的生命周期的扩展点\"><a class=\"markdownIt-Anchor\" href=\"#spring-bean-的生命周期的扩展点\">#</a> Spring Bean 的生命周期的扩展点</h2>\n<p>Spring Bean 的生命周期的扩展点超级多，老周这里不可能全部列出来，只说核心的扩展点。这也就是为什么 Spring 的扩展性很好的原因，开了很多的口子，尽可能让某个功能高内聚松耦合，用户需要哪个功能就用哪个，而不是直接来一个大而全的东西。</p>\n<p><strong>Bean 自身的方法</strong></p>\n<p>比如构造函数、getter/setter 以及 init-method 和 destory-method 所指定的方法等，也就对应着上文说的实例化 -&gt; 属性赋值 -&gt; 初始化 -&gt; 销毁四个阶段。</p>\n<p><img src=\"/p/4c633c0c/20210707002134280.png\" alt=\"阶段示意图\"></p>\n<p><strong>容器级的方法（BeanPostProcessor 一系列接口）</strong></p>\n<p>主要是后处理器方法，比如下图的  <code>InstantiationAwareBeanPostProcessor</code> 、 <code>BeanPostProcessor</code>  接口方法。这些接口的实现类是独立于 Bean 的，并且会注册到 Spring 容器中。在 Spring 容器创建任何 Bean 的时候，这些后处理器都会发生作用。</p>\n<p><img src=\"/p/4c633c0c/20210707225212729.png\" alt=\"扩展点\"></p>\n<p><strong>InstantiationAwareBeanPostProcessor 源码分析</strong></p>\n<p>我们翻一下源码发现 InstantiationAwareBeanPostProcessor 是继承了 BeanPostProcessor</p>\n<p><img src=\"/p/4c633c0c/20210707230505579.png\" alt=\"InstantiationAwareBeanPostProcessor \"></p>\n<p><img src=\"/p/4c633c0c/20210707230919307.png\" alt=\"BeanPostProcessor\"></p>\n<ul>\n<li><code>InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation</code>  调用点</li>\n</ul>\n<blockquote>\n<p>Object postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName)<br>\n 返回值：如果返回的不为 null，那么后续的 Bean 的创建流程【实例化、初始化 afterProperties】都不会执行，而是直接使用返回的快捷 Bean，此时的正常执行顺序如下：<br>\nInstantiationAwareBeanPostProcessor 接口中的 postProcessBeforeInstantiation，在实例化之前调用。<br>\nBeanPostProcessor 接口中的 postProcessAfterInitialization，在实例化之后调用。</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20210707233026943.png\" alt=\"createbean\"></p>\n<p><img src=\"/p/4c633c0c/20210707235533784.png\" alt=\"resolveBeforeInstantiation\"></p>\n<p><img src=\"/p/4c633c0c/20210708000228655.png\" alt=\"applyBean\"></p>\n<p>总之，postProcessBeforeInstantiation 在 doCreateBean 之前调用，也就是在 bean 实例化之前调用的，英文源码注释解释道该方法的返回值会替换原本的 Bean 作为代理，这也是 <a href=\"https://so.csdn.net/so/search?q=AOP&amp;spm=1001.2101.3001.7020\">AOP</a> 等功能实现的关键点。</p>\n<ul>\n<li><code>InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation</code>  调用点</li>\n</ul>\n<blockquote>\n<p>boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException<br>\n 正常情况下在实例化之后在执行 populateBean 之前调用<br>\n返回值：如果有指定的 bean 的时候返回 false，那么后续的属性填充和属性依赖注入【populateBean】将不会执行，同时后续的 postProcessPropertyValues 将不会执行，但是初始化和 BeanPostProcessor 的仍然会执行。</p>\n</blockquote>\n<p><img src=\"/p/4c633c0c/20210708005050274.png\" alt=\"populateBean\"></p>\n<p>public PropertyValues postProcessPropertyValues(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)<br>\n 实例化之后调用，在方法 applyPropertyValues【属性填充】之前<br>\n返回值：如果返回 null，那么将不会进行后续的属性填充，比如依赖注入等，如果返回的 pvs 额外的添加了属性，那么后续会填充到该类对应的属性中。<br>\npvs：PropertyValues 对象，用于封装指定类的对象，简单来说就是 PropertyValue 的集合，里面相当于以 key-value 形式存放类的属性和值。<br>\npds：PropertyDescriptor 对象数组，PropertyDescriptor 相当于存储类的属性，不过可以调用 set，get 方法设置和获取对应属性的值。</p>\n<p><img src=\"/p/4c633c0c/20210708010057366.png\" alt=\"postProcessPropertyValues\"></p>\n<p><strong>BeanPostProcessor 源码分析</strong></p>\n<blockquote>\n<p>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean</p>\n</blockquote>\n<p><img src=\"/p/4c633c0c/20210708232740951.png\" alt=\"在这里插入图片描述\"><br>\n进入初始化接口：</p>\n<p><img src=\"/p/4c633c0c/20210708233139731.png\" alt=\"在这里插入图片描述\"><br>\n我们先来看</p>\n<blockquote>\n<p>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInitialization</p>\n</blockquote>\n<p><img src=\"/p/4c633c0c/20210708233742525.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>首先获取到所有的后置处理器 getBeanPostProcessors ()</li>\n<li>在 for 循环中依次调用后置处理器的方法  <code>processor.postProcessBeforeInitialization(result, beanName);</code></li>\n<li>进入 postProcessBeforeInitialization 方法</li>\n</ul>\n<blockquote>\n<p>org.springframework.context.support.ApplicationContextAwareProcessor#postProcessBeforeInitialization</p>\n</blockquote>\n<p><img src=\"/p/4c633c0c/20210708234443215.png\" alt=\"在这里插入图片描述\"></p>\n<p>进入  <code>invokeAwareInterfaces(bean);</code>  方法，当前 bean 实现了 ApplicationContextAware 接口。</p>\n<p><img src=\"/p/4c633c0c/20210708234639952.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li><code>ApplicationContextAwareProcessor#postProcessBeforeInitialization</code>  首先判断此 bean 是不是各种的 Aware，如果是它列举的那几个 Aware 就获取 Bean 工厂的权限，可以向容器中导入相关的上下文环境，目的是为了 Bean 实例能够获取到相关的上下文，如果不是它列举的几个 Aware，那就调用  <code>invokeAwareInterfaces(bean)</code> ，向容器中添加相关接口的上下文环境。</li>\n</ul>\n<p><strong>3.3 工厂后处理器方法（BeanFactoryProcessor 一系列接口）</strong></p>\n<p>包括  <code>AspectJWeavingEnabler</code> 、 <code>CustomAutowireConfigurer</code> 、 <code>ConfigurationClassPostProcessor</code>  等。这些都是 Spring 框架中已经实现好的 BeanFactoryPostProcessor，用来实现某些特定的功能。</p>\n<p>我们知道 Spring IoC 容器初始化的关键环节就在  <code>org.springframework.context.support.AbstractApplicationContext#refresh</code>  方法中 ，容器创建的主体流程都在这个方法里面，这个方法是真的重要！！！</p>\n<p>对于工厂后处理器方法老周这里直接带你看  <code>invokeBeanFactoryPostProcessors(beanFactory);</code>  方法，这个方法处理的是  <code>BeanFactoryPostProcessor</code>  接口的 Bean。调用方法如下：</p>\n<p><img src=\"/p/4c633c0c/20210709231013239.png\" alt=\"在这里插入图片描述\"><br>\n跟到最重要的方法里去，代码虽长，但逻辑中规中矩。</p>\n<p><code>BeanFactoryPostProcessor</code> ：一切处理 BeanFactory 的父接口<br>\n <code>BeanDefinitionRegistryPostProcessor</code> ：实现了 BeanFactoryPostProcessor 接口的接口</p>\n<p><img src=\"/p/4c633c0c/20210709233225102.png\" alt=\"在这里插入图片描述\"><br>\n流程说明：</p>\n<ul>\n<li>调用 BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry (registry) 方法。参数 beanFactoryPostProcessors 传入的优先处理掉。然后获取容器注册的，对于这些 Bean 按照 PriorityOrdered 接口、Ordered、没有排序接口的实例分别进行处理。</li>\n<li>调用 BeanFactoryPostProcessor#postProcessBeanFactory (beanFactory) 方法。备注：BeanDefinitionRegistryPostProcessor 属于 BeanFactoryPostProcessor 子接口。先处理属于 BeanDefinitionRegistryPostProcessor 接口实例的 postProcessBeanFactory (beanFactory) 方法，然后获取容器注册的。对于这些 Bean 按照 PriorityOrdered 接口、Ordered、没有排序接口的实例分别进行处理。</li>\n</ul>\n</body></html>","raw":null,"categories":[{"name":"Java","path":"api/categories/Java.json"}],"tags":[{"name":"Apollo","path":"api/tags/Apollo.json"},{"name":"Spring","path":"api/tags/Spring.json"}]},{"title":"从Apollo动态配置原理学Spring(一)","slug":"20230223","date":"2023-02-23T14:29:54.000Z","updated":"2023-04-30T03:19:29.046Z","comments":null,"realpath":null,"path":"api/articles/20230223.json","excerpt":"最近工作碰到需要写一个类似携程 Apollo 的动态配置功能，以此系统学习该原理，熟练掌握下 Spring 的各种机制Apollo 动态配置原理简述Apollo 配置中心动态生效机制，是基于 Http 长轮询请求和 Spring 扩展机制实现的，在 Spring 容器启动过程中，Apollo 通过自定义的 BeanPostProcessor  和 BeanFactoryPostProcessor  將参数中包含 ${…}  占位符和 @Value  注解的 Bean 注册到 Apollo 框架中定义的注册表中。然后通过 Http 长轮询不断的去获取服务端的配置信息，一旦配置发生变化，Apollo 会根据变化的配置的 Key 找到对应的 Bean，然后修改 Bean 的属性，从而实现了配置动态生效的特性。需要注意的是，Apollo 在配置变化后，只能修改 Bean 的属性，例如我们数据源的属性发生变化，新创建的 Connection 对象是没问题的，但是连接池中已经创建的 Connection 对象相关信息是不能动态修改的，所以依然需要重启应用。","keywords":"Apollo,Spring,动态配置","cover":"/p/e352a76e/image-20230223224050610.png","content":"<html><head></head><body><blockquote>\n<p>最近工作碰到需要写一个类似携程 Apollo 的动态配置功能，以此系统学习该原理，熟练掌握下 Spring 的各种机制</p>\n</blockquote>\n<p><strong>Apollo 动态配置原理简述</strong></p>\n<p>Apollo 配置中心动态生效机制，是基于 Http 长轮询请求和 Spring 扩展机制实现的，在 Spring 容器启动过程中，Apollo 通过自定义的 <code>BeanPostProcessor</code>  和 <code>BeanFactoryPostProcessor</code>  將参数中包含 <code>${…}</code>  占位符和 <code>@Value</code>  注解的 Bean 注册到 Apollo 框架中定义的注册表中。然后通过 Http 长轮询不断的去获取服务端的配置信息，一旦配置发生变化，Apollo 会根据变化的配置的 Key 找到对应的 Bean，然后修改 Bean 的属性，从而实现了配置动态生效的特性。</p>\n<p>需要注意的是，Apollo 在配置变化后，只能修改 Bean 的属性，例如我们数据源的属性发生变化，新创建的 Connection 对象是没问题的，但是连接池中已经创建的 Connection 对象相关信息是不能动态修改的，所以依然需要重启应用。</p>\n<span id=\"more\"></span>\n<p>其中涉及到的 Spring 的扩展机制有：</p>\n<ul>\n<li>BeanFactoryPostProcessor</li>\n<li>BeanPostProcessor</li>\n<li>BeanDefinitionRegistry</li>\n<li>PropertySource</li>\n<li>ImportBeanDefinitionRegistrar</li>\n<li>PropertySourcesPlaceholderConfigurer</li>\n</ul>\n<p>…</p>\n<p>其中每一个都是非常关键的点，我们后续会一一进行学习。</p>\n<h2 id=\"apollo启动过程\"><a class=\"markdownIt-Anchor\" href=\"#apollo启动过程\">#</a> Apollo 启动过程</h2>\n<p>首先，我们先看一张图：</p>\n<p><img src=\"/p/e352a76e/image-20230223224050610.png\" alt=\"Apollo启动图\"></p>\n<ol>\n<li>\n<p>Spring 启动，扫描 bean，将相关变量参数注册到 Apollo 属性注册表</p>\n</li>\n<li>\n<p>通过 RemoteConfigRepository 获取配置，持久化本地，后续读取从本地读取，通过 <code>PropertySourcesProcessor</code>  执行如下步骤</p>\n</li>\n</ol>\n<p>（1）根据命名空间从配置中心获取配置信息，创建 RemoteConfigRepository 和 LocalFileConfigRepository 对象。RemoteConfigRepository 表示远程配置中心资源，LocalFileConfigRepository 表示本地缓存配置资源。</p>\n<p>（2）LocalFileConfigRepository 对象缓存配置信息到 C:\\opt\\data 或者 /opt/data 目录</p>\n<p>（3）RemoteConfigRepository 开启 HTTP 长轮询请求定时任务，默认 2s 请求一次。</p>\n<p>（4）將本地缓存配置信息转换为 PropertySource 对象（Apollo 自定义了 Spring 的 PropertySource），加载到 Spring 的 Environment 对象中。至此静态配置就已经加入到环境变量中</p>\n<p>（5）將自定义的 ConfigPropertySource 注册为观察者。一旦 RemoteConfigRepository 发现远程配置中心信息发生变化，ConfigPropertySource 对象会得到通知。</p>\n<ol start=\"3\">\n<li>\n<p>通过一个自定义监听器，监听对应事件</p>\n</li>\n<li>\n<p>后续通过长轮询请求监听到配置变化，根据配置读取注册表里面的 key 和对应的 bean，通过反射修改 bean 对应属性值</p>\n</li>\n</ol>\n<h2 id=\"apollo扩展点\"><a class=\"markdownIt-Anchor\" href=\"#apollo扩展点\">#</a> Apollo 扩展点</h2>\n<ol>\n<li><code>PropertySourcesProcessor</code>  初始化 Apollo 配置、接入 Spring environment，初始化 Apollo 监听器</li>\n<li><code>ApolloAnnotationProcessor</code>  提供 Apollo 一些注解支持 <code>@ApolloConfig</code> ， <code>@ApolloConfigChangeListener</code></li>\n<li><code>SpringValueProcessor</code>  提供对 <code>@Value</code>  动态生效能力 针对实例 bean</li>\n<li><code>SpringValueDefinitionProcessor</code>  提供对 <code>@Value</code>  动态生效能力 针对 bean 定义</li>\n<li><code>ApolloJsonValueProcessor</code>  提供对 <code>@ApolloJsonValue</code>  支持</li>\n</ol>\n<p>上述分别对应使用 Spring 的扩展能力 <code>BeanFactoryPostProcessor</code> 、 <code>BeanPostProcessor</code> 、 <code>BeanPostProcessor</code>  和 <code>BeanFactoryPostProcessor</code> 、 <code>BeanDefinitionRegistryPostProcessor</code> 、 <code>BeanPostProcessor</code></p>\n<p>我们这个系列也会对 apollo 基于 spring 提供的扩展点来嵌入自己的能力。主要为 BeanFactoryPostProcessor、BeanPostProcessor 这两个扩展点；先简单说一下：<em><strong>只需要知道，BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor 在生成所有 beandefinition 之后调用，而 BeanPostProcessor 在通过 beandefinition 实例化 bean 的过程中调用即可。</strong></em></p>\n<p>那这些实现我们就下篇见了！！！</p>\n</body></html>","raw":null,"categories":[{"name":"Java","path":"api/categories/Java.json"}],"tags":[{"name":"Apollo","path":"api/tags/Apollo.json"},{"name":"Spring","path":"api/tags/Spring.json"},{"name":"动态配置","path":"api/tags/动态配置.json"}]},{"title":"QQ上线了24周年注册全球排名这个活动","slug":"20230210","date":"2023-02-10T12:58:50.000Z","updated":"2023-04-30T03:19:29.046Z","comments":null,"realpath":null,"path":"api/articles/20230210.json","excerpt":"2023 年 2 月 10 日是 QQ24 周年的日子，在这天 QQ 上线了 24 周年注册全球排名这个活动，玩家可以在这里看到自己是什么时候创建的账号，并且还可以看到自己的排名信息哦。","keywords":"QQ,注册时间","cover":"/p/75466bf9/20230210161435_71813.jpg","content":"<html><head></head><body><p>2023 年 2 月 10 日是 QQ24 周年的日子，在这天 QQ 上线了 24 周年注册全球排名这个活动，玩家可以在这里看到自己是什么时候创建的账号，并且还可以看到自己的排名信息哦。</p>\n<span id=\"more\"></span>\n<p><img src=\"/p/75466bf9/20230210161435_71813.jpg\" alt=\"QQ\"></p>\n<h3 id=\"qq24周年全球排名查看攻略\"><a class=\"markdownIt-Anchor\" href=\"#qq24周年全球排名查看攻略\">#</a> QQ24 周年全球排名查看攻略</h3>\n<p>这个活动的查看有着两种方式，分别如下：</p>\n<p>1、点击链接（<strong>24 周年全球排名网址 &gt;&gt;</strong><a href=\"https://ti.qq.com/open_qq/newIndex.html?url=https%3A%2F%2Fti.qq.com%2Fact%2Fqq24th%2Findex.html%3F_wv%3D16777219%26_wwv%3D128%26source%3D2\"> 点击查看</a>）</p>\n<p>点击上方的 24 周年全球排名网址链接，这个会直接唤起 qq。</p>\n<p>点击立即查看我们就可以看到自己的排名，需要同意协议。</p>\n<p>下面是我的排名：</p>\n<p><img src=\"/p/75466bf9/IMG_0057.JPG\" alt=\"IMG_0057\"></p>\n</body></html>","raw":null,"categories":[],"tags":[{"name":"QQ","path":"api/tags/QQ.json"},{"name":"那些年","path":"api/tags/那些年.json"}]},{"title":"元宵节，放了烟花","slug":"20230208","date":"2023-02-08T14:29:06.000Z","updated":"2023-04-30T03:19:29.046Z","comments":null,"realpath":null,"path":"api/articles/20230208.json","excerpt":"烟花又称 [花炮]、烟火、焰火、[炮仗]，根据《中国 [烟花爆竹] 标准 — 安全与质量》对烟花爆竹的定义为：以烟火药为原料，用于产生声光色的娱乐用品。中国劳动人民较早发明，常用于盛大的典礼或表演中。烟花其实和爆竹的结构类似，其结构都包含黑 [火药] 和药引。为了达到好的表演效果，[焰火] 和 [礼花弹] 中填充了大量用于发射以及爆炸的火药，例如，一个直径为 20 厘米的礼花弹在发射后，要上升到大概 200 米的高空才会爆炸，而这些星星点点覆盖的 [半径] 大约可以有 80 米左右。","keywords":"烟花,元宵节","cover":"/p/277fd0ba/IMG_0698_1.jpeg","content":"<html><head></head><body><p>烟花又称 [花炮]、烟火、焰火、[炮仗]，根据《中国 [烟花爆竹] 标准 — 安全与质量》对烟花爆竹的定义为：以烟火药为原料，用于产生声光色的娱乐用品。中国劳动人民较早发明，常用于盛大的典礼或表演中。</p>\n<p>烟花其实和爆竹的结构类似，其结构都包含黑 [火药] 和药引。为了达到好的表演效果，[焰火] 和 [礼花弹] 中填充了大量用于发射以及爆炸的火药，例如，一个直径为 20 厘米的礼花弹在发射后，要上升到大概 200 米的高空才会爆炸，而这些星星点点覆盖的 [半径] 大约可以有 80 米左右。</p>\n<span id=\"more\"></span>\n<p><img src=\"/p/277fd0ba/IMG_0698_1.jpeg\" alt=\"小区放烟花\"></p>\n<p>醴陵花炮起源最早可上溯至唐代，已经有着上千年的历史，以产地醴陵而被概括命名。当地是烟花的发祥地，也是花炮祖师李畋的故乡，被誉为名副其实的 “花炮之乡”。</p>\n<p>浏阳花炮，湖南省浏阳市特产，中国国家地理标志产品。<br>\n浏阳市是世界著名的花炮之乡。浏阳花炮造型美观，色彩鲜艳，质量可靠，素有 “浏阳花炮震天下” 的美名。2002 年 10 月，在浏阳闭幕的首届国际花炮合作与贸易大会上，浏阳成为国际花炮协会总部永久所在地。2007 年，“浏阳花炮” 被正式认定为中国驰名商标。 [3]<br>\n 2003 年 03 月 06 日，原国家质检总局批准对 “浏阳花炮” 实施地理标志产品保护。</p>\n<p>作为醴陵人，说实话，浏阳花炮的科技量要比醴陵花炮高，这几年醴陵也在紧追猛赶！加油！</p>\n</body></html>","raw":null,"categories":[],"tags":[{"name":"烟花","path":"api/tags/烟花.json"},{"name":"元宵节","path":"api/tags/元宵节.json"}]},{"title":"2023兔年春节","slug":"20230204","date":"2023-02-04T07:27:08.000Z","updated":"2023-04-30T03:19:28.902Z","comments":null,"realpath":null,"path":"api/articles/20230204.json","excerpt":"# 1. 春节年前，家县城进行烟花表演： [Figure] 估计是增加了延迟拍摄","keywords":"春节,过年,合照,堵车","cover":"/p/ebb8427d/IMG_0650.PNG","content":"<html><head></head><body><h3 id=\"1-春节年前家县城进行烟花表演\"><a class=\"markdownIt-Anchor\" href=\"#1-春节年前家县城进行烟花表演\">#</a> 1. 春节年前，家县城进行烟花表演：</h3>\n<p><img src=\"/p/ebb8427d/IMG_0650.PNG\" alt=\"烟花表演1\"></p>\n<p>估计是增加了延迟拍摄</p>\n<span id=\"more\"></span>\n<p><img src=\"/p/ebb8427d/IMG_0651.PNG\" alt=\"烟花表演2\"></p>\n<p><img src=\"/p/ebb8427d/IMG_0652.PNG\" alt=\"烟花表演3\"></p>\n<p>还是得加滤镜啊</p>\n<p><img src=\"/p/ebb8427d/IMG_0653.PNG\" alt=\"烟花表演4\"></p>\n<h3 id=\"2-大伯家客厅搞了个灯\"><a class=\"markdownIt-Anchor\" href=\"#2-大伯家客厅搞了个灯\">#</a> 2. 大伯家客厅搞了个 “灯”</h3>\n<p><img src=\"/p/ebb8427d/IMG_0656.JPG\" alt=\"大伯家的“灯”\"></p>\n<h3 id=\"3-玩游戏的小外甥\"><a class=\"markdownIt-Anchor\" href=\"#3-玩游戏的小外甥\">#</a> 3. 玩游戏的小外甥</h3>\n<p><img src=\"/p/ebb8427d/IMG_0657.jpg\" alt=\"认真玩游戏\"></p>\n<h3 id=\"4-外婆家合照\"><a class=\"markdownIt-Anchor\" href=\"#4-外婆家合照\">#</a> 4. 外婆家合照</h3>\n<p><img src=\"/p/ebb8427d/IMG_0681.jpg\" alt=\"外婆家合照\"></p>\n<h3 id=\"5-老表们\"><a class=\"markdownIt-Anchor\" href=\"#5-老表们\">#</a> 5. 老表们</h3>\n<p><img src=\"/p/ebb8427d/IMG_1794.jpg\" alt=\"我和老表们\"></p>\n<h3 id=\"6-主公我是忠臣\"><a class=\"markdownIt-Anchor\" href=\"#6-主公我是忠臣\">#</a> 6. 主公，我是忠臣</h3>\n<p>特别说明：服务员也太不走心，少拍了一个人都说挺好，那个人是 “望叔”，给望叔郑重道歉！</p>\n<p><img src=\"/p/ebb8427d/IMG_0690.JPG\" alt=\"同学聚合照\"></p>\n<h3 id=\"7-王家码头\"><a class=\"markdownIt-Anchor\" href=\"#7-王家码头\">#</a> 7. 王家码头</h3>\n<p><img src=\"/p/ebb8427d/IMG_0691.JPG\" alt=\"王家码头\"></p>\n<h3 id=\"8-家族祠堂\"><a class=\"markdownIt-Anchor\" href=\"#8-家族祠堂\">#</a> 8. 家族祠堂</h3>\n<p><img src=\"/p/ebb8427d/IMG_0692.JPG\" alt=\"祠堂\"></p>\n<h3 id=\"9-返程堵车\"><a class=\"markdownIt-Anchor\" href=\"#9-返程堵车\">#</a> 9. 返程堵车</h3>\n<p>原本的 12h 变成 20 多小时，真是辛苦司机了。</p>\n<p><img src=\"/p/ebb8427d/IMG_0694.JPG\" alt=\"堵车\"></p>\n</body></html>","raw":null,"categories":[{"name":"杂记","path":"api/categories/杂记.json"}],"tags":[{"name":"春节","path":"api/tags/春节.json"}]},{"title":"室友“羊”了","slug":"20221219","date":"2022-12-19T12:46:23.000Z","updated":"2023-04-30T03:19:28.894Z","comments":null,"realpath":null,"path":"api/articles/20221219.json","excerpt":"室友这几天不舒服，就测了，果不其然🐑了，我应该是很危险了。","keywords":"核酸,羊了","cover":"/p/850ce73f/image-20221219212509735.png","content":"<html><head></head><body><p>室友这几天不舒服，就测了，果不其然🐑了，我应该是很危险了。</p>\n<span id=\"more\"></span>\n<p><img src=\"/p/850ce73f/image-20221219212509735.png\" alt=\"抗原检测阳性\"></p>\n</body></html>","raw":null,"categories":[{"name":"杂记","path":"api/categories/杂记.json"}],"tags":[{"name":"疫情","path":"api/tags/疫情.json"}]},{"title":"疫情三年，是时候结束了！","slug":"20221212","date":"2022-12-12T12:56:26.000Z","updated":"2023-04-30T03:19:28.882Z","comments":null,"realpath":null,"path":"api/articles/20221212.json","excerpt":"疫情三年，什么变化了？什么没有变化呢？疫情三年变化的是，出现了健康码、行程码、核酸检测疫情三年变化的是，到处都贴起了二维码、出行限制、经济发展滞缓","keywords":"疫情,新冠疫情,行程码,核酸检测","cover":"/p/d223f900/image-20221212210631735.png","content":"<html><head></head><body><blockquote>\n<p>疫情三年，什么变化了？什么没有变化呢？</p>\n</blockquote>\n<p>疫情三年变化的是，出现了健康码、行程码、核酸检测</p>\n<p>疫情三年变化的是，到处都贴起了二维码、出行限制、经济发展滞缓</p>\n<span id=\"more\"></span>\n<p><img src=\"/p/d223f900/image-20221212210631735.png\" alt=\"核酸检测点即将拆除\"></p>\n<p>三年疫情，突然放开，大家还是有些许不适应</p>\n<p>还是习惯的过门卡掏出手机，还是习惯每天准点测核酸</p>\n<p>三年疫情对国家也有很大冲击，国家开始发行国债，用来弥补这三年的核酸检测国家政府开支</p>\n<p>三年疫情对经济冲击夜很大，许多行业都开始收紧，业务调整，裁员潮，都开始 “过冬” 了</p>\n<p><img src=\"/p/d223f900/image-20221212210553921.png\" alt=\"行程码下线\"></p>\n<p>不变的是啥呢？</p>\n<p>唯一不变的估计是人吗？</p>\n</body></html>","raw":null,"categories":[{"name":"杂记","path":"api/categories/杂记.json"}],"tags":[{"name":"疫情","path":"api/tags/疫情.json"}]},{"title":"被围绕的区域——LeetCode130","slug":"surrounded-regions","date":"2022-02-08T11:56:55.000Z","updated":"2023-04-30T03:19:29.610Z","comments":null,"realpath":null,"path":"api/articles/surrounded-regions.json","excerpt":"给你一个  m x n  的矩阵  board  ，由若干字符  'X'  和  'O'  ，找到所有被  'X'  围绕的区域，并将这些区域里所有的  'O'  用  'X'  填充。 [Figure] ","keywords":"矩阵,栈,深度遍历,广度遍历","cover":"/p/52a5c0f5/xogrid.jpg","content":"<html><head></head><body><p>给你一个  <code>m x n</code>  的矩阵  <code>board</code>  ，由若干字符  <code>'X'</code>  和  <code>'O'</code>  ，找到所有被  <code>'X'</code>  围绕的区域，并将这些区域里所有的  <code>'O'</code>  用  <code>'X'</code>  填充。</p>\n<p><img src=\"/p/52a5c0f5/xogrid.jpg\" alt=\"img\"></p>\n<span id=\"more\"></span>\n<p>示例 1</p>\n<div class=\"highlight-wrap\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"false\" data-rel=\"PLAINTEXT\"><figure class=\"iseeu highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]</span><br><span class=\"line\">输出：[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]</span><br><span class=\"line\">解释：被围绕的区间不会存在于边界上，换句话说，任何边界上的&nbsp;'O'&nbsp;都不会被填充为&nbsp;'X'。 任何不在边界上，或不与边界上的&nbsp;'O'&nbsp;相连的&nbsp;'O'&nbsp;最终都会被填充为&nbsp;'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。</span><br></pre></td></tr></tbody></table></figure></div>\n<p>示例 2</p>\n<div class=\"highlight-wrap\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"false\" data-rel=\"PLAINTEXT\"><figure class=\"iseeu highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：board = [[\"X\"]]</span><br><span class=\"line\">输出：[[\"X\"]]</span><br></pre></td></tr></tbody></table></figure></div>\n<p>提示：</p>\n<div class=\"highlight-wrap\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"false\" data-rel=\"PLAINTEXT\"><figure class=\"iseeu highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m == board.length</span><br><span class=\"line\">n == board[i].length</span><br><span class=\"line\">1 &lt;= m, n &lt;= 200</span><br><span class=\"line\">board[i][j] 为 'X' 或 'O'</span><br></pre></td></tr></tbody></table></figure></div>\n<h3 id=\"解题\"><a class=\"markdownIt-Anchor\" href=\"#解题\">#</a> 解题</h3>\n<p>写在前面<br>\n本题给定的矩阵中有三种元素：</p>\n<ul>\n<li>\n<p>字母 X；</p>\n</li>\n<li>\n<p>被字母 X 包围的字母 O；</p>\n</li>\n<li>\n<p>没有被字母 X 包围的字母 O。</p>\n</li>\n</ul>\n<p>本题要求将所有被字母 X 包围的字母 O 都变为字母 X ，但很难判断哪些 O 是被包围的，哪些 O 不是被包围的。</p>\n<p>注意到题目解释中提到： <code>任何边界上的 O 都不会被填充为 X</code> 。 我们可以想到，所有的不被包围的 O 都直接或间接与边界上的 O 相连。我们可以利用这个性质判断 O 是否在边界上，具体地说：</p>\n<ul>\n<li>对于每一个边界上的 O，我们以它为起点，标记所有与它直接或间接相连的字母 O；<br>\n最后我们遍历这个矩阵，对于每一个字母：</li>\n<li>如果该字母被标记过，则该字母为没有被字母 X 包围的字母 O，我们将其还原为字母 O；<br>\n如果该字母没有被标记过，则该字母为被字母 X 包围的字母 O，我们将其修改为字母 X。</li>\n</ul>\n<h3 id=\"方法一深度优先搜索\"><a class=\"markdownIt-Anchor\" href=\"#方法一深度优先搜索\">#</a> 方法一：深度优先搜索</h3>\n<h4 id=\"思路及解法\"><a class=\"markdownIt-Anchor\" href=\"#思路及解法\">#</a> 思路及解法</h4>\n<p>我们可以使用深度优先搜索实现标记操作。在下面的代码中，我们把标记过的字母 O 修改为字母 A。</p>\n<div class=\"highlight-wrap\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"false\" data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> {</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">solve</span><span class=\"params\">(<span class=\"type\">char</span>[][] board)</span> {</span><br><span class=\"line\">        n = board.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        m = board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) {</span><br><span class=\"line\">            dfs(board, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">            dfs(board, i, m - <span class=\"number\">1</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; m - <span class=\"number\">1</span>; i++) {</span><br><span class=\"line\">            dfs(board, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">            dfs(board, n - <span class=\"number\">1</span>, i);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) {</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; m; j++) {</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board[i][j] == <span class=\"string\">'A'</span>) {</span><br><span class=\"line\">                    board[i][j] = <span class=\"string\">'O'</span>;</span><br><span class=\"line\">                } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (board[i][j] == <span class=\"string\">'O'</span>) {</span><br><span class=\"line\">                    board[i][j] = <span class=\"string\">'X'</span>;</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">char</span>[][] board, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || x &gt;= n || y &lt; <span class=\"number\">0</span> || y &gt;= m || board[x][y] != <span class=\"string\">'O'</span>) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        board[x][y] = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">        dfs(board, x + <span class=\"number\">1</span>, y);</span><br><span class=\"line\">        dfs(board, x - <span class=\"number\">1</span>, y);</span><br><span class=\"line\">        dfs(board, x, y + <span class=\"number\">1</span>);</span><br><span class=\"line\">        dfs(board, x, y - <span class=\"number\">1</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div>\n<h4 id=\"复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#复杂度分析\">#</a> 复杂度分析</h4>\n<ul>\n<li>\n<p>时间复杂度： <code>O(n×m)</code> ，其中  <code>n</code>  和  <code>m </code> 分别为矩阵的行数和列数。深度优先搜索过程中，每一个点至多只会被标记一次。</p>\n</li>\n<li>\n<p>空间复杂度： <code>O(n×m)</code> ，其中  <code>n</code>  和  <code>m</code>  分别为矩阵的行数和列数。主要为深度优先搜索的栈的开销。</p>\n</li>\n</ul>\n<h3 id=\"方法二广度优先搜索\"><a class=\"markdownIt-Anchor\" href=\"#方法二广度优先搜索\">#</a> 方法二：广度优先搜索</h3>\n<h4 id=\"思路及解法-2\"><a class=\"markdownIt-Anchor\" href=\"#思路及解法-2\">#</a> 思路及解法</h4>\n<p>我们可以使用广度优先搜索实现标记操作。在下面的代码中，我们把标记过的字母  <code>O</code>  修改为字母  <code>A</code> 。</p>\n<div class=\"highlight-wrap\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"false\" data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> {</span><br><span class=\"line\">    <span class=\"type\">int</span>[] dx = {<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>};</span><br><span class=\"line\">    <span class=\"type\">int</span>[] dy = {<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, -<span class=\"number\">1</span>};</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">solve</span><span class=\"params\">(<span class=\"type\">char</span>[][] board)</span> {</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> board.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        Queue&lt;<span class=\"type\">int</span>[]&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;<span class=\"type\">int</span>[]&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board[i][<span class=\"number\">0</span>] == <span class=\"string\">'O'</span>) {</span><br><span class=\"line\">                queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]{i, <span class=\"number\">0</span>});</span><br><span class=\"line\">                board[i][<span class=\"number\">0</span>] = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board[i][m - <span class=\"number\">1</span>] == <span class=\"string\">'O'</span>) {</span><br><span class=\"line\">                queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]{i, m - <span class=\"number\">1</span>});</span><br><span class=\"line\">                board[i][m - <span class=\"number\">1</span>] = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; m - <span class=\"number\">1</span>; i++) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board[<span class=\"number\">0</span>][i] == <span class=\"string\">'O'</span>) {</span><br><span class=\"line\">                queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]{<span class=\"number\">0</span>, i});</span><br><span class=\"line\">                board[<span class=\"number\">0</span>][i] = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board[n - <span class=\"number\">1</span>][i] == <span class=\"string\">'O'</span>) {</span><br><span class=\"line\">                queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]{n - <span class=\"number\">1</span>, i});</span><br><span class=\"line\">                board[n - <span class=\"number\">1</span>][i] = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) {</span><br><span class=\"line\">            <span class=\"type\">int</span>[] cell = queue.poll();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> cell[<span class=\"number\">0</span>], y = cell[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) {</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">mx</span> <span class=\"operator\">=</span> x + dx[i], my = y + dy[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mx &lt; <span class=\"number\">0</span> || my &lt; <span class=\"number\">0</span> || mx &gt;= n || my &gt;= m || board[mx][my] != <span class=\"string\">'O'</span>) {</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                }</span><br><span class=\"line\">                queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]{mx, my});</span><br><span class=\"line\">                board[mx][my] = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) {</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; m; j++) {</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board[i][j] == <span class=\"string\">'A'</span>) {</span><br><span class=\"line\">                    board[i][j] = <span class=\"string\">'O'</span>;</span><br><span class=\"line\">                } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (board[i][j] == <span class=\"string\">'O'</span>) {</span><br><span class=\"line\">                    board[i][j] = <span class=\"string\">'X'</span>;</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></div>\n<h4 id=\"复杂度分析-2\"><a class=\"markdownIt-Anchor\" href=\"#复杂度分析-2\">#</a> 复杂度分析</h4>\n<ul>\n<li>\n<p>时间复杂度： <code>O(n×m)</code> ，其中  <code>n</code>  和  <code>m</code>  分别为矩阵的行数和列数。广度优先搜索过程中，每一个点至多只会被标记一次。</p>\n</li>\n<li>\n<p>空间复杂度： <code>O(n×m)</code> ，其中  <code>n</code>  和  <code>m</code>  分别为矩阵的行数和列数。主要为广度优先搜索的队列的开销。</p>\n</li>\n</ul>\n</body></html>","raw":null,"categories":[{"name":"LeetCode","path":"api/categories/LeetCode.json"},{"name":"算法","path":"api/categories/算法.json"},{"name":"java","path":"api/categories/java.json"}],"tags":[{"name":"矩阵","path":"api/tags/矩阵.json"},{"name":"深度遍历","path":"api/tags/深度遍历.json"},{"name":"广度遍历","path":"api/tags/广度遍历.json"}]}]}